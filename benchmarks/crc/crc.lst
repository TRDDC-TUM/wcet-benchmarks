   1               		.file	"crc.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               	.global	lin
  11               		.data
  14               	lin:
  15 0000 6173 6466 		.string	"asdffeagewaHAFEFaeDsFEawFdsFaefaeerdjgp"
  15      6665 6167 
  15      6577 6148 
  15      4146 4546 
  15      6165 4473 
  16 0028 0000 0000 		.zero	216
  16      0000 0000 
  16      0000 0000 
  16      0000 0000 
  16      0000 0000 
  17               		.text
  18               	.global	icrc1
  20               	icrc1:
  21               	.LFB0:
  22               		.file 1 "crc.c"
   1:crc.c         **** /* $Id: crc.c,v 1.2 2005/04/04 11:34:58 csg Exp $ */
   2:crc.c         **** 
   3:crc.c         **** /*************************************************************************/
   4:crc.c         **** /*                                                                       */
   5:crc.c         **** /*   SNU-RT Benchmark Suite for Worst Case Timing Analysis               */
   6:crc.c         **** /*   =====================================================               */
   7:crc.c         **** /*                              Collected and Modified by S.-S. Lim      */
   8:crc.c         **** /*                                           sslim@archi.snu.ac.kr       */
   9:crc.c         **** /*                                         Real-Time Research Group      */
  10:crc.c         **** /*                                        Seoul National University      */
  11:crc.c         **** /*                                                                       */
  12:crc.c         **** /*                                                                       */
  13:crc.c         **** /*        < Features > - restrictions for our experimental environment   */
  14:crc.c         **** /*                                                                       */
  15:crc.c         **** /*          1. Completely structured.                                    */
  16:crc.c         **** /*               - There are no unconditional jumps.                     */
  17:crc.c         **** /*               - There are no exit from loop bodies.                   */
  18:crc.c         **** /*                 (There are no 'break' or 'return' in loop bodies)     */
  19:crc.c         **** /*          2. No 'switch' statements.                                   */
  20:crc.c         **** /*          3. No 'do..while' statements.                                */
  21:crc.c         **** /*          4. Expressions are restricted.                               */
  22:crc.c         **** /*               - There are no multiple expressions joined by 'or',     */
  23:crc.c         **** /*                'and' operations.                                      */
  24:crc.c         **** /*          5. No library calls.                                         */
  25:crc.c         **** /*               - All the functions needed are implemented in the       */
  26:crc.c         **** /*                 source file.                                          */
  27:crc.c         **** /*                                                                       */
  28:crc.c         **** /*                                                                       */
  29:crc.c         **** /*************************************************************************/
  30:crc.c         **** /*                                                                       */
  31:crc.c         **** /*  FILE: crc.c                                                          */
  32:crc.c         **** /*  SOURCE : Numerical Recipes in C - The Second Edition                 */
  33:crc.c         **** /*                                                                       */
  34:crc.c         **** /*  DESCRIPTION :                                                        */
  35:crc.c         **** /*                                                                       */
  36:crc.c         **** /*     A demonstration for CRC (Cyclic Redundancy Check) operation.      */
  37:crc.c         **** /*     The CRC is manipulated as two functions, icrc1 and icrc.          */
  38:crc.c         **** /*     icrc1 is for one character and icrc uses icrc1 for a string.      */
  39:crc.c         **** /*     The input string is stored in array lin[].                        */
  40:crc.c         **** /*     icrc is called two times, one for X-Modem string CRC and the      */
  41:crc.c         **** /*     other for X-Modem packet CRC.                                     */
  42:crc.c         **** /*                                                                       */
  43:crc.c         **** /*  REMARK :                                                             */
  44:crc.c         **** /*                                                                       */
  45:crc.c         **** /*  EXECUTION TIME :                                                     */
  46:crc.c         **** /*                                                                       */
  47:crc.c         **** /*                                                                       */
  48:crc.c         **** /*************************************************************************/
  49:crc.c         **** 
  50:crc.c         **** 
  51:crc.c         **** typedef unsigned char uchar;
  52:crc.c         **** #define LOBYTE(x) ((uchar)((x) & 0xFF))
  53:crc.c         **** #define HIBYTE(x) ((uchar)((x) >> 8))
  54:crc.c         **** 
  55:crc.c         **** unsigned char lin[256] = "asdffeagewaHAFEFaeDsFEawFdsFaefaeerdjgp";
  56:crc.c         **** 
  57:crc.c         **** unsigned short icrc1(unsigned short crc, unsigned char onech)
  58:crc.c         **** {
  23               		.loc 1 58 0
  24 0000 CF93      		push r28
  25               	.LCFI0:
  26 0002 DF93      		push r29
  27               	.LCFI1:
  28 0004 CDB7      		in r28,__SP_L__
  29 0006 DEB7      		in r29,__SP_H__
  30               	.LCFI2:
  31 0008 2797      		sbiw r28,7
  32               	.LCFI3:
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 7 */
  40               	/* stack size = 9 */
  41               	.L__stack_usage = 9
  42 0014 9E83      		std Y+6,r25
  43 0016 8D83      		std Y+5,r24
  44 0018 6F83      		std Y+7,r22
  59:crc.c         **** 	int i;
  60:crc.c         **** 	unsigned short ans=(crc^onech << 8);
  45               		.loc 1 60 0
  46 001a 8F81      		ldd r24,Y+7
  47 001c 882F      		mov r24,r24
  48 001e 90E0      		ldi r25,0
  49 0020 982F      		mov r25,r24
  50 0022 8827      		clr r24
  51 0024 9C01      		movw r18,r24
  52 0026 8D81      		ldd r24,Y+5
  53 0028 9E81      		ldd r25,Y+6
  54 002a 8227      		eor r24,r18
  55 002c 9327      		eor r25,r19
  56 002e 9C83      		std Y+4,r25
  57 0030 8B83      		std Y+3,r24
  61:crc.c         **** 
  62:crc.c         **** 	for (i=0;i<8;i++) {
  58               		.loc 1 62 0
  59 0032 1A82      		std Y+2,__zero_reg__
  60 0034 1982      		std Y+1,__zero_reg__
  61 0036 00C0      		rjmp .L2
  62               	.L5:
  63:crc.c         **** 		if (ans & 0x8000)
  63               		.loc 1 63 0
  64 0038 8B81      		ldd r24,Y+3
  65 003a 9C81      		ldd r25,Y+4
  66 003c 9923      		tst r25
  67 003e 04F4      		brge .L3
  64:crc.c         **** 			ans = (ans <<= 1) ^ 4129;
  68               		.loc 1 64 0
  69 0040 8B81      		ldd r24,Y+3
  70 0042 9C81      		ldd r25,Y+4
  71 0044 880F      		lsl r24
  72 0046 991F      		rol r25
  73 0048 9C83      		std Y+4,r25
  74 004a 8B83      		std Y+3,r24
  75 004c 8B81      		ldd r24,Y+3
  76 004e 9C81      		ldd r25,Y+4
  77 0050 21E2      		ldi r18,33
  78 0052 8227      		eor r24,r18
  79 0054 20E1      		ldi r18,16
  80 0056 9227      		eor r25,r18
  81 0058 9C83      		std Y+4,r25
  82 005a 8B83      		std Y+3,r24
  83 005c 00C0      		rjmp .L4
  84               	.L3:
  65:crc.c         **** 		else
  66:crc.c         **** 			ans <<= 1;
  85               		.loc 1 66 0
  86 005e 8B81      		ldd r24,Y+3
  87 0060 9C81      		ldd r25,Y+4
  88 0062 880F      		lsl r24
  89 0064 991F      		rol r25
  90 0066 9C83      		std Y+4,r25
  91 0068 8B83      		std Y+3,r24
  92               	.L4:
  62:crc.c         **** 	for (i=0;i<8;i++) {
  93               		.loc 1 62 0
  94 006a 8981      		ldd r24,Y+1
  95 006c 9A81      		ldd r25,Y+2
  96 006e 0196      		adiw r24,1
  97 0070 9A83      		std Y+2,r25
  98 0072 8983      		std Y+1,r24
  99               	.L2:
  62:crc.c         **** 	for (i=0;i<8;i++) {
 100               		.loc 1 62 0 is_stmt 0 discriminator 1
 101 0074 8981      		ldd r24,Y+1
 102 0076 9A81      		ldd r25,Y+2
 103 0078 8830      		cpi r24,8
 104 007a 9105      		cpc r25,__zero_reg__
 105 007c 04F0      		brlt .L5
  67:crc.c         **** 	}
  68:crc.c         **** 	return ans;
 106               		.loc 1 68 0 is_stmt 1
 107 007e 8B81      		ldd r24,Y+3
 108 0080 9C81      		ldd r25,Y+4
 109               	/* epilogue start */
  69:crc.c         **** }
 110               		.loc 1 69 0
 111 0082 2796      		adiw r28,7
 112 0084 0FB6      		in __tmp_reg__,__SREG__
 113 0086 F894      		cli
 114 0088 DEBF      		out __SP_H__,r29
 115 008a 0FBE      		out __SREG__,__tmp_reg__
 116 008c CDBF      		out __SP_L__,r28
 117 008e DF91      		pop r29
 118 0090 CF91      		pop r28
 119 0092 0895      		ret
 120               	.LFE0:
 122               	.global	icrc
 124               	icrc:
 125               	.LFB1:
  70:crc.c         **** 
  71:crc.c         **** unsigned short icrc(unsigned short crc, unsigned long len,
  72:crc.c         **** 		    short jinit, int jrev)
  73:crc.c         **** {
 126               		.loc 1 73 0
 127 0094 0F93      		push r16
 128               	.LCFI4:
 129 0096 1F93      		push r17
 130               	.LCFI5:
 131 0098 CF93      		push r28
 132               	.LCFI6:
 133 009a DF93      		push r29
 134               	.LCFI7:
 135 009c CDB7      		in r28,__SP_L__
 136 009e DEB7      		in r29,__SP_H__
 137               	.LCFI8:
 138 00a0 6297      		sbiw r28,18
 139               	.LCFI9:
 140 00a2 0FB6      		in __tmp_reg__,__SREG__
 141 00a4 F894      		cli
 142 00a6 DEBF      		out __SP_H__,r29
 143 00a8 0FBE      		out __SREG__,__tmp_reg__
 144 00aa CDBF      		out __SP_L__,r28
 145               	/* prologue: function */
 146               	/* frame size = 18 */
 147               	/* stack size = 22 */
 148               	.L__stack_usage = 22
 149 00ac 9A87      		std Y+10,r25
 150 00ae 8987      		std Y+9,r24
 151 00b0 4B87      		std Y+11,r20
 152 00b2 5C87      		std Y+12,r21
 153 00b4 6D87      		std Y+13,r22
 154 00b6 7E87      		std Y+14,r23
 155 00b8 388B      		std Y+16,r19
 156 00ba 2F87      		std Y+15,r18
 157 00bc 1A8B      		std Y+18,r17
 158 00be 098B      		std Y+17,r16
  74:crc.c         ****   unsigned short icrc1(unsigned short crc, unsigned char onech);
  75:crc.c         ****   static unsigned short icrctb[256],init=0;
  76:crc.c         ****   static uchar rchr[256];
  77:crc.c         ****   unsigned short tmp1, tmp2, j,cword=crc;
 159               		.loc 1 77 0
 160 00c0 8985      		ldd r24,Y+9
 161 00c2 9A85      		ldd r25,Y+10
 162 00c4 9887      		std Y+8,r25
 163 00c6 8F83      		std Y+7,r24
  78:crc.c         ****   static uchar it[16]={0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15};
  79:crc.c         **** 
  80:crc.c         ****   if (!init) {
 164               		.loc 1 80 0
 165 00c8 8091 0000 		lds r24,init.1372
 166 00cc 9091 0000 		lds r25,init.1372+1
 167 00d0 0097      		sbiw r24,0
 168 00d2 01F0      		breq .+2
 169 00d4 00C0      		rjmp .L8
  81:crc.c         ****     init=1;
 170               		.loc 1 81 0
 171 00d6 81E0      		ldi r24,lo8(1)
 172 00d8 90E0      		ldi r25,0
 173 00da 9093 0000 		sts init.1372+1,r25
 174 00de 8093 0000 		sts init.1372,r24
  82:crc.c         ****     for (j=0;j<=255;j++) {
 175               		.loc 1 82 0
 176 00e2 1E82      		std Y+6,__zero_reg__
 177 00e4 1D82      		std Y+5,__zero_reg__
 178 00e6 00C0      		rjmp .L9
 179               	.L10:
  83:crc.c         ****       icrctb[j]=icrc1(j << 8,(uchar)0);
 180               		.loc 1 83 0 discriminator 2
 181 00e8 8D81      		ldd r24,Y+5
 182 00ea 9E81      		ldd r25,Y+6
 183 00ec 982F      		mov r25,r24
 184 00ee 8827      		clr r24
 185 00f0 60E0      		ldi r22,0
 186 00f2 0E94 0000 		call icrc1
 187 00f6 9C01      		movw r18,r24
 188 00f8 8D81      		ldd r24,Y+5
 189 00fa 9E81      		ldd r25,Y+6
 190 00fc 880F      		lsl r24
 191 00fe 991F      		rol r25
 192 0100 8050      		subi r24,lo8(-(icrctb.1371))
 193 0102 9040      		sbci r25,hi8(-(icrctb.1371))
 194 0104 FC01      		movw r30,r24
 195 0106 3183      		std Z+1,r19
 196 0108 2083      		st Z,r18
  84:crc.c         ****       rchr[j]=(uchar)(it[j & 0xF] << 4 | it[j >> 4]);
 197               		.loc 1 84 0 discriminator 2
 198 010a 8D81      		ldd r24,Y+5
 199 010c 9E81      		ldd r25,Y+6
 200 010e 8F70      		andi r24,15
 201 0110 9927      		clr r25
 202 0112 8050      		subi r24,lo8(-(it.1378))
 203 0114 9040      		sbci r25,hi8(-(it.1378))
 204 0116 FC01      		movw r30,r24
 205 0118 8081      		ld r24,Z
 206 011a 882F      		mov r24,r24
 207 011c 90E0      		ldi r25,0
 208 011e 8295      		swap r24
 209 0120 9295      		swap r25
 210 0122 907F      		andi r25,0xf0
 211 0124 9827      		eor r25,r24
 212 0126 807F      		andi r24,0xf0
 213 0128 9827      		eor r25,r24
 214 012a 282F      		mov r18,r24
 215 012c 8D81      		ldd r24,Y+5
 216 012e 9E81      		ldd r25,Y+6
 217 0130 9295      		swap r25
 218 0132 8295      		swap r24
 219 0134 8F70      		andi r24,0x0f
 220 0136 8927      		eor r24,r25
 221 0138 9F70      		andi r25,0x0f
 222 013a 8927      		eor r24,r25
 223 013c 8050      		subi r24,lo8(-(it.1378))
 224 013e 9040      		sbci r25,hi8(-(it.1378))
 225 0140 FC01      		movw r30,r24
 226 0142 8081      		ld r24,Z
 227 0144 822B      		or r24,r18
 228 0146 282F      		mov r18,r24
 229 0148 8D81      		ldd r24,Y+5
 230 014a 9E81      		ldd r25,Y+6
 231 014c 8050      		subi r24,lo8(-(rchr.1373))
 232 014e 9040      		sbci r25,hi8(-(rchr.1373))
 233 0150 FC01      		movw r30,r24
 234 0152 2083      		st Z,r18
  82:crc.c         ****     for (j=0;j<=255;j++) {
 235               		.loc 1 82 0 discriminator 2
 236 0154 8D81      		ldd r24,Y+5
 237 0156 9E81      		ldd r25,Y+6
 238 0158 0196      		adiw r24,1
 239 015a 9E83      		std Y+6,r25
 240 015c 8D83      		std Y+5,r24
 241               	.L9:
  82:crc.c         ****     for (j=0;j<=255;j++) {
 242               		.loc 1 82 0 is_stmt 0 discriminator 1
 243 015e 8D81      		ldd r24,Y+5
 244 0160 9E81      		ldd r25,Y+6
 245 0162 8F3F      		cpi r24,-1
 246 0164 9105      		cpc r25,__zero_reg__
 247 0166 01F0      		breq .+2
 248 0168 00F4      		brsh .+2
 249 016a 00C0      		rjmp .L10
 250               	.L8:
  85:crc.c         ****     }
  86:crc.c         ****   }
  87:crc.c         ****   if (jinit >= 0) cword=((uchar) jinit) | (((uchar) jinit) << 8);
 251               		.loc 1 87 0 is_stmt 1
 252 016c 8F85      		ldd r24,Y+15
 253 016e 9889      		ldd r25,Y+16
 254 0170 9923      		tst r25
 255 0172 04F0      		brlt .L11
 256               		.loc 1 87 0 is_stmt 0 discriminator 1
 257 0174 8F85      		ldd r24,Y+15
 258 0176 282F      		mov r18,r24
 259 0178 30E0      		ldi r19,0
 260 017a 8F85      		ldd r24,Y+15
 261 017c 882F      		mov r24,r24
 262 017e 90E0      		ldi r25,0
 263 0180 982F      		mov r25,r24
 264 0182 8827      		clr r24
 265 0184 822B      		or r24,r18
 266 0186 932B      		or r25,r19
 267 0188 9887      		std Y+8,r25
 268 018a 8F83      		std Y+7,r24
 269 018c 00C0      		rjmp .L12
 270               	.L11:
  88:crc.c         ****   else if (jrev < 0)
 271               		.loc 1 88 0 is_stmt 1
 272 018e 8989      		ldd r24,Y+17
 273 0190 9A89      		ldd r25,Y+18
 274 0192 9923      		tst r25
 275 0194 04F4      		brge .L12
  89:crc.c         ****     cword=rchr[HIBYTE(cword)] | rchr[LOBYTE(cword)] << 8;
 276               		.loc 1 89 0
 277 0196 8F81      		ldd r24,Y+7
 278 0198 9885      		ldd r25,Y+8
 279 019a 892F      		mov r24,r25
 280 019c 9927      		clr r25
 281 019e 882F      		mov r24,r24
 282 01a0 90E0      		ldi r25,0
 283 01a2 8050      		subi r24,lo8(-(rchr.1373))
 284 01a4 9040      		sbci r25,hi8(-(rchr.1373))
 285 01a6 FC01      		movw r30,r24
 286 01a8 8081      		ld r24,Z
 287 01aa 282F      		mov r18,r24
 288 01ac 30E0      		ldi r19,0
 289 01ae 8F81      		ldd r24,Y+7
 290 01b0 882F      		mov r24,r24
 291 01b2 90E0      		ldi r25,0
 292 01b4 8050      		subi r24,lo8(-(rchr.1373))
 293 01b6 9040      		sbci r25,hi8(-(rchr.1373))
 294 01b8 FC01      		movw r30,r24
 295 01ba 8081      		ld r24,Z
 296 01bc 882F      		mov r24,r24
 297 01be 90E0      		ldi r25,0
 298 01c0 982F      		mov r25,r24
 299 01c2 8827      		clr r24
 300 01c4 822B      		or r24,r18
 301 01c6 932B      		or r25,r19
 302 01c8 9887      		std Y+8,r25
 303 01ca 8F83      		std Y+7,r24
 304               	.L12:
  90:crc.c         **** #ifdef DEBUG
  91:crc.c         ****   printf("len = %d\n", len);
  92:crc.c         **** #endif
  93:crc.c         ****   for (j=1;j<=len;j++) {
 305               		.loc 1 93 0
 306 01cc 81E0      		ldi r24,lo8(1)
 307 01ce 90E0      		ldi r25,0
 308 01d0 9E83      		std Y+6,r25
 309 01d2 8D83      		std Y+5,r24
 310 01d4 00C0      		rjmp .L13
 311               	.L16:
  94:crc.c         ****     if (jrev < 0) {
 312               		.loc 1 94 0
 313 01d6 8989      		ldd r24,Y+17
 314 01d8 9A89      		ldd r25,Y+18
 315 01da 9923      		tst r25
 316 01dc 04F4      		brge .L14
  95:crc.c         ****       tmp1 = rchr[lin[j]]^ HIBYTE(cword);
 317               		.loc 1 95 0
 318 01de 8D81      		ldd r24,Y+5
 319 01e0 9E81      		ldd r25,Y+6
 320 01e2 8050      		subi r24,lo8(-(lin))
 321 01e4 9040      		sbci r25,hi8(-(lin))
 322 01e6 FC01      		movw r30,r24
 323 01e8 8081      		ld r24,Z
 324 01ea 882F      		mov r24,r24
 325 01ec 90E0      		ldi r25,0
 326 01ee 8050      		subi r24,lo8(-(rchr.1373))
 327 01f0 9040      		sbci r25,hi8(-(rchr.1373))
 328 01f2 FC01      		movw r30,r24
 329 01f4 2081      		ld r18,Z
 330 01f6 8F81      		ldd r24,Y+7
 331 01f8 9885      		ldd r25,Y+8
 332 01fa 892F      		mov r24,r25
 333 01fc 9927      		clr r25
 334 01fe 8227      		eor r24,r18
 335 0200 882F      		mov r24,r24
 336 0202 90E0      		ldi r25,0
 337 0204 9A83      		std Y+2,r25
 338 0206 8983      		std Y+1,r24
 339 0208 00C0      		rjmp .L15
 340               	.L14:
  96:crc.c         ****     }
  97:crc.c         ****     else {
  98:crc.c         ****       tmp1 = lin[j]^ HIBYTE(cword);
 341               		.loc 1 98 0
 342 020a 8D81      		ldd r24,Y+5
 343 020c 9E81      		ldd r25,Y+6
 344 020e 8050      		subi r24,lo8(-(lin))
 345 0210 9040      		sbci r25,hi8(-(lin))
 346 0212 FC01      		movw r30,r24
 347 0214 2081      		ld r18,Z
 348 0216 8F81      		ldd r24,Y+7
 349 0218 9885      		ldd r25,Y+8
 350 021a 892F      		mov r24,r25
 351 021c 9927      		clr r25
 352 021e 8227      		eor r24,r18
 353 0220 882F      		mov r24,r24
 354 0222 90E0      		ldi r25,0
 355 0224 9A83      		std Y+2,r25
 356 0226 8983      		std Y+1,r24
 357               	.L15:
  99:crc.c         ****     }
 100:crc.c         ****     cword = icrctb[tmp1] ^ LOBYTE(cword) << 8;
 358               		.loc 1 100 0
 359 0228 8981      		ldd r24,Y+1
 360 022a 9A81      		ldd r25,Y+2
 361 022c 880F      		lsl r24
 362 022e 991F      		rol r25
 363 0230 8050      		subi r24,lo8(-(icrctb.1371))
 364 0232 9040      		sbci r25,hi8(-(icrctb.1371))
 365 0234 FC01      		movw r30,r24
 366 0236 2081      		ld r18,Z
 367 0238 3181      		ldd r19,Z+1
 368 023a 8F81      		ldd r24,Y+7
 369 023c 882F      		mov r24,r24
 370 023e 90E0      		ldi r25,0
 371 0240 982F      		mov r25,r24
 372 0242 8827      		clr r24
 373 0244 8227      		eor r24,r18
 374 0246 9327      		eor r25,r19
 375 0248 9887      		std Y+8,r25
 376 024a 8F83      		std Y+7,r24
  93:crc.c         ****   for (j=1;j<=len;j++) {
 377               		.loc 1 93 0
 378 024c 8D81      		ldd r24,Y+5
 379 024e 9E81      		ldd r25,Y+6
 380 0250 0196      		adiw r24,1
 381 0252 9E83      		std Y+6,r25
 382 0254 8D83      		std Y+5,r24
 383               	.L13:
  93:crc.c         ****   for (j=1;j<=len;j++) {
 384               		.loc 1 93 0 is_stmt 0 discriminator 1
 385 0256 8D81      		ldd r24,Y+5
 386 0258 9E81      		ldd r25,Y+6
 387 025a 9C01      		movw r18,r24
 388 025c 40E0      		ldi r20,0
 389 025e 50E0      		ldi r21,0
 390 0260 8B85      		ldd r24,Y+11
 391 0262 9C85      		ldd r25,Y+12
 392 0264 AD85      		ldd r26,Y+13
 393 0266 BE85      		ldd r27,Y+14
 394 0268 8217      		cp r24,r18
 395 026a 9307      		cpc r25,r19
 396 026c A407      		cpc r26,r20
 397 026e B507      		cpc r27,r21
 398 0270 00F0      		brlo .+2
 399 0272 00C0      		rjmp .L16
 101:crc.c         ****   }
 102:crc.c         ****   if (jrev >= 0) {
 400               		.loc 1 102 0 is_stmt 1
 401 0274 8989      		ldd r24,Y+17
 402 0276 9A89      		ldd r25,Y+18
 403 0278 9923      		tst r25
 404 027a 04F0      		brlt .L17
 103:crc.c         ****     tmp2 = cword;
 405               		.loc 1 103 0
 406 027c 8F81      		ldd r24,Y+7
 407 027e 9885      		ldd r25,Y+8
 408 0280 9C83      		std Y+4,r25
 409 0282 8B83      		std Y+3,r24
 410 0284 00C0      		rjmp .L18
 411               	.L17:
 104:crc.c         ****   }
 105:crc.c         ****   else {
 106:crc.c         ****     tmp2 = rchr[HIBYTE(cword)] | rchr[LOBYTE(cword)] << 8;
 412               		.loc 1 106 0
 413 0286 8F81      		ldd r24,Y+7
 414 0288 9885      		ldd r25,Y+8
 415 028a 892F      		mov r24,r25
 416 028c 9927      		clr r25
 417 028e 882F      		mov r24,r24
 418 0290 90E0      		ldi r25,0
 419 0292 8050      		subi r24,lo8(-(rchr.1373))
 420 0294 9040      		sbci r25,hi8(-(rchr.1373))
 421 0296 FC01      		movw r30,r24
 422 0298 8081      		ld r24,Z
 423 029a 282F      		mov r18,r24
 424 029c 30E0      		ldi r19,0
 425 029e 8F81      		ldd r24,Y+7
 426 02a0 882F      		mov r24,r24
 427 02a2 90E0      		ldi r25,0
 428 02a4 8050      		subi r24,lo8(-(rchr.1373))
 429 02a6 9040      		sbci r25,hi8(-(rchr.1373))
 430 02a8 FC01      		movw r30,r24
 431 02aa 8081      		ld r24,Z
 432 02ac 882F      		mov r24,r24
 433 02ae 90E0      		ldi r25,0
 434 02b0 982F      		mov r25,r24
 435 02b2 8827      		clr r24
 436 02b4 822B      		or r24,r18
 437 02b6 932B      		or r25,r19
 438 02b8 9C83      		std Y+4,r25
 439 02ba 8B83      		std Y+3,r24
 440               	.L18:
 107:crc.c         ****   }
 108:crc.c         ****   return (tmp2 );
 441               		.loc 1 108 0
 442 02bc 8B81      		ldd r24,Y+3
 443 02be 9C81      		ldd r25,Y+4
 444               	/* epilogue start */
 109:crc.c         **** }
 445               		.loc 1 109 0
 446 02c0 6296      		adiw r28,18
 447 02c2 0FB6      		in __tmp_reg__,__SREG__
 448 02c4 F894      		cli
 449 02c6 DEBF      		out __SP_H__,r29
 450 02c8 0FBE      		out __SREG__,__tmp_reg__
 451 02ca CDBF      		out __SP_L__,r28
 452 02cc DF91      		pop r29
 453 02ce CF91      		pop r28
 454 02d0 1F91      		pop r17
 455 02d2 0F91      		pop r16
 456 02d4 0895      		ret
 457               	.LFE1:
 459               	.global	main
 461               	main:
 462               	.LFB2:
 110:crc.c         **** 
 111:crc.c         **** 
 112:crc.c         **** int main(void)
 113:crc.c         **** {
 463               		.loc 1 113 0
 464 02d6 0F93      		push r16
 465               	.LCFI10:
 466 02d8 1F93      		push r17
 467               	.LCFI11:
 468 02da CF93      		push r28
 469               	.LCFI12:
 470 02dc DF93      		push r29
 471               	.LCFI13:
 472 02de CDB7      		in r28,__SP_L__
 473 02e0 DEB7      		in r29,__SP_H__
 474               	.LCFI14:
 475 02e2 2897      		sbiw r28,8
 476               	.LCFI15:
 477 02e4 0FB6      		in __tmp_reg__,__SREG__
 478 02e6 F894      		cli
 479 02e8 DEBF      		out __SP_H__,r29
 480 02ea 0FBE      		out __SREG__,__tmp_reg__
 481 02ec CDBF      		out __SP_L__,r28
 482               	/* prologue: function */
 483               	/* frame size = 8 */
 484               	/* stack size = 12 */
 485               	.L__stack_usage = 12
 114:crc.c         **** 
 115:crc.c         ****   unsigned short i1,i2;
 116:crc.c         ****   unsigned long n;
 117:crc.c         **** 
 118:crc.c         ****   n=40;
 486               		.loc 1 118 0
 487 02ee 88E2      		ldi r24,lo8(40)
 488 02f0 90E0      		ldi r25,0
 489 02f2 A0E0      		ldi r26,0
 490 02f4 B0E0      		ldi r27,0
 491 02f6 8983      		std Y+1,r24
 492 02f8 9A83      		std Y+2,r25
 493 02fa AB83      		std Y+3,r26
 494 02fc BC83      		std Y+4,r27
 119:crc.c         ****   lin[n+1]=0;
 495               		.loc 1 119 0
 496 02fe 8981      		ldd r24,Y+1
 497 0300 9A81      		ldd r25,Y+2
 498 0302 AB81      		ldd r26,Y+3
 499 0304 BC81      		ldd r27,Y+4
 500 0306 0196      		adiw r24,1
 501 0308 A11D      		adc r26,__zero_reg__
 502 030a B11D      		adc r27,__zero_reg__
 503 030c 8050      		subi r24,lo8(-(lin))
 504 030e 9040      		sbci r25,hi8(-(lin))
 505 0310 FC01      		movw r30,r24
 506 0312 1082      		st Z,__zero_reg__
 120:crc.c         ****   i1=icrc(0,n,(short)0,1);
 507               		.loc 1 120 0
 508 0314 8981      		ldd r24,Y+1
 509 0316 9A81      		ldd r25,Y+2
 510 0318 AB81      		ldd r26,Y+3
 511 031a BC81      		ldd r27,Y+4
 512 031c 01E0      		ldi r16,lo8(1)
 513 031e 10E0      		ldi r17,0
 514 0320 20E0      		ldi r18,0
 515 0322 30E0      		ldi r19,0
 516 0324 AC01      		movw r20,r24
 517 0326 BD01      		movw r22,r26
 518 0328 80E0      		ldi r24,0
 519 032a 90E0      		ldi r25,0
 520 032c 0E94 0000 		call icrc
 521 0330 9E83      		std Y+6,r25
 522 0332 8D83      		std Y+5,r24
 121:crc.c         ****   lin[n+1]=HIBYTE(i1);
 523               		.loc 1 121 0
 524 0334 8981      		ldd r24,Y+1
 525 0336 9A81      		ldd r25,Y+2
 526 0338 AB81      		ldd r26,Y+3
 527 033a BC81      		ldd r27,Y+4
 528 033c 0196      		adiw r24,1
 529 033e A11D      		adc r26,__zero_reg__
 530 0340 B11D      		adc r27,__zero_reg__
 531 0342 2D81      		ldd r18,Y+5
 532 0344 3E81      		ldd r19,Y+6
 533 0346 232F      		mov r18,r19
 534 0348 3327      		clr r19
 535 034a 8050      		subi r24,lo8(-(lin))
 536 034c 9040      		sbci r25,hi8(-(lin))
 537 034e FC01      		movw r30,r24
 538 0350 2083      		st Z,r18
 122:crc.c         ****   lin[n+2]=LOBYTE(i1);
 539               		.loc 1 122 0
 540 0352 8981      		ldd r24,Y+1
 541 0354 9A81      		ldd r25,Y+2
 542 0356 AB81      		ldd r26,Y+3
 543 0358 BC81      		ldd r27,Y+4
 544 035a 0296      		adiw r24,2
 545 035c A11D      		adc r26,__zero_reg__
 546 035e B11D      		adc r27,__zero_reg__
 547 0360 2D81      		ldd r18,Y+5
 548 0362 8050      		subi r24,lo8(-(lin))
 549 0364 9040      		sbci r25,hi8(-(lin))
 550 0366 FC01      		movw r30,r24
 551 0368 2083      		st Z,r18
 123:crc.c         ****   i2=icrc(i1,n+2,(short)0,1);
 552               		.loc 1 123 0
 553 036a 8981      		ldd r24,Y+1
 554 036c 9A81      		ldd r25,Y+2
 555 036e AB81      		ldd r26,Y+3
 556 0370 BC81      		ldd r27,Y+4
 557 0372 0296      		adiw r24,2
 558 0374 A11D      		adc r26,__zero_reg__
 559 0376 B11D      		adc r27,__zero_reg__
 560 0378 ED81      		ldd r30,Y+5
 561 037a FE81      		ldd r31,Y+6
 562 037c 01E0      		ldi r16,lo8(1)
 563 037e 10E0      		ldi r17,0
 564 0380 20E0      		ldi r18,0
 565 0382 30E0      		ldi r19,0
 566 0384 AC01      		movw r20,r24
 567 0386 BD01      		movw r22,r26
 568 0388 CF01      		movw r24,r30
 569 038a 0E94 0000 		call icrc
 570 038e 9887      		std Y+8,r25
 571 0390 8F83      		std Y+7,r24
 124:crc.c         ****   return 0;
 572               		.loc 1 124 0
 573 0392 80E0      		ldi r24,0
 574 0394 90E0      		ldi r25,0
 575               	/* epilogue start */
 125:crc.c         **** }
 576               		.loc 1 125 0
 577 0396 2896      		adiw r28,8
 578 0398 0FB6      		in __tmp_reg__,__SREG__
 579 039a F894      		cli
 580 039c DEBF      		out __SP_H__,r29
 581 039e 0FBE      		out __SREG__,__tmp_reg__
 582 03a0 CDBF      		out __SP_L__,r28
 583 03a2 DF91      		pop r29
 584 03a4 CF91      		pop r28
 585 03a6 1F91      		pop r17
 586 03a8 0F91      		pop r16
 587 03aa 0895      		ret
 588               	.LFE2:
 590               		.local	init.1372
 591               		.comm	init.1372,2,1
 592               		.local	icrctb.1371
 593               		.comm	icrctb.1371,512,1
 594               		.data
 597               	it.1378:
 598 0100 00        		.byte	0
 599 0101 08        		.byte	8
 600 0102 04        		.byte	4
 601 0103 0C        		.byte	12
 602 0104 02        		.byte	2
 603 0105 0A        		.byte	10
 604 0106 06        		.byte	6
 605 0107 0E        		.byte	14
 606 0108 01        		.byte	1
 607 0109 09        		.byte	9
 608 010a 05        		.byte	5
 609 010b 0D        		.byte	13
 610 010c 03        		.byte	3
 611 010d 0B        		.byte	11
 612 010e 07        		.byte	7
 613 010f 0F        		.byte	15
 614               		.local	rchr.1373
 615               		.comm	rchr.1373,256,1
 742               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 crc.c
     /tmp/ccbXodCD.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccbXodCD.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccbXodCD.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccbXodCD.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccbXodCD.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccbXodCD.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccbXodCD.s:14     .data:0000000000000000 lin
     /tmp/ccbXodCD.s:20     .text:0000000000000000 icrc1
     /tmp/ccbXodCD.s:124    .text:0000000000000094 icrc
                             .bss:0000000000000000 init.1372
     /tmp/ccbXodCD.s:591    .bss:0000000000000002 icrctb.1371
     /tmp/ccbXodCD.s:597    .data:0000000000000100 it.1378
     /tmp/ccbXodCD.s:593    .bss:0000000000000202 rchr.1373
     /tmp/ccbXodCD.s:461    .text:00000000000002d6 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
