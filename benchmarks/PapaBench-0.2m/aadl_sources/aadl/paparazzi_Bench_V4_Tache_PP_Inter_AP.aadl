-- le projet paprazzi s'interesse a la realisation 
-- d'un micro-drone autonome a bas cout.
-- le systeme embarque est constitue de
-- 1.recepteurs (HF(pour radio commande)
-- 2.capteurs infrarouge et GPS
-- 3.camera video
-- 4.modem
-- 5.emetteur
-- 6.deux microcontroleurs (MCU0, MCU1)

--Cas reel de l'application
--les taches sont soit periodiques preemptives
--et les interruptions sont aperiodiques preemptives
--N.B: le choix du Scheduling_Protocol du processeur indique si 
--la preemption est autorisee ou non 
--on donnera plus tard l'ordonnancement avec ou sans preemption

--taches MCU1:
--Reception Radio Command
--Send Servos Commands
--Send Message to MCU0
--Interruptions:
--Receive/Send Data via SPI
--Servos Interruptions (6 interruptions)

--Taches MCU0
--radio command task
--navigation
--climb control
--altitude control
--Receive GPS position
--stabilisation 
--Send message to MCU1
--Receive Message from MCU1
--Send Data to ground station
--Interruptions
--Send/Receive via SPI
--Modem Interruption


---------------------------------------------------------------
-- We model a bus that connects our devices to the processor
bus Device_Bus
end Device_Bus;

bus implementation Device_Bus.MCU0
end Device_Bus.MCU0;

bus implementation Device_Bus.MCU1
end Device_Bus.MCU1;

device Compteur
features
	Data_Elev_Input : in data port Data_Types::Integer_16;
	Data_AilL_Input : in data port Data_Types::Integer_16;
	Data_AilR_Input : in data port Data_Types::Integer_16;
	Data_MotorL_Input : in data port Data_Types::Integer_16;
	Data_MotorR_Input : in data port Data_Types::Integer_16;
	Data_Rudder_Input : in data port Data_Types::Integer_16;
	Data_Elev_Output : out data port Data_Types::Integer_16;
	Data_AilL_Output : out data port Data_Types::Integer_16;
	Data_AilR_Output : out data port Data_Types::Integer_16;
	Data_MotorL_Output : out data port Data_Types::Integer_16;
	Data_MotorR_Output : out data port Data_Types::Integer_16;
	Data_Rudder_Output : out data port Data_Types::Integer_16;
	Dev_Bus : requires bus access Device_Bus.MCU1;
end Compteur;

device Servo
features
	Data_Input : in data port Data_Types::Integer_16;
	Dev_bus : requires bus access Device_Bus.MCU1;
end Servo;

device Recepteur
features
	RC_Input : in event data port;
	RC_Output : out event data port;
	RC_Evt_Output : out event port;
	Dev_Bus : requires bus access Device_Bus.MCU1;
end Recepteur;


--this thread gets the data from the Radio Commande (RC)
--il definit les interruptions provenant de la RC
--il doit y avoir une contrainte temporelle sur l'envoi des messages de la radio commande!!
-- au moins il faut que cette tache soit sporadic
--sporadic veut dire que la tache est declenchee par l'arrivee d'un evenement
--mais le temps entre deux dispatch successifs ne doit pas etre < a la periode
thread Interruption_Radio
features
	RC_Evt_Input : in event data port;
	RC_Data_Output: out data port Data_Types::Tableau.Generic;
end Interruption_Radio;

thread implementation Interruption_Radio.Impl
properties
	Dispatch_Protocol=>aperiodic;
	Thread_Properties::Preemption=>System_Preemption;
	Source_Text => "fly_by_wire/ppm.c";
	Compute_Entrypoint => "SIGNAL";
end Interruption_Radio.Impl;

thread Reception_Decodage
features
	RC_Data_Input : in data port Data_Types::Tableau.Generic;
	Data_Decoded_Output : out data port Data_Types::Tableau.Generic;
	Radio_ok_Output : out data port Data_Types::Boolean;
	Radio_Really_Lost_Output : out data port Data_Types::Boolean;
	Mode_Output : out data port Data_Types::Boolean;
end Reception_Decodage;

thread implementation Reception_Decodage.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;
	Source_Text => "fly_by_wire/main.c";
	Compute_Entrypoint => "test_ppm_task";
	Period =>25ms;--Periode deduite de PPM.h >> PPM_FREQ
end Reception_Decodage.Impl;

thread Check_Autopilot_Values
features
	Mode_Input : in data port Data_Types::Boolean;
	Mega128_Ok_Output : out data port Data_Types::Boolean;
	Param_Vol_Input : in data port Data_Types::Inter_mcu_msg.Generic;
	Servo_Cdes_Output: out data port Data_Types::TabServos.Impl;
end Check_Autopilot_Values;

thread implementation Check_Autopilot_Values.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;	
	Source_Text => "fly_by_wire/main.c";
	Compute_Entrypoint => "check_mega128_values_task";
	Period=> 50ms;--20Hz
end Check_Autopilot_Values.Impl;

thread Check_Failsafe 
features
	Radio_Ok_Input : in data port Data_Types::Boolean;
	Radio_Really_Lost_Input : in data port Data_Types::Boolean;
	Mode_Input : in data port Data_Types::Boolean;
	Mega128_Ok_Input : in data port Data_Types::Boolean;
	Servo_Cdes_Output: out data port Data_Types::TabServos.Impl;
end Check_Failsafe;

thread implementation Check_Failsafe.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;	
	Source_Text => "fly_by_wire/main.c";
	Compute_Entrypoint => "check_failsafe_task";
	Period=> 50ms;--20Hz
end Check_Failsafe.Impl;

--Ce thread gere l'interruption d'envoi des parametres au servos
thread Interruption_Envoi_Servo
features
	Signal_Input: in event data port Data_Types::TabServos.Impl;
	Data_Output : out data port Data_Types::Integer_16;
end Interruption_Envoi_Servo;

thread implementation Interruption_Envoi_Servo.Elevator
calls {
		Elevator_Value: subprogram Data_Types::TabServos.Get_Elevator;};	
connections
	parameter Elevator_Value.Result->Data_Output;
properties
	Dispatch_Protocol=>aperiodic;
	Thread_Properties::Preemption=>System_Preemption;	
	Source_Text => "fly_by_wire/servo.c";
	Compute_Entrypoint => "SIGNAL";
end Interruption_Envoi_Servo.Elevator;

thread implementation Interruption_Envoi_Servo.MotorL
calls {
		MotorL_Value: subprogram Data_Types::TabServos.Get_MotorL;};	
connections
	parameter MotorL_Value.Result->Data_Output;
properties
	Dispatch_Protocol=>aperiodic;
	Thread_Properties::Preemption=>System_Preemption;	
	Source_Text => "fly_by_wire/servo.c";
	Compute_Entrypoint => "SIGNAL";
end Interruption_Envoi_Servo.MotorL;

thread implementation Interruption_Envoi_Servo.MotorR
calls {
		MotorR_Value: subprogram Data_Types::TabServos.Get_MotorR;};	
connections
	parameter MotorR_Value.Result->Data_Output;
properties
	Dispatch_Protocol=>aperiodic;
	Thread_Properties::Preemption=>System_Preemption;	
	Source_Text => "fly_by_wire/servo.c";
	Compute_Entrypoint => "SIGNAL";
end Interruption_Envoi_Servo.MotorR;

thread implementation Interruption_Envoi_Servo.AileronL
calls {
		AileronL_Value: subprogram Data_Types::TabServos.Get_AileronL;};	
connections
	parameter AileronL_Value.Result->Data_Output;
properties
	Dispatch_Protocol=>aperiodic;
	Thread_Properties::Preemption=>System_Preemption;	
	Source_Text => "fly_by_wire/servo.c";
	Compute_Entrypoint => "SIGNAL";
end Interruption_Envoi_Servo.AileronL;

thread implementation Interruption_Envoi_Servo.AileronR
calls {
		AileronR_Value: subprogram Data_Types::TabServos.Get_AileronR;};	
connections
	parameter AileronR_Value.Result->Data_Output;
properties
	Dispatch_Protocol=>aperiodic;
	Thread_Properties::Preemption=>System_Preemption;	
	Source_Text => "fly_by_wire/servo.c";
	Compute_Entrypoint => "SIGNAL";
end Interruption_Envoi_Servo.AileronR;

thread implementation Interruption_Envoi_Servo.Rudder
calls {
		Rudder_Value: subprogram Data_Types::TabServos.Get_Rudder;};	
connections
	parameter Rudder_Value.Result->Data_Output;
properties
	Dispatch_Protocol=>aperiodic;
	Thread_Properties::Preemption=>System_Preemption;	
	Source_Text => "fly_by_wire/servo.c";
	Compute_Entrypoint => "SIGNAL";
end Interruption_Envoi_Servo.Rudder;

--this thread gets the flight parameters and transmit them to the Counter 
--fonction servo_transmit
thread Pilotage_Servo_Cdes 
features
	Data_Cp_Output : out event data port Data_Types::TabServos.Impl;--Cp :Compteur
	Param_Vol_Input : in data port Data_Types::TabServos.Impl;
end Pilotage_Servo_Cdes;

thread implementation Pilotage_Servo_Cdes.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;
	Source_Text => "fly_by_wire/servo.c";
	Compute_Entrypoint =>  "servo_transmit";
	Period => 50ms;--20Hz;
end Pilotage_Servo_Cdes.Impl;

--envoi reception signaux via SPI
thread Interruption_SPI_MCU1
features
	Evt_Rec_SPI_Input : in event data port Data_Types::Inter_mcu_msg.Generic;
	Data_Rec_MCU1_Output: out  data port Data_Types::Inter_mcu_msg.Generic;--fourni a MCU1
	Data_Send_SPI_Output: out  event data port Data_Types::Inter_mcu_msg.Generic;
	Evt_Send_SPI_Input: in event data port Data_Types::Inter_mcu_msg.Generic;
	AP_Evt_Output : out event port;
end Interruption_SPI_MCU1;

thread implementation Interruption_SPI_MCU1.Impl
properties
	Dispatch_Protocol=>aperiodic;
	Thread_Properties::Preemption=>System_Preemption;	
	Source_Text => "fly_by_wire/spi.c";
	Compute_Entrypoint => "SIGNAL";
end Interruption_SPI_MCU1.Impl;

--this thread sends data to and receives data from MCU0
thread Send_Data_MCU0
features
	MCU1_Data_Input : in data port Data_Types::Tableau.Generic;
	MCU1_Send_Output : out event data port Data_Types::Inter_mcu_msg.Generic;
	Radio_Ok_Input : in data port Data_Types::Boolean;
	Radio_Really_Lost_Input : in data port Data_Types::Boolean;
end Send_Data_MCU0;

thread implementation Send_Data_MCU0.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;
	Source_Text => "fly_by_wire/main.c";
	Compute_Entrypoint => "send_data_to_autopilot_task";	
	Period => 25ms; --meme periode que reception_Decodage
end Send_Data_MCU0.Impl;

process RecepteurCde_PilotageServo
features
	Radio_Cdes_Input : in event data port;
	RC_Evt_Input : in event port;
	AP_Cdes_Input : in event data port Data_Types::Inter_mcu_msg.Generic;--Autopilot Input
	Cdes_Vol_Output : out event data port Data_Types::Inter_mcu_msg.Generic;--data transmission to MCU0
	Cde_Elevator_Output : out data port Data_Types::Integer_16;
	Cde_MotorL_Output : out data port Data_Types::Integer_16;
	Cde_MotorR_Output : out data port Data_Types::Integer_16;
	Cde_AileronL_Output : out data port Data_Types::Integer_16;
	Cde_AileronR_Output : out data port Data_Types::Integer_16;
	Cde_Rudder_Output : out data port Data_Types::Integer_16;
end RecepteurCde_PilotageServo;

process implementation RecepteurCde_PilotageServo.Impl
subcomponents
	Rec_Dec_Th : thread Reception_Decodage.Impl;
	Send_Th	: thread Send_Data_MCU0.Impl;
	Pilot_Serv_Th : thread Pilotage_Servo_Cdes.Impl;
	Check_Ap_Th : thread Check_Autopilot_Values.Impl;
	Check_Fail_Th: thread Check_Failsafe.Impl;
	Interrupt_Elevator_Th:thread Interruption_Envoi_Servo.Elevator;
	Interrupt_MotorL_Th:thread Interruption_Envoi_Servo.MotorL;
	Interrupt_MotorR_Th:thread Interruption_Envoi_Servo.MotorR;
	Interrupt_AileronL_Th:thread Interruption_Envoi_Servo.AileronL;
	Interrupt_AileronR_Th:thread Interruption_Envoi_Servo.AileronR;
	Interrupt_Rudder_Th:thread Interruption_Envoi_Servo.Rudder;
	Interrupt_SPI_Th: thread Interruption_SPI_MCU1;
	Interrupt_RC_Th: thread Interruption_Radio.Impl;
	
	--System Settings
	System_Mode : data Data_Types::Boolean;
	Radio_Ok : data Data_Types::Boolean;
	Radio_Really_Lost : data Data_Types::Boolean;
	Mega128_Ok : data Data_Types::Boolean;
connections
	event data port Radio_Cdes_Input-> Interrupt_RC_Th.RC_Evt_Input in modes (manual);
	data port Interrupt_RC_Th.RC_Data_Output->Rec_Dec_Th.RC_Data_Input in modes(manual);
	data port Rec_Dec_Th.Data_Decoded_Output->Send_Th.MCU1_Data_Input in modes(manual);
	event data port Send_Th.MCU1_Send_Output->Interrupt_SPI_Th.Evt_Send_SPI_Input in modes(manual);
	event data port Interrupt_SPI_Th.Data_Send_SPI_Output->Cdes_Vol_Output in modes(manual);
	
	data port Rec_Dec_Th.Radio_Ok_Output->Send_Th.Radio_Ok_Input in modes (manual);
	data port Rec_Dec_Th.Radio_Really_Lost_Output->Send_Th.Radio_Really_Lost_Input in modes (manual);
	data port Rec_Dec_Th.Mode_Output->Check_Ap_Th.Mode_Input in modes (manual);
	data port Rec_Dec_Th.Radio_Ok_Output->Check_Fail_Th.Radio_Ok_Input in modes (manual);
	data port Rec_Dec_Th.Radio_Really_Lost_Output->Check_Fail_Th.Radio_Really_Lost_Input in modes (manual);
	data port Rec_Dec_Th.Mode_Output->Check_Fail_Th.Mode_Input in modes (manual);
 	data port Check_Ap_Th.Mega128_Ok_Output->Check_Fail_Th.Mega128_Ok_Input in modes (auto, manual);
	
	event data port AP_Cdes_Input->Interrupt_SPI_Th.Evt_Rec_SPI_Input in modes (auto,manual);
	data port Interrupt_SPI_Th.Data_Rec_MCU1_Output->Check_Ap_Th.Param_Vol_Input in modes (auto, manual);
	data port Check_Ap_Th.Servo_Cdes_Output->Pilot_Serv_Th.Param_Vol_Input in modes (auto,manual);
	
	data port Check_Fail_Th.Servo_Cdes_Output->Pilot_Serv_Th.Param_Vol_Input in modes (failsafe);
	
	event data port Pilot_Serv_Th.Data_Cp_Output->Interrupt_Elevator_Th.Signal_Input in modes (auto,manual);
	event data port Pilot_Serv_Th.Data_Cp_Output->Interrupt_MotorL_Th.Signal_Input in modes (auto,manual);
	event data port Pilot_Serv_Th.Data_Cp_Output->Interrupt_MotorR_Th.Signal_Input in modes (auto,manual);
	event data port Pilot_Serv_Th.Data_Cp_Output->Interrupt_AileronL_Th.Signal_Input in modes (auto,manual);
	event data port Pilot_Serv_Th.Data_Cp_Output->Interrupt_AileronR_Th.Signal_Input in modes (auto,manual);
	event data port Pilot_Serv_Th.Data_Cp_Output->Interrupt_Rudder_Th.Signal_Input in modes (auto,manual);
	
	data port Interrupt_Elevator_Th.Data_Output->Cde_Elevator_Output in modes(manual,auto);
	data port Interrupt_MotorL_Th.Data_Output->Cde_MotorL_Output in modes(manual,auto);
	data port Interrupt_MotorR_Th.Data_Output->Cde_MotorR_Output in modes(manual,auto);
	data port Interrupt_AileronL_Th.Data_Output->Cde_AileronL_Output in modes(manual,auto);
	data port Interrupt_AileronR_Th.Data_Output->Cde_AileronR_Output in modes(manual,auto);
	data port Interrupt_Rudder_Th.Data_Output->Cde_Rudder_Output in modes(manual,auto);
modes
	manual : initial mode;
	auto : mode;
	failsafe: mode;
	-- Specify the transitions between modes, use the following syntax:
	-- <INITIAL_MODE> -[ <EVENT> ]-> <FINAL_MODE>
	manual-[RC_Evt_Input]->auto;
	auto-[Interrupt_SPI_Th.AP_Evt_Output]->manual;
	manual-[RC_Evt_Input,Interrupt_SPI_Th.AP_Evt_Output]->Failsafe;
properties
	Source_Text => "fly_by_wire/main.c";
end RecepteurCde_PilotageServo.Impl;

processor Proc_MCU1
features
	Mem_Bus : requires bus access Mem_Bus_MCU1;
	Dev_Bus : requires bus access Device_Bus.MCU1;
end Proc_MCU1;

-- AADL processor = microprocessor + scheduler
processor implementation Proc_MCU1.Impl
properties
	--le choix du protocol doit prendre en compte les restrictions faites sur l'application
	Scheduling_Protocol => RMS;
	--RMS (Rate Monotonic Scheduling) est un FPS(Fixed Priority Scheduling) 
	--chaque tache a une priorite fixe, cette priorite est determinee a partir de 
	--sa periode, plus sa periode est petite plus sa priorite est grande
	--rate= inverse de la periode, ainsi quand le rate augmente la priorite augmente
end Proc_MCU1.Impl;

-- We model the RAM to bind our processes and threads
memory Ram_MCU1
features
	Mem_Bus : requires bus access Mem_Bus_MCU1;
end Ram_MCU1;

-- bus that links processors and memories
bus Mem_Bus_MCU1
end Mem_Bus_MCU1;

-- MCU1 est charge de la Reception des ordres de la radio-commande,
-- la communication avec MCU0 et le pilotage des servos commandes

system MCU1
features
	RC_EvtData_Input : in event data port;
	AP_EvtData_Input : in event data port Data_Types::Inter_mcu_msg.Generic;--AP: autopilot 
	D_MCU1_Output : out event data port Data_Types::Inter_mcu_msg.Generic;
	SPI_Con : requires bus access  SPI;
end MCU1;

system implementation MCU1.Impl
subcomponents
	--declare system subcomponents
	MCU1_P : processor Proc_MCU1.Impl;
	Ram : memory Ram_MCU1;
	Mem_Bus : bus Mem_Bus_MCU1;
	Dev_Bus : bus Device_Bus.MCU1;
	Recpt_dv : device Recepteur;
	Cpt_dv : device Compteur;
	Ser_Rudder_dv : device Servo;
	Ser_Elevator_dv : device Servo;
	Ser_AileronL_dv : device Servo;--Aileron Left
	Ser_AileronR_dv : device Servo;--Aileron Right
	Ser_MotorL_dv : device Servo;
	Ser_MotorR_dv : device Servo;
	Proc_RcptCde_PilotServ : process RecepteurCde_PilotageServo.Impl;
connections
	--bus connections 
	bus access Mem_Bus -> MCU1_P.Mem_Bus;
	bus access Dev_Bus -> MCU1_P.Dev_Bus;
	bus access Mem_Bus -> Ram.Mem_Bus;
	bus access Dev_Bus -> Recpt_dv.Dev_Bus;
	bus access Dev_Bus -> Cpt_dv.Dev_Bus;
	bus access Dev_Bus -> Ser_Rudder_dv.Dev_Bus;
	bus access Dev_Bus -> Ser_Elevator_dv.Dev_Bus;
	bus access Dev_Bus -> Ser_AileronL_dv.Dev_Bus;
	bus access Dev_Bus -> Ser_AileronR_dv.Dev_Bus;
	bus access Dev_Bus -> Ser_MotorL_dv.Dev_Bus;
	bus access Dev_Bus -> Ser_MotorR_dv.Dev_Bus;
	--port connections
	event data port RC_EvtData_Input->Recpt_dv.RC_Input;
	event data port Recpt_dv.RC_Output->Proc_RcptCde_PilotServ.Radio_Cdes_Input;
	event data port Proc_RcptCde_PilotServ.Cdes_Vol_Output->D_MCU1_Output;
	event data port AP_EvtData_Input->Proc_RcptCde_PilotServ.AP_Cdes_Input; 
	event port Recpt_dv.RC_Evt_Output-> Proc_RcptCde_PilotServ.RC_Evt_Input;
	
	data port Proc_RcptCde_PilotServ.Cde_Elevator_Output->Cpt_dv.Data_Elev_Input;
	data port Proc_RcptCde_PilotServ.Cde_AileronL_Output->Cpt_dv.Data_AilL_Input;
	data port Proc_RcptCde_PilotServ.Cde_AileronR_Output->Cpt_dv.Data_AilR_Input;
	data port Proc_RcptCde_PilotServ.Cde_MotorL_Output->Cpt_dv.Data_MotorL_Input;
	data port Proc_RcptCde_PilotServ.Cde_MotorR_Output->Cpt_dv.Data_MotorR_Input;
	data port Proc_RcptCde_PilotServ.Cde_Rudder_Output->Cpt_dv.Data_Rudder_Input;
	
	data port Cpt_dv.Data_Rudder_Output->Ser_Rudder_dv.Data_Input;
	data port Cpt_dv.Data_Elev_Output->Ser_Elevator_dv.Data_Input;
	data port Cpt_dv.Data_AilL_Output->Ser_AileronL_dv.Data_Input;
	data port Cpt_dv.Data_AilR_Output->Ser_AileronR_dv.Data_Input;
	data port Cpt_dv.Data_MotorL_Output->Ser_MotorL_dv.Data_Input;
	data port Cpt_dv.Data_MotorR_Output->Ser_MotorR_dv.Data_Input;
properties 
	--to bind the Proc_RcptCde_PilotServ to the memory Ram and the processor MCU1_P
	--using predeclared properties
	Actual_Processor_Binding =>reference MCU1_P applies to Proc_RcptCde_PilotServ;
	Actual_Memory_Binding =>reference Ram applies to Proc_RcptCde_PilotServ;
end MCU1.Impl;
-----------------------------------------------------------------
--determine la pression 
device Pression
features 
	P_Output : out data port Data_Types::Float;
	Dev_Bus : requires bus access Device_Bus.MCU0; 
end Pression;

--determine la tension
device Tension -- Alimentation
features
	T_Output : out data port Data_Types::Integer;
	Dev_Bus : requires bus access Device_Bus.MCU0;
end Tension;

device Compas 
features
	Compas_Output : out data port Data_Types::Float;
	Dev_Bus : requires bus access Device_Bus.MCU0;
end compas;

--determine la vitesse de l'air
device Vitesse_Air
features
	V_Air_Output : out data port Data_Types::Integer;
	Dev_Bus : requires bus access Device_Bus.MCU0;
end Vitesse_Air;

--filme le trajet de la mission
device Camera_Video
features
	Video_Output : out data port; -- new data type?
	Dev_Bus : requires bus access Device_bus.MCU0;
end Camera_Video;

-- transmet les donnees a la station sol
device Emetteur
features
	Video_Input : in data port;--data type?
	Trans_Data_Input : in event data port Data_Types::Inter_mcu_msg.Generic; 
	Trans_Data_Output : out data port;
	Video_Output : out data port;
	Modem_Bus : requires bus access Modem;
	Dev_Bus : requires bus access Device_Bus.MCU0;
end Emetteur;

-- determine la position du drone 
device GPS
features
	Error_Output : out event port;
	GPS_Output : out event data port Data_Types::Stream_Element.Generic;
	Dev_Bus : requires bus access Device_Bus.MCU0;
end GPS;

device InfraRed
features
	Error_Output : out event port;
	IR_Output : out data port Data_Types::Stream_Element.Generic;
	Dev_Bus : requires bus access Device_Bus.MCU0;
end InfraRed;

-- relie le systeme MCU0 a la station sol
--ce qui permet la transmission de donnes
bus Modem
end Modem;

-- Ce thread recoit les sigaux GPS et les transforme 
-- en donnees utilisables
thread Interruption_GPS
features
	GPS_Input : in event data port Data_Types::Stream_Element.Generic;
	GPS_Data_Output: out data port Data_Types::Position.GPS;
end Interruption_GPS;

thread implementation Interruption_GPS.Impl
properties	
	Dispatch_Protocol=>aperiodic;
	Thread_Properties::Preemption=>System_Preemption;
	Source_Text => "autopilot/gps_ubx.c";
	Compute_Entrypoint => "parse_ubx";	
end Interruption_GPS.Impl;

thread Data_Acquisition_GPS
features
	GPS_Data_Input : in data port Data_Types::Position.GPS;
	GPS_Output : out data port Data_Types::Position.GPS;
end Data_Acquisition_GPS;

thread implementation Data_Acquisition_GPS.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;
	Source_Text => "autopilot/main.c";
	Compute_Entrypoint => "receive_gps_data_task";
	period => 250ms; --4hz 
end Data_Acquisition_GPS.Impl;


--controle la navigation de l'avion
thread Navigation
features
	GPS_Data_Input : in data port Data_Types::Position.GPS;
	Angle_Roulis_Output : out data port Data_Types::Float;
	Angle_Tangage_Output : out data port Data_Types::Float;
	Taux_Montee_Output: out data port Data_Types::Float;
	Altitude_Desiree_Output: out data port Data_Types::Float;
end Navigation;
--Ce thread est declenche a la frequence des informations delivrees 
--par le GPS 4Hz, sa periode est de 250 ms
thread implementation Navigation.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;	
	Source_Text => "autopilot/main.c";
	Compute_Entrypoint => "navigation_task";	
	Period=>250ms;
end Navigation.Impl;

--le thread Navigation est toujours suivi, dans cet ordre,
-- par les threads Altitude_Control et Climb_Controle d'ou leur Periode

--Controle l'altitude
thread Altitude_Control
features
	Altitude_Desiree_Input : in data port Data_Types::Float;--fourni par navigation
	Montee_Desiree_Output : out data port Data_Types::Float;
end Altitude_Control;

thread implementation Altitude_Control.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;	
	Source_Text => "autopilot/main.c";
	Compute_Entrypoint =>"altitude_control_task";
	Period =>250ms;
end Altitude_Control.Impl;

--controle la montee
thread Climb_Control
features
	Montee_Desiree_Input: in data port Data_Types::Float;--fourni par Altitude_Ctrl
	Gaz_Desire_Input : in data port Data_Types::Float;--Fourni par Navigation
	Angle_Tangage_Input : in data port Data_Types::Float;--Fourni par Navigation
	Gaz_Desire_Output: out data port Data_Types::Float;
	Angle_Tangage_Output : out data port Data_Types::Float;
end Climb_Control;

thread implementation Climb_Control.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;
	Source_Text => "autopilot/main.c";
	Compute_Entrypoint => "climb_control_task";
	Period =>250ms;
end Climb_Control.Impl;

-- Controle la stabilisation et transmet les donnees a MCU1
thread Stabilisation -- + Data transmission to MCU1
features
	Gaz_Desire_Input : in data port Data_Types::Float;--fourni par Climb_Ctrl en mode auto et par Ctrl_By_RC en mode manuel
	Angle_Roulis_Input : in data port Data_Types::Float;--(fourni par la nav en mode auto et par Ctrl_By_RC en mode manuel)
	Angle_Tangage_Input : in data port Data_Types::Float;--(fourni par Climb_Ctrl en mode auto et par Ctrl_By_RC en mode manuel)
	IR_Input : in data port Data_Types::Stream_Element.Generic;
	-- Param_Vol : Gaz_Output ,Prof_Output,AileronL_Output,AileronR_Output
	Param_Vol_Output : out data port Data_Types::Tableau.Generic;
end Stabilisation;

thread implementation Stabilisation.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;
	Source_Text => "autopilot/main.c";
	Compute_Entrypoint => "stabilisation_task";
	Period => 50 ms;--20 hertz; 
end Stabilisation.Impl;

thread Interruption_SPI_MCU0
features
	Evt_Rec_SPI_Input : in event data port Data_Types::Inter_mcu_msg.Generic;
	Data_Rec_MCU0_Output: out  data port Data_Types::Inter_mcu_msg.Generic;--fourni a MCU0
	Data_Send_SPI_Output: out  event data port Data_Types::Inter_mcu_msg.Generic;
	Evt_Send_SPI_Input: in event data port Data_Types::Inter_mcu_msg.Generic;
end Interruption_SPI_MCU0;

thread implementation Interruption_SPI_MCU0.Impl
properties
	Dispatch_Protocol=>aperiodic;
	Thread_Properties::Preemption=>System_Preemption;
	Source_Text => ("autopilot/spi.c", "autopilot/linf_fbw.c");
	Thread_Properties::Entrypoints => ("SIGNAL", "SIGNAL");
end Interruption_SPI_MCU0.Impl;

thread Send_Data_MCU1
features
	MCU0_Data_Input : in data port Data_Types::Tableau.Generic;
	MCU0_Send_Output : out event data port Data_Types::Inter_mcu_msg.Generic;
end Send_Data_MCU1;

--ce thread se declenche toujours apres la Stabilisation d'ou sa periode
thread implementation Send_Data_MCU1.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;	
	Source_Text => "autopilot/link_fbw.c";
	Compute_Entrypoint => "link_fbw_send";
	Period => 50ms;--20Hz
end Send_Data_MCU1.Impl;

thread Control_By_Radio_Cde
features
	RC_Data_Input : in data port Data_Types::Inter_mcu_msg.Generic;
	Angle_Roulis_Output : out data port Data_Types::Float; 
	Angle_Tangage_Output : out data port Data_Types::Float;
	Gaz_Output : out data port Data_Types::Float;
	RC_Evt_Output: out event port; 
end Control_By_Radio_Cde;

thread implementation Control_By_Radio_Cde.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption=>Time_Sharing_Preemption;	
	Source_Text => "autopilot/main.c";
	Compute_Entrypoint => "radio_control_task";
	Period=>25ms;
end Control_By_Radio_Cde.Impl;

thread Send_Data_Ground_Station
features
	Data_Output : out data port Data_Types::Inter_mcu_msg.Generic;
end Send_Data_Ground_Station;

thread implementation Send_Data_Ground_Station.Impl
properties
	Dispatch_Protocol=>periodic;
	Thread_Properties::Preemption => Time_Sharing_Preemption;
	Source_Text => "autopilot/main.c";
	Compute_Entrypoint => "reporting_task";
	Period=>100ms;--10Hz
end Send_Data_Ground_Station.Impl;

thread Interruption_Modem
features
	Data_Input : in data port Data_Types::Inter_mcu_msg.Generic;
	Data_Output : out event data port Data_Types::Inter_mcu_msg.Generic;
end Interruption_Modem;

thread implementation Interruption_Modem.Impl
properties
	Dispatch_Protocol=> aperiodic;
	Thread_Properties::Preemption=>System_Preemption;
	Source_Text => "autopilot/modem.c";
	Compute_Entrypoint => "SIGNAL";	
end Interruption_Modem.Impl;

process Nav_Stab_Control_Proc
features
	MCU1_Data_Input : in event data port Data_Types::Inter_mcu_msg.Generic;--Param Radio_Cde (mode manuel)
	GPS_Input : in event data port Data_Types::Stream_Element.Generic;
	GPS_Evt_Input : in event port;
	IR_Input : in data port Data_Types::Stream_Element.Generic;
	P_Input : in data port Data_Types::Float;
	T_Input : in data port Data_Types :: Integer;
	Compas_Input : in data port Data_Types::Float;
	V_Air_Input : in data port Data_Types:: Integer;
	-- donnees transmies a MCU1
	Trans_MCU0_Output: out event data port Data_Types::Inter_mcu_msg.Generic;
	-- donnees transmies a la station sol
	Trans_Sol_Output : out event data port Data_Types::Inter_mcu_msg.Generic;
end Nav_Stab_Control_Proc;

process implementation Nav_Stab_Control_Proc.Impl
subcomponents
	Data_Acq_Filt_Th : thread Data_Acquisition_GPS.Impl;
	Alt_Ctrl_Th : thread Altitude_Control.Impl;
	Nav_Th : thread Navigation.Impl;
	Climb_Ctrl_Th : thread Climb_Control.Impl;
	Stab_Th : thread Stabilisation.Impl;
	Send_MCU1_Th : thread Send_Data_MCU1.Impl;
	Send_Grd_Station_Th : thread Send_Data_Ground_Station.Impl;
	Interrupt_SPI_Th:thread Interruption_SPI_MCU0.Impl;
	Interrupt_Modem_Th: thread Interruption_Modem.Impl;
	Interrupt_GPS_Th: thread Interruption_GPS.Impl;
	Ctrl_By_RC_Th: thread Control_By_Radio_Cde.Impl;
	
	--save the autopilot settings 
	AP_Data : data Data_Types::Inter_mcu_msg.Generic;
connections 
	
	event data port MCU1_Data_Input->Interrupt_SPI_Th.Evt_Rec_SPI_Input in modes(manual);
	data port Interrupt_SPI_Th.Data_Rec_MCU0_Output->Ctrl_By_RC_Th.RC_Data_Input in modes(manual);
	
	data port Ctrl_By_RC_Th.Angle_Roulis_Output->Stab_Th.Angle_Roulis_Input in modes(manual);
	data port Ctrl_By_RC_Th.Angle_Tangage_Output->Stab_Th.Angle_Tangage_Input in modes(manual);
	data port Ctrl_By_RC_Th.Gaz_Output->Stab_Th.Gaz_Desire_Input in modes(manual);
	
 	event data port GPS_Input->Interrupt_GPS_Th.GPS_Input;
 	data port Interrupt_GPS_Th.GPS_Data_Output->Data_Acq_Filt_Th.GPS_Data_Input;
	data port Data_Acq_Filt_Th.GPS_Output->Nav_Th.GPS_Data_Input in modes (auto, home);
	
	data port Nav_Th.Angle_Roulis_Output->Stab_Th.Angle_Roulis_Input in modes(auto, home);
	data port Nav_Th.Angle_Tangage_Output->Climb_Ctrl_Th.Angle_Tangage_Input in modes (auto,home);
	data port Nav_Th.Altitude_Desiree_Output->Alt_Ctrl_Th.Altitude_Desiree_Input in modes (auto, home);
	
	data port Alt_Ctrl_Th.Montee_Desiree_Output->Climb_Ctrl_Th.Montee_Desiree_Input in modes (auto, home);
	
	data port Climb_Ctrl_Th.Gaz_Desire_Output->Stab_Th.Gaz_Desire_Input in modes (auto,home);
	data port Climb_Ctrl_Th.Angle_Tangage_Output->Stab_Th.Angle_Tangage_Input in modes(auto,home);
	
	data port IR_Input->Stab_Th.IR_Input;
	data port Stab_Th.Param_Vol_Output->Send_MCU1_Th.MCU0_Data_Input;
	
	event data port Send_MCU1_Th.MCU0_Send_Output->Interrupt_SPI_Th.Evt_Send_SPI_Input in modes(auto,home,manual);
	event data port Interrupt_SPI_Th.Data_Send_SPI_Output->Trans_MCU0_Output in modes(auto,home,manual);
	data port Send_Grd_Station_Th.Data_Output->Interrupt_Modem_Th.Data_Input in modes (auto,manual,home);
	event data port Interrupt_Modem_Th.Data_Output->Trans_Sol_Output in modes (auto,manual,home);
	
modes
	manual : initial mode;
	auto : mode;
	home : mode;
	--Transition entre les modes
	manual-[Ctrl_By_RC_Th.RC_Evt_Output]->auto;
	auto-[GPS_Evt_Input]->manual;
	manual-[Ctrl_By_RC_Th.RC_Evt_Output,GPS_Evt_Input]->home;
properties
	Source_Text => "autopilot/mainloop.c";	
end Nav_Stab_Control_Proc.Impl;

processor Proc_MCU0
features
	Mem_Bus : requires bus access Mem_Bus_MCU0;
	Dev_Bus : requires bus access Device_Bus.MCU0;
end Proc_MCU0;

processor implementation Proc_MCU0.Impl
properties
	Scheduling_Protocol => RMS;
	--RMS (Rate Monotonic Scheduling) est un FPS (Fixed Priority Scheduling) 
	--chaque tache a une priorite fixe
end Proc_MCU0.Impl;

memory Ram_MCU0
features 
	Mem_Bus : requires bus access Mem_Bus_MCU0;
end Ram_MCU0;

bus Mem_Bus_MCU0
end Mem_Bus_MCU0;

-- MCU0 est charge de la Stabilisation, 
-- la navigation, la communication avec MCU1
-- et la transmission des parametres de vol

system MCU0
features	
	D_MCU1_Input : in event data port Data_Types::Inter_mcu_msg.Generic;
	D_MCU0_Output : out event data port Data_Types::Inter_mcu_msg.Generic;
	SPI_Con : requires bus access SPI;
end MCU0;

system implementation MCU0.Impl
subcomponents
	Proc_0 : processor Proc_MCU0.Impl;
	Ram    : memory Ram_MCU0;
	Mem_Bus: bus Mem_Bus_MCU0;
	P_dv : device Pression;
	T_dv : device Tension;
	Compas_dv : device Compas;
	V_Air_dv : device Vitesse_Air;
	Cam_dv : device Camera_Video;
	Emet_dv : device Emetteur;
	GPS_dv : device GPS;
	IR_dv : device InfraRed;
	Dev_Bus : bus Device_Bus.MCU0;
	Modem_Bus : bus Modem;
	N_S_C_proc : process Nav_Stab_Control_Proc.Impl;
connections
	-- bus connections
	bus access Mem_Bus->Proc_0.Mem_Bus;
	bus access Mem_Bus->Ram.Mem_Bus;
	
	bus access Dev_Bus->Proc_0.Dev_Bus;
	bus access Dev_Bus->P_dv.Dev_Bus;
	bus access Dev_Bus->T_dv.Dev_Bus;
	bus access Dev_Bus->Compas_dv.Dev_Bus;
	bus access Dev_Bus->V_Air_dv.Dev_Bus;
	bus access Dev_Bus->Cam_dv.Dev_Bus;
	bus access Dev_Bus->Emet_dv.Dev_Bus;
	bus access Modem_Bus->Emet_dv.Modem_Bus;
	bus access Dev_Bus->GPS_dv.Dev_Bus;
	bus access Dev_Bus->IR_dv.Dev_Bus;
		
	--ports connections
	data port P_dv.P_Output->N_S_C_proc.P_Input;
	data port T_dv.T_Output->N_S_C_proc.T_Input;
	data port Compas_dv.Compas_Output->N_S_C_proc.Compas_Input;
	data port V_Air_dv.V_Air_Output->N_S_C_proc.V_Air_Input;
	data port IR_dv.IR_Output->N_S_C_proc.IR_Input;
	event data port GPS_dv.GPS_Output->N_S_C_proc.GPS_Input;
	event port GPS_dv.Error_Output->N_S_C_proc.GPS_Evt_Input;

	event data port N_S_C_proc.Trans_Sol_Output->Emet_dv.Trans_Data_Input;
	data port Cam_dv.Video_Output->Emet_dv.Video_Input;
	
	event data port D_MCU1_Input->N_S_C_proc.MCU1_Data_Input;
	event data port N_S_C_proc.Trans_MCU0_Output->D_MCU0_Output;
	
properties
	-- pour relier le processus a la memeoire et au processeur
	Actual_Processor_Binding => reference Proc_0 applies to N_S_C_Proc;
	Actual_Memory_Binding => reference Ram applies to N_S_C_Proc;
end MCU0.Impl;
----------------------------------------------------------------
-- we model a bus to link the systems
bus SPI
end SPI;

--the embedded system
system Systeme_Paparazzi
features
	RC_EvtData_Input : in event data port;
end Systeme_Paparazzi;

system implementation Systeme_Paparazzi.Impl
subcomponents
	MCU0_sys : system MCU0.Impl;
	MCU1_sys : system MCU1.Impl;
	SPI : bus SPI;
connections
	bus access SPI->MCU0_Sys.SPI_Con;
	bus access SPI->MCU1_Sys.SPI_Con;
	
	event data port RC_EvtData_Input->MCU1_sys.RC_EvtData_Input;
	
	event data port MCU0_sys.D_MCU0_Output->MCU1_sys.AP_EvtData_Input;
	event data port MCU1_sys.D_MCU1_Output->MCU0_sys.D_MCU1_Input;
end Systeme_Paparazzi.Impl;