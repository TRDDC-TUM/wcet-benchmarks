#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;ad7714.c;ad7714_init;108;1;108;1;0;0;0;;;""
1;node;;ad7714.c;ad7714_init;102;3;0;0;0;0;0;;0;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((58) + 32)))))) &= ~(1 << (4)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((58) + 32)))))) |= (1 << (5)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (6));"
2;entry;;ad7714.c;ad7714_init;100;27;100;27;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;ad7714.c;ad7714_on_it;98;1;98;1;0;0;0;;;""
1;node;;ad7714.c;ad7714_on_it;97;3;97;18;0;0;0;;0;" ad7714_status++;"
2;node;;ad7714.c;ad7714_on_it;96;5;96;44;0;0;1;ad7714_start_transmitting;1;" ad7714_start_transmitting(&ad7714_read);"
3;node;;ad7714.c;ad7714_on_it;94;5;94;54;0;0;1;ad7714_start_transmitting;1;" ad7714_start_transmitting(&ad7714_select_channel);"
4;node;;ad7714.c;ad7714_on_it;93;12;93;30;0;0;0;;3,2;" ad7714_status == 1;"
5;node;;ad7714.c;ad7714_on_it;92;5;92;45;0;0;1;ad7714_start_transmitting;1;" ad7714_start_transmitting(&ad7714_setup);"
6;node;;ad7714.c;ad7714_on_it;91;7;91;25;0;0;0;;5,4;" ad7714_status == 0;"
7;entry;;ad7714.c;ad7714_on_it;90;28;90;28;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;ad7714.c;ad7714_on_spi_it;87;1;87;1;0;0;0;;;""
1;node;;ad7714.c;ad7714_on_spi_it;84;5;0;0;0;0;0;;0;" spi_cur_slave = 0; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((3) + 32)))))) |= (1 << (7)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((13) + 32)))))) &= ~(1 << (7)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((13) + 32)))))) &= ~(1 << (6));"
2;node;;ad7714.c;ad7714_on_spi_it;81;5;0;0;0;0;0;;0;" (*(volatile uint8_t *)((15) + 32)) = msg->data[idx];"
3;node;;ad7714.c;ad7714_on_spi_it;79;3;80;21;0;0;0;;2,1;" idx++; idx < msg->len;"
4;node;;ad7714.c;ad7714_on_spi_it;75;7;76;32;0;0;0;;3;" ad7714_sample += spi_read; ad7714_sample_read = (!0);"
5;node;;ad7714.c;ad7714_on_spi_it;74;14;74;20;0;0;0;;4,3;" idx == 2;"
6;node;;ad7714.c;ad7714_on_spi_it;73;7;73;34;0;0;0;;3;" ad7714_sample = spi_read << 8;"
7;node;;ad7714.c;ad7714_on_spi_it;72;9;72;15;0;0;0;;6,5;" idx == 1;"
8;node;;ad7714.c;ad7714_on_spi_it;70;3;71;26;0;0;0;;7,3;" uint8_t spi_read = (*(volatile uint8_t *)((15) + 32));; msg == &ad7714_read;"
9;entry;;ad7714.c;ad7714_on_spi_it;69;32;69;32;0;0;0;;8;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;ad7714.c;ad7714_start_transmitting;67;1;67;1;0;0;0;;;""
1;node;;ad7714.c;ad7714_start_transmitting;62;3;66;10;0;0;0;;0;" (*(volatile uint8_t *)((13) + 32)) |= (1 << (7)); spi_cur_slave = 2; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((3) + 32)))))) &= ~(1 << (7)); msg = (struct AdMsg *)amsg; (*(volatile uint8_t *)((15) + 32)) = msg->data[0]; idx = 0;"
2;node;;ad7714.c;ad7714_start_transmitting;62;3;0;0;0;0;0;;1;" foo = (*(volatile uint8_t *)((15) + 32));"
3;node;;ad7714.c;ad7714_start_transmitting;62;3;0;0;0;0;0;;2,1;" uint8_t foo;; (*(volatile uint8_t *)((13) + 32)) = (1 << (6)) | (1 << (4)) | (1 << (1)) | (1 << (3)) | (1 << (2)) | (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((14) + 32)))))) & (1 << (7));"
4;entry;;ad7714.c;ad7714_start_transmitting;60;60;60;60;0;0;0;;3;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;adc.c;adc_buf_channel;67;1;67;1;0;0;0;;;""
1;node;;adc.c;adc_buf_channel;66;3;66;27;0;0;0;;0;" buffers[adc_channel] = s;"
2;entry;;adc.c;adc_buf_channel;65;63;65;63;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;adc.c;adc_init;93;1;93;1;0;0;0;;;""
1;node;;adc.c;adc_init;91;26;91;29;0;0;0;;3;" i++;"
2;node;;adc.c;adc_init;92;5;92;36;0;0;0;;1;" buffers[i] = (struct adc_buf *)0;"
3;node;;adc.c;adc_init;91;14;91;24;0;0;0;;2,0;" i < 8;"
4;node;;adc.c;adc_init;72;3;91;12;0;0;0;;3;" uint8_t i;; (*(volatile uint8_t *)(98)) = 0; (*(volatile uint8_t *)(97)) = 0; (*(volatile uint8_t *)((7) + 32)) = (1 << (6)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((8) + 32)))))) |= (1 << (7)); (*(volatile uint8_t *)((6) + 32)) = 0 | 7 | (1 << 7) | (1 << 3) | (1 << 6); i = 0;"
5;entry;;adc.c;adc_init;71;2;71;2;0;0;0;;4;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;estimator.c;estimator_init;109;1;109;1;0;0;0;;;""
1;node;;estimator.c;estimator_init;98;3;108;37;0;0;0;;0;" estimator_x = 0.; estimator_y = 0.; estimator_z = 0.; estimator_phi = 0.; estimator_psi = 0.; estimator_theta = 0; estimator_hspeed_mod = 0.; estimator_hspeed_dir = 0.; estimator_z_dot = 0.; estimator_phi_dot = 0.; estimator_psi_dot = 0.; estimator_theta_dot = 0.; estimator_flight_time = 0; estimator_rad_of_ir = ir_rad_of_ir;"
2;entry;;estimator.c;estimator_init;96;30;96;30;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;estimator.c;estimator_propagate_state;187;1;187;1;0;0;0;;;""
1;entry;;estimator.c;estimator_propagate_state;185;41;185;41;0;0;0;;0;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;estimator.c;estimator_update_ir_estim;172;1;172;1;0;0;0;;;""
1;node;;estimator.c;estimator_update_ir_estim;170;3;171;20;0;0;0;;0;" last_hspeed_dir = estimator_hspeed_dir; last_t = gps_ftow;"
2;node;;estimator.c;estimator_update_ir_estim;163;5;167;36;0;0;0;;1;" initialized = (!0); init_ir2 = ir_contrast; init_ir2 = init_ir2 * init_ir2; sum_xy = 100. * estimator_rad_of_ir * init_ir2; sum_xx = 100. * init_ir2;"
3;node;;estimator.c;estimator_update_ir_estim;147;2;158;41;0;0;0;;1;" sum_xy = estimator_rad * estimator_ir + 0.99899999999999999 * sum_xy; sum_xx = estimator_ir * estimator_ir + 0.99899999999999999 * sum_xx; estimator_rad_of_ir = sum_xy / sum_xx;"
4;node;;estimator.c;estimator_update_ir_estim;146;74;146;97;0;0;0;;3,1;" ir_roll < ir_contrast / 2;"
5;node;;estimator.c;estimator_update_ir_estim;146;45;146;70;0;0;0;;4,1;" -ir_contrast / 2 < ir_roll;"
6;node;;estimator.c;estimator_update_ir_estim;146;27;146;40;0;0;0;;5,1;" absphi > 0.050000000000000003;"
7;node;;estimator.c;estimator_update_ir_estim;143;7;146;23;0;0;1;fabs;6,1;" estimator_ir = (float)ir_roll; estimator_rad = phi; fabs(phi); absphi = [B7.3]; absphi < 1.;"
9;node;;estimator.c;estimator_update_ir_estim;142;7;0;0;0;0;0;;10;" phi += 2 * 3.1415926535897931;"
10;node;;estimator.c;estimator_update_ir_estim;142;7;0;0;0;0;0;;9,7;" phi < -3.1415926535897931;"
12;node;;estimator.c;estimator_update_ir_estim;142;7;0;0;0;0;0;;13;" phi -= 2 * 3.1415926535897931;"
13;node;;estimator.c;estimator_update_ir_estim;142;7;0;0;0;0;0;;12,10;" phi > 3.1415926535897931;"
14;node;;estimator.c;estimator_update_ir_estim;141;7;141;38;0;0;0;;13;" phi = phi / dt * 10. / 9.8100000000000004;"
16;node;;estimator.c;estimator_update_ir_estim;140;7;0;0;0;0;0;;17;" phi += 2 * 3.1415926535897931;"
17;node;;estimator.c;estimator_update_ir_estim;140;7;0;0;0;0;0;;16,14;" phi < -3.1415926535897931;"
19;node;;estimator.c;estimator_update_ir_estim;140;7;0;0;0;0;0;;20;" phi -= 2 * 3.1415926535897931;"
20;node;;estimator.c;estimator_update_ir_estim;140;7;0;0;0;0;0;;19,17;" phi > 3.1415926535897931;"
21;node;;estimator.c;estimator_update_ir_estim;139;7;139;60;0;0;0;;20;" float phi = (estimator_hspeed_dir - last_hspeed_dir);;"
22;node;;estimator.c;estimator_update_ir_estim;137;5;138;17;0;0;0;;21,1;" float dt = gps_ftow - last_t;; dt > 0.10000000000000001;"
23;node;;estimator.c;estimator_update_ir_estim;128;3;135;18;0;0;0;;22,2;" static float last_hspeed_dir;; static float last_t;; static bool_t initialized = 0;; static float sum_xy;; static float sum_xx;; float absphi;; float init_ir2;; initialized (ImplicitCastExpr, LValueToRValue, bool_t);"
24;entry;;estimator.c;estimator_update_ir_estim;127;41;127;41;0;0;0;;23;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;estimator.c;estimator_update_state_gps;183;1;183;1;0;0;0;;;""
1;node;;estimator.c;estimator_update_state_gps;181;7;181;34;0;0;1;estimator_update_ir_estim;0;" estimator_update_ir_estim();"
2;node;;estimator.c;estimator_update_state_gps;177;5;180;30;0;0;0;;1,0;" estimator_x = gps_east; estimator_y = gps_north; estimator_z = gps_falt; estimator_hspeed_mod = gps_fspeed; estimator_hspeed_dir = gps_fcourse; estimator_z_dot = gps_fclimb; estimator_flight_time (ImplicitCastExpr, LValueToRValue, uint16_t);"
3;node;;estimator.c;estimator_update_state_gps;176;7;0;0;0;0;0;;2,0;" gps_mode == 3;"
4;entry;;estimator.c;estimator_update_state_gps;175;42;175;42;0;0;0;;3;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;estimator.c;estimator_update_state_infrared;119;1;119;1;0;0;0;;;""
1;node;;estimator.c;estimator_update_state_infrared;114;3;118;41;0;0;0;;0;" ([B5.1] && (([B4.1]))) ? [B2.1] : [B3.1]; float rad_of_ir = (ir_estim_mode == 1 && ((!0))) ? estimator_rad_of_ir : ir_rad_of_ir;; estimator_phi = rad_of_ir * ir_roll; estimator_theta = rad_of_ir * ir_pitch;"
2;node;;estimator.c;estimator_update_state_infrared;115;5;115;24;0;0;0;;1;" estimator_rad_of_ir (ImplicitCastExpr, LValueToRValue, float);"
3;node;;estimator.c;estimator_update_state_infrared;115;27;115;39;0;0;0;;1;" ir_rad_of_ir (ImplicitCastExpr, LValueToRValue, float);"
4;node;;estimator.c;estimator_update_state_infrared;114;59;0;0;0;0;0;;2,3;" !0;"
5;node;;estimator.c;estimator_update_state_infrared;114;22;114;55;0;0;0;;4,3;" ir_estim_mode == 1;"
6;entry;;estimator.c;estimator_update_state_infrared;113;47;113;47;0;0;0;;5;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;gps_ubx.c;gps_init;95;1;95;1;0;0;0;;;""
1;node;;gps_ubx.c;gps_init;92;3;94;22;0;0;1;uart1_init;0;" uart1_init(); ubx_status = 0;"
2;entry;;gps_ubx.c;gps_init;85;24;85;24;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;gps_ubx.c;parse_gps_msg;129;1;129;1;0;0;0;;;""
1;node;;gps_ubx.c;parse_gps_msg;106;7;115;31;0;0;0;;0;" gps_fspeed = ((float)(*((uint32_t *)(ubx_msg_buf + 20)))) / 100.; gps_fclimb = ((float)(*((int32_t *)(ubx_msg_buf + 12)))) / -100.; gps_fcourse = ((((float)(*((int32_t *)(ubx_msg_buf + 24)))) / 1.0E+5) / 180. * 3.1415926999999999); gps_ftow = ((float)(*((uint32_t *)(ubx_msg_buf + 0)))) / 1000.; gps_east = gps_utm_east / 100 - 605530; gps_north = gps_utm_north / 100 - 5797350; gps_pos_available = (!0);"
2;node;;gps_ubx.c;parse_gps_msg;105;16;105;43;0;0;0;;1,0;" ubx_id == 18;"
3;node;;gps_ubx.c;parse_gps_msg;104;7;104;52;0;0;0;;0;" gps_mode = (*((uint8_t *)(ubx_msg_buf + 4)));"
4;node;;gps_ubx.c;parse_gps_msg;103;16;103;43;0;0;0;;3,2;" ubx_id == 3;"
5;node;;gps_ubx.c;parse_gps_msg;100;7;102;63;0;0;0;;0;" gps_utm_east = (*((int32_t *)(ubx_msg_buf + 4))); gps_utm_north = (*((int32_t *)(ubx_msg_buf + 8))); gps_falt = (float)(*((int32_t *)(ubx_msg_buf + 12))) / 100.;"
6;node;;gps_ubx.c;parse_gps_msg;99;9;99;36;0;0;0;;5,4;" ubx_id == 8;"
7;node;;gps_ubx.c;parse_gps_msg;98;7;98;30;0;0;0;;6,0;" ubx_class == 1;"
8;entry;;gps_ubx.c;parse_gps_msg;97;29;97;29;0;0;0;;7;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;gps_ubx.c;parse_ubx;200;1;200;1;0;0;0;;;""
1;node;restart;gps_ubx.c;parse_ubx;198;3;199;9;0;0;0;;0;" ubx_status = 0; return;;"
3;node;;gps_ubx.c;parse_ubx;195;3;195;9;0;0;0;;0;" return;;"
4;node;;gps_ubx.c;parse_ubx;140;11;140;21;0;0;0;;8,11,14,17,18,19,22,25,28,3;" ubx_status (ImplicitCastExpr, IntegralCast, int);"
6;node;;gps_ubx.c;parse_ubx;191;5;191;28;0;0;0;;1;" gps_msg_received = (!0);"
8;node;case 8;gps_ubx.c;parse_ubx;189;9;189;18;0;0;0;;6;" c != ck_b;"
9;node;;gps_ubx.c;parse_ubx;186;5;186;17;0;0;0;;3;" ubx_status++;"
11;node;case 7;gps_ubx.c;parse_ubx;184;9;184;18;0;0;0;;9;" c != ck_a;"
13;node;;gps_ubx.c;parse_ubx;180;7;180;19;0;0;0;;3;" ubx_status++;"
14;node;case 6;gps_ubx.c;parse_ubx;177;5;179;31;0;0;0;;13,3;" ubx_msg_buf[ubx_msg_idx] = c; ubx_msg_idx++; ubx_msg_idx >= ubx_len;"
15;node;;gps_ubx.c;parse_ubx;173;5;174;17;0;0;0;;3;" ubx_msg_idx = 0; ubx_status++;"
17;node;case 5;gps_ubx.c;parse_ubx;170;5;171;34;0;0;0;;15;" ubx_len |= (c << 8); ubx_len > 255;"
18;node;case 4;gps_ubx.c;parse_ubx;166;5;167;17;0;0;0;;3;" ubx_len = c; ubx_status++;"
19;node;case 3;gps_ubx.c;parse_ubx;162;5;163;17;0;0;0;;3;" ubx_id = c; ubx_status++;"
20;node;;gps_ubx.c;parse_ubx;158;5;159;17;0;0;0;;3;" ubx_class = c; ubx_status++;"
21;node;;gps_ubx.c;parse_ubx;155;7;155;20;0;0;0;;1;" gps_nb_ovrn++;"
22;node;case 2;gps_ubx.c;parse_ubx;153;9;153;25;0;0;0;;21,20;" gps_msg_received (ImplicitCastExpr, LValueToRValue, bool_t);"
23;node;;gps_ubx.c;parse_ubx;148;5;150;17;0;0;0;;3;" ck_a = 0; ck_b = 0; ubx_status++;"
25;node;case 1;gps_ubx.c;parse_ubx;146;9;146;23;0;0;0;;23;" c != 98;"
27;node;;gps_ubx.c;parse_ubx;143;7;143;19;0;0;0;;3;" ubx_status++;"
28;node;case 0;gps_ubx.c;parse_ubx;142;9;142;23;0;0;0;;27,3;" c == 181;"
29;node;;gps_ubx.c;parse_ubx;137;5;138;17;0;0;0;;4;" ck_a += c; ck_b += ck_a;"
30;node;;gps_ubx.c;parse_ubx;136;7;136;31;0;0;0;;29,4;" ubx_status < 7;"
31;entry;;gps_ubx.c;parse_ubx;135;44;135;44;0;0;0;;30;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;infrared.c;ir_gain_calib;71;1;71;1;0;0;0;;;""
1;node;;infrared.c;ir_gain_calib;69;3;69;27;0;0;0;;0;" ir_contrast = -ir_pitch; ir_rad_of_ir = 0.75 / ir_contrast;"
2;entry;;infrared.c;ir_gain_calib;67;27;67;27;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;infrared.c;ir_init;48;1;48;1;0;0;0;;;""
1;node;;infrared.c;ir_init;45;3;47;45;0;0;1;adc_buf_channel,adc_buf_channel;0;" ir_rad_of_ir = 0.75 / 200; adc_buf_channel(1, &buf_ir1); adc_buf_channel(2, &buf_ir2);"
2;entry;;infrared.c;ir_init;44;21;44;21;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;infrared.c;ir_update;61;1;61;1;0;0;0;;;""
1;node;;infrared.c;ir_update;52;3;55;64;0;0;0;;0;" int16_t x1_mean = buf_ir1.sum / 32;; int16_t x2_mean = buf_ir2.sum / 32;; ir_roll = (-1 * (x1_mean) + -1 * (x2_mean)) - ir_roll_neutral; ir_pitch = (-1 * (x1_mean) + 1 * (x2_mean)) - ir_pitch_neutral;"
2;entry;;infrared.c;ir_update;50;23;50;23;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;link_fbw.c;link_fbw_init;45;1;45;1;0;0;0;;;""
1;node;;link_fbw.c;link_fbw_init;43;3;44;36;0;0;0;;0;" link_fbw_nb_err (ImplicitCastExpr, LValueToRValue, uint8_t); link_fbw_receive_complete = 0;"
2;entry;;link_fbw.c;link_fbw_init;42;27;42;27;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;link_fbw.c;link_fbw_on_spi_it;75;1;75;1;0;0;0;;;""
1;node;;link_fbw.c;link_fbw_on_spi_it;70;3;70;22;0;0;0;;0;" (*(volatile uint16_t *)((42) + 32)) = (*(volatile uint16_t *)((44) + 32)) + 200; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((54) + 32)))))) |= (1 << (4)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((55) + 32)))))) |= (1 << (4));"
2;entry;;link_fbw.c;link_fbw_on_spi_it;65;34;65;34;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;link_fbw.c;link_fbw_send;63;1;63;1;0;0;0;;;""
1;node;;link_fbw.c;link_fbw_send;54;3;61;33;0;0;0;;0;" (*(volatile uint8_t *)((13) + 32)) |= (1 << (7)); spi_cur_slave = 1; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((24) + 32)))))) &= ~(1 << (0)); idx_buf = 0; xor_in = 0; xor_out = ((uint8_t *)&to_fbw)[idx_buf]; (*(volatile uint8_t *)((15) + 32)) = xor_out; link_fbw_receive_valid = 0;"
2;node;;link_fbw.c;link_fbw_send;54;3;0;0;0;0;0;;1;" foo = (*(volatile uint8_t *)((15) + 32));"
3;node;;link_fbw.c;link_fbw_send;54;3;0;0;0;0;0;;2,1;" uint8_t foo;; (*(volatile uint8_t *)((13) + 32)) = (1 << (6)) | (1 << (4)) | (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((14) + 32)))))) & (1 << (7));"
4;node;;link_fbw.c;link_fbw_send;49;5;50;11;0;0;0;;0;" spi_nb_ovrn++; return;;"
5;node;;link_fbw.c;link_fbw_send;48;7;48;32;0;0;0;;4,3;" spi_cur_slave != 0;"
6;entry;;link_fbw.c;link_fbw_send;47;27;47;27;0;0;0;;5;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;altitude_control_task;370;1;370;1;0;0;0;;;""
1;node;;main.c;altitude_control_task;368;10;368;28;0;0;1;altitude_pid_run;0;" altitude_pid_run();"
2;node;;main.c;altitude_control_task;367;7;367;46;0;0;0;;1,0;" vertical_mode == 3;"
3;node;;main.c;altitude_control_task;366;38;366;65;0;0;0;;2,0;" pprz_mode == 3;"
4;node;;main.c;altitude_control_task;366;6;366;34;0;0;0;;2,3;" pprz_mode == 2;"
5;entry;;main.c;altitude_control_task;365;2;365;2;0;0;0;;4;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;climb_control_task;382;1;382;1;0;0;0;;;""
1;node;;main.c;climb_control_task;380;7;380;23;0;0;0;;0;" desired_gaz = 0.;"
2;node;;main.c;climb_control_task;379;51;379;58;0;0;0;;1,0;" !launch;"
3;node;;main.c;climb_control_task;379;25;379;47;0;0;0;;2,0;" !estimator_flight_time;"
4;node;;main.c;climb_control_task;379;9;379;20;0;0;0;;1,3;" low_battery (ImplicitCastExpr, IntegralCast, int);"
5;node;;main.c;climb_control_task;378;7;378;36;0;0;0;;4;" desired_gaz = nav_desired_gaz;"
6;node;;main.c;climb_control_task;377;9;377;48;0;0;0;;5,4;" vertical_mode == 1;"
7;node;;main.c;climb_control_task;376;10;376;25;0;0;1;climb_pid_run;6;" climb_pid_run();"
8;node;;main.c;climb_control_task;375;6;375;47;0;0;0;;7,6;" vertical_mode >= 2;"
9;node;;main.c;climb_control_task;373;40;373;67;0;0;0;;8,0;" pprz_mode == 3;"
10;node;;main.c;climb_control_task;373;8;373;36;0;0;0;;8,9;" pprz_mode == 2;"
11;entry;;main.c;climb_control_task;372;2;372;2;0;0;0;;10;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;copy_from_to_fbw;202;1;202;1;0;0;0;;;""
1;node;;main.c;copy_from_to_fbw;197;3;201;20;0;0;0;;0;" to_fbw.channels[3] = from_fbw.channels[3]; to_fbw.status = 0;"
2;entry;;main.c;copy_from_to_fbw;196;40;196;40;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;events_update;190;1;190;1;0;0;0;;;""
1;node;;main.c;events_update;189;3;0;0;0;0;0;;0;" event2_cpt = 0; rc_event_2 = 0;"
2;node;;main.c;events_update;189;3;0;0;0;0;0;;0;" rc_event_2 = (!0);"
3;node;;main.c;events_update;189;3;0;0;0;0;0;;2,0;" event2_cpt++; event2_cpt == 20;"
4;node;;main.c;events_update;189;3;0;0;0;0;0;;3,0;" event2_cpt < 20;"
5;node;;main.c;events_update;189;3;0;0;0;0;0;;4,1;" from_fbw.channels[5] < (int)(-0.75 * (600 * 16));"
6;node;;main.c;events_update;189;3;0;0;0;0;0;;5,1;" inflight_calib_mode == 0;"
7;node;;main.c;events_update;188;3;0;0;0;0;0;;6;" event1_cpt = 0; rc_event_1 = 0;"
8;node;;main.c;events_update;188;3;0;0;0;0;0;;6;" rc_event_1 = (!0);"
9;node;;main.c;events_update;188;3;0;0;0;0;0;;8,6;" event1_cpt++; event1_cpt == 20;"
10;node;;main.c;events_update;188;3;0;0;0;0;0;;9,6;" event1_cpt < 20;"
11;node;;main.c;events_update;188;3;0;0;0;0;0;;10,7;" from_fbw.channels[5] > (int)(0.75 * (600 * 16));"
12;node;;main.c;events_update;186;3;187;34;0;0;0;;11,7;" static uint16_t event1_cpt = 0;; static uint16_t event2_cpt = 0;; inflight_calib_mode == 0;"
13;entry;;main.c;events_update;185;43;185;43;0;0;0;;12;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;ground_calibrate;116;1;116;1;0;0;0;;;""
1;node;;main.c;ground_calibrate;96;3;97;23;0;0;0;;0,75,95;" static uint8_t calib_status = 0;; calib_status (ImplicitCastExpr, IntegralCast, int);"
4;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;0;" modem_nb_ovrn++;"
5;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;0;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
6;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;5;" tx_tail = 0;"
7;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;6,5;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
8;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;7,0;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
9;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;8;" tx_head = 0;"
10;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;9,8;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
11;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;10;" tx_head = 0;"
12;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;11,10;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
13;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;12;" tx_head = 0;"
14;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;13,12;" tx_buf[tx_head] = *((uint8_t *)(&ir_contrast) + 1); ck_a += *((uint8_t *)(&ir_contrast) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
15;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;14;" tx_head = 0;"
16;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;15,14;" ck_a = 3; ck_b = 3; tx_buf[tx_head] = *((uint8_t *)(&ir_contrast)); ck_a += *((uint8_t *)(&ir_contrast)); ck_b += ck_a; tx_head++; tx_head >= 255;"
17;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;16;" tx_head = 0;"
18;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;17,16;" tx_buf[tx_head] = 3; tx_head++; tx_head >= 255;"
19;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;18;" tx_head = 0;"
20;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;19,18;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
21;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;20,4;" [B24.2] ? [B22.1] : [B23.1];"
22;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;21;" 6 < (255 - (tx_head - tx_tail));"
23;node;;main.c;ground_calibrate;110;7;0;0;0;0;0;;21;" 6 < (tx_tail - tx_head);"
24;node;;main.c;ground_calibrate;109;7;109;32;0;0;0;;22,23;" calib_status = 2; tx_head >= tx_tail;"
25;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;24;" modem_nb_ovrn++;"
26;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;24;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
27;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;26;" tx_tail = 0;"
28;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;27,26;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
29;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;28,24;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
30;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;29;" tx_head = 0;"
31;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;30,29;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
32;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;31;" tx_head = 0;"
33;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;32,31;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
34;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;33;" tx_head = 0;"
35;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;34,33;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral) + 1); ck_a += *((uint8_t *)(&ir_pitch_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
36;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;35;" tx_head = 0;"
37;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;36,35;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral)); ck_a += *((uint8_t *)(&ir_pitch_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
38;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;37;" tx_head = 0;"
39;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;38,37;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral) + 1); ck_a += *((uint8_t *)(&ir_roll_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
40;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;39;" tx_head = 0;"
41;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;40,39;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral)); ck_a += *((uint8_t *)(&ir_roll_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
42;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;41;" tx_head = 0;"
43;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;42,41;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
44;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;43;" tx_head = 0;"
45;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;44,43;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
46;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;45;" tx_head = 0;"
47;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;46,45;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
48;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;47;" tx_head = 0;"
49;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;48,47;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir)); ck_a += *((uint8_t *)(&estimator_rad_of_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
50;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;49;" tx_head = 0;"
51;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;50,49;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 3); ck_a += *((uint8_t *)(&estimator_rad) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
52;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;51;" tx_head = 0;"
53;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;52,51;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 2); ck_a += *((uint8_t *)(&estimator_rad) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
54;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;53;" tx_head = 0;"
55;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;54,53;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 1); ck_a += *((uint8_t *)(&estimator_rad) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
56;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;55;" tx_head = 0;"
57;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;56,55;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad)); ck_a += *((uint8_t *)(&estimator_rad)); ck_b += ck_a; tx_head++; tx_head >= 255;"
58;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;57;" tx_head = 0;"
59;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;58,57;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 3); ck_a += *((uint8_t *)(&estimator_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
60;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;59;" tx_head = 0;"
61;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;60,59;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 2); ck_a += *((uint8_t *)(&estimator_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
62;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;61;" tx_head = 0;"
63;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;62,61;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 1); ck_a += *((uint8_t *)(&estimator_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
64;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;63;" tx_head = 0;"
65;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;64,63;" ck_a = 5; ck_b = 5; tx_buf[tx_head] = *((uint8_t *)(&estimator_ir)); ck_a += *((uint8_t *)(&estimator_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
66;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;65;" tx_head = 0;"
67;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;66,65;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
68;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;67;" tx_head = 0;"
69;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;68,67;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
70;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;69,25;" [B73.3] ? [B71.1] : [B72.1];"
71;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;70;" 20 < (255 - (tx_head - tx_tail));"
72;node;;main.c;ground_calibrate;108;7;0;0;0;0;0;;70;" 20 < (tx_tail - tx_head);"
73;node;;main.c;ground_calibrate;106;7;107;41;0;0;1;ir_gain_calib;71,72;" ir_gain_calib(); estimator_rad_of_ir = ir_rad_of_ir; tx_head >= tx_tail;"
74;node;;main.c;ground_calibrate;105;9;0;0;0;0;0;;73,0;" from_fbw.channels[1] > 200 * 16;"
75;node;case 1;main.c;ground_calibrate;105;9;0;0;0;0;0;;73,74;" from_fbw.channels[1] < (-(600 * 16) / 2);"
77;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;0;" modem_nb_ovrn++;"
78;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;0;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
79;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;78;" tx_tail = 0;"
80;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;79,78;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
81;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;80,0;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
82;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;81;" tx_head = 0;"
83;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;82,81;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
84;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;83;" tx_head = 0;"
85;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;84,83;" ck_a = 2; ck_b = 2; tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
86;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;85;" tx_head = 0;"
87;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;86,85;" tx_buf[tx_head] = 2; tx_head++; tx_head >= 255;"
88;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;87;" tx_head = 0;"
89;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;88,87;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
90;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;89,77;" [B93.2] ? [B91.1] : [B92.1];"
91;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;90;" 4 < (255 - (tx_head - tx_tail));"
92;node;;main.c;ground_calibrate;101;7;0;0;0;0;0;;90;" 4 < (tx_tail - tx_head);"
93;node;;main.c;ground_calibrate;100;7;100;44;0;0;0;;91,92;" calib_status = 1; tx_head >= tx_tail;"
94;node;;main.c;ground_calibrate;99;48;99;76;0;0;0;;93,0;" pprz_mode == 1;"
95;node;case 0;main.c;ground_calibrate;99;9;99;44;0;0;0;;94,0;" cputime < 10;"
96;entry;;main.c;ground_calibrate;95;39;95;39;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;inflight_calib_mode_update;283;1;283;1;0;0;0;;;""
1;node;;main.c;inflight_calib_mode_update;282;3;0;0;0;0;0;;0;" return 0;;"
2;node;;main.c;inflight_calib_mode_update;282;3;0;0;0;0;0;;0;" inflight_calib_mode = new_mode; return (!0);;"
3;node;;main.c;inflight_calib_mode_update;282;3;0;0;0;0;0;;2,1;" [B9.1] ? [B4.1] : ([B5.1]); uint8_t new_mode = (from_fbw.channels[8] < (-(600 * 16) / 2) ? 2 : (from_fbw.channels[8] < 200 * 16 ? 0 : 1));; inflight_calib_mode != new_mode;"
4;node;;main.c;inflight_calib_mode_update;282;3;0;0;0;0;0;;3;" 2;"
5;node;;main.c;inflight_calib_mode_update;282;3;0;0;0;0;0;;3;" [B8.1] ? [B6.1] : [B7.1];"
6;node;;main.c;inflight_calib_mode_update;282;3;0;0;0;0;0;;5;" 0;"
7;node;;main.c;inflight_calib_mode_update;282;3;0;0;0;0;0;;5;" 1;"
8;node;;main.c;inflight_calib_mode_update;282;3;0;0;0;0;0;;6,7;" from_fbw.channels[8] < 200 * 16;"
9;node;;main.c;inflight_calib_mode_update;282;3;0;0;0;0;0;;4,8;" from_fbw.channels[8] < (-(600 * 16) / 2);"
10;entry;;main.c;inflight_calib_mode_update;281;53;281;53;0;0;0;;9;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;ir_estim_mode_update;136;1;136;1;0;0;0;;;""
1;node;;main.c;ir_estim_mode_update;135;3;0;0;0;0;0;;0;" return 0;;"
2;node;;main.c;ir_estim_mode_update;135;3;0;0;0;0;0;;0;" ir_estim_mode = new_mode; return (!0);;"
3;node;;main.c;ir_estim_mode_update;135;3;0;0;0;0;0;;2,1;" [B6.1] ? [B4.1] : [B5.1]; uint8_t new_mode = (from_fbw.channels[7] < 200 * 16 ? 0 : 1);; ir_estim_mode != new_mode;"
4;node;;main.c;ir_estim_mode_update;135;3;0;0;0;0;0;;3;" 0;"
5;node;;main.c;ir_estim_mode_update;135;3;0;0;0;0;0;;3;" 1;"
6;node;;main.c;ir_estim_mode_update;135;3;0;0;0;0;0;;4,5;" from_fbw.channels[7] < 200 * 16;"
7;entry;;main.c;ir_estim_mode_update;134;46;134;46;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;mcu1_status_update;151;1;151;1;0;0;0;;;""
1;node;;main.c;mcu1_status_update;150;3;150;15;0;0;0;;0;" return 0;;"
2;node;;main.c;mcu1_status_update;146;5;148;19;0;0;0;;0;" bool_t changed = ((mcu1_status & 3) != (new_mode & 3));; mcu1_status = new_mode; return changed;;"
3;node;;main.c;mcu1_status_update;144;3;145;30;0;0;0;;2,1;" uint8_t new_mode = from_fbw.status;; mcu1_status != new_mode;"
4;entry;;main.c;mcu1_status_update;143;44;143;44;0;0;0;;3;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;navigation_task;363;1;363;1;0;0;0;;;""
1;node;;main.c;navigation_task;360;5;360;36;0;0;0;;0;" desired_roll = nav_desired_roll;"
2;node;;main.c;navigation_task;359;7;359;23;0;0;1;course_pid_run;1;" course_pid_run();"
3;node;;main.c;navigation_task;358;9;358;44;0;0;0;;2,1;" lateral_mode >= 3;"
4;node;;main.c;navigation_task;356;39;356;66;0;0;0;;3,0;" pprz_mode == 3;"
5;node;;main.c;navigation_task;356;7;356;35;0;0;0;;3,4;" pprz_mode == 2;"
6;node;;main.c;navigation_task;354;3;0;0;0;0;0;;5;" modem_nb_ovrn++;"
7;node;;main.c;navigation_task;354;3;0;0;0;0;0;;5;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
8;node;;main.c;navigation_task;354;3;0;0;0;0;0;;7;" tx_tail = 0;"
9;node;;main.c;navigation_task;354;3;0;0;0;0;0;;8,7;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
10;node;;main.c;navigation_task;354;3;0;0;0;0;0;;9,5;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
11;node;;main.c;navigation_task;354;3;0;0;0;0;0;;10;" tx_head = 0;"
12;node;;main.c;navigation_task;354;3;0;0;0;0;0;;11,10;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
13;node;;main.c;navigation_task;354;3;0;0;0;0;0;;12;" tx_head = 0;"
14;node;;main.c;navigation_task;354;3;0;0;0;0;0;;13,12;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
15;node;;main.c;navigation_task;354;3;0;0;0;0;0;;14;" tx_head = 0;"
16;node;;main.c;navigation_task;354;3;0;0;0;0;0;;15,14;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_home) + 3); ck_a += *((uint8_t *)(&dist2_to_home) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
17;node;;main.c;navigation_task;354;3;0;0;0;0;0;;16;" tx_head = 0;"
18;node;;main.c;navigation_task;354;3;0;0;0;0;0;;17,16;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_home) + 2); ck_a += *((uint8_t *)(&dist2_to_home) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
19;node;;main.c;navigation_task;354;3;0;0;0;0;0;;18;" tx_head = 0;"
20;node;;main.c;navigation_task;354;3;0;0;0;0;0;;19,18;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_home) + 1); ck_a += *((uint8_t *)(&dist2_to_home) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
21;node;;main.c;navigation_task;354;3;0;0;0;0;0;;20;" tx_head = 0;"
22;node;;main.c;navigation_task;354;3;0;0;0;0;0;;21,20;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_home)); ck_a += *((uint8_t *)(&dist2_to_home)); ck_b += ck_a; tx_head++; tx_head >= 255;"
23;node;;main.c;navigation_task;354;3;0;0;0;0;0;;22;" tx_head = 0;"
24;node;;main.c;navigation_task;354;3;0;0;0;0;0;;23,22;" tx_buf[tx_head] = *((uint8_t *)(&course_pgain) + 3); ck_a += *((uint8_t *)(&course_pgain) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
25;node;;main.c;navigation_task;354;3;0;0;0;0;0;;24;" tx_head = 0;"
26;node;;main.c;navigation_task;354;3;0;0;0;0;0;;25,24;" tx_buf[tx_head] = *((uint8_t *)(&course_pgain) + 2); ck_a += *((uint8_t *)(&course_pgain) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
27;node;;main.c;navigation_task;354;3;0;0;0;0;0;;26;" tx_head = 0;"
28;node;;main.c;navigation_task;354;3;0;0;0;0;0;;27,26;" tx_buf[tx_head] = *((uint8_t *)(&course_pgain) + 1); ck_a += *((uint8_t *)(&course_pgain) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
29;node;;main.c;navigation_task;354;3;0;0;0;0;0;;28;" tx_head = 0;"
30;node;;main.c;navigation_task;354;3;0;0;0;0;0;;29,28;" tx_buf[tx_head] = *((uint8_t *)(&course_pgain)); ck_a += *((uint8_t *)(&course_pgain)); ck_b += ck_a; tx_head++; tx_head >= 255;"
31;node;;main.c;navigation_task;354;3;0;0;0;0;0;;30;" tx_head = 0;"
32;node;;main.c;navigation_task;354;3;0;0;0;0;0;;31,30;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_wp) + 3); ck_a += *((uint8_t *)(&dist2_to_wp) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
33;node;;main.c;navigation_task;354;3;0;0;0;0;0;;32;" tx_head = 0;"
34;node;;main.c;navigation_task;354;3;0;0;0;0;0;;33,32;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_wp) + 2); ck_a += *((uint8_t *)(&dist2_to_wp) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
35;node;;main.c;navigation_task;354;3;0;0;0;0;0;;34;" tx_head = 0;"
36;node;;main.c;navigation_task;354;3;0;0;0;0;0;;35,34;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_wp) + 1); ck_a += *((uint8_t *)(&dist2_to_wp) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
37;node;;main.c;navigation_task;354;3;0;0;0;0;0;;36;" tx_head = 0;"
38;node;;main.c;navigation_task;354;3;0;0;0;0;0;;37,36;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_wp)); ck_a += *((uint8_t *)(&dist2_to_wp)); ck_b += ck_a; tx_head++; tx_head >= 255;"
39;node;;main.c;navigation_task;354;3;0;0;0;0;0;;38;" tx_head = 0;"
40;node;;main.c;navigation_task;354;3;0;0;0;0;0;;39,38;" tx_buf[tx_head] = *((uint8_t *)(&desired_course) + 3); ck_a += *((uint8_t *)(&desired_course) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
41;node;;main.c;navigation_task;354;3;0;0;0;0;0;;40;" tx_head = 0;"
42;node;;main.c;navigation_task;354;3;0;0;0;0;0;;41,40;" tx_buf[tx_head] = *((uint8_t *)(&desired_course) + 2); ck_a += *((uint8_t *)(&desired_course) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
43;node;;main.c;navigation_task;354;3;0;0;0;0;0;;42;" tx_head = 0;"
44;node;;main.c;navigation_task;354;3;0;0;0;0;0;;43,42;" tx_buf[tx_head] = *((uint8_t *)(&desired_course) + 1); ck_a += *((uint8_t *)(&desired_course) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
45;node;;main.c;navigation_task;354;3;0;0;0;0;0;;44;" tx_head = 0;"
46;node;;main.c;navigation_task;354;3;0;0;0;0;0;;45,44;" tx_buf[tx_head] = *((uint8_t *)(&desired_course)); ck_a += *((uint8_t *)(&desired_course)); ck_b += ck_a; tx_head++; tx_head >= 255;"
47;node;;main.c;navigation_task;354;3;0;0;0;0;0;;46;" tx_head = 0;"
48;node;;main.c;navigation_task;354;3;0;0;0;0;0;;47,46;" tx_buf[tx_head] = *((uint8_t *)(&estimator_y) + 3); ck_a += *((uint8_t *)(&estimator_y) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
49;node;;main.c;navigation_task;354;3;0;0;0;0;0;;48;" tx_head = 0;"
50;node;;main.c;navigation_task;354;3;0;0;0;0;0;;49,48;" tx_buf[tx_head] = *((uint8_t *)(&estimator_y) + 2); ck_a += *((uint8_t *)(&estimator_y) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
51;node;;main.c;navigation_task;354;3;0;0;0;0;0;;50;" tx_head = 0;"
52;node;;main.c;navigation_task;354;3;0;0;0;0;0;;51,50;" tx_buf[tx_head] = *((uint8_t *)(&estimator_y) + 1); ck_a += *((uint8_t *)(&estimator_y) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
53;node;;main.c;navigation_task;354;3;0;0;0;0;0;;52;" tx_head = 0;"
54;node;;main.c;navigation_task;354;3;0;0;0;0;0;;53,52;" tx_buf[tx_head] = *((uint8_t *)(&estimator_y)); ck_a += *((uint8_t *)(&estimator_y)); ck_b += ck_a; tx_head++; tx_head >= 255;"
55;node;;main.c;navigation_task;354;3;0;0;0;0;0;;54;" tx_head = 0;"
56;node;;main.c;navigation_task;354;3;0;0;0;0;0;;55,54;" tx_buf[tx_head] = *((uint8_t *)(&estimator_x) + 3); ck_a += *((uint8_t *)(&estimator_x) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
57;node;;main.c;navigation_task;354;3;0;0;0;0;0;;56;" tx_head = 0;"
58;node;;main.c;navigation_task;354;3;0;0;0;0;0;;57,56;" tx_buf[tx_head] = *((uint8_t *)(&estimator_x) + 2); ck_a += *((uint8_t *)(&estimator_x) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
59;node;;main.c;navigation_task;354;3;0;0;0;0;0;;58;" tx_head = 0;"
60;node;;main.c;navigation_task;354;3;0;0;0;0;0;;59,58;" tx_buf[tx_head] = *((uint8_t *)(&estimator_x) + 1); ck_a += *((uint8_t *)(&estimator_x) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
61;node;;main.c;navigation_task;354;3;0;0;0;0;0;;60;" tx_head = 0;"
62;node;;main.c;navigation_task;354;3;0;0;0;0;0;;61,60;" tx_buf[tx_head] = *((uint8_t *)(&estimator_x)); ck_a += *((uint8_t *)(&estimator_x)); ck_b += ck_a; tx_head++; tx_head >= 255;"
63;node;;main.c;navigation_task;354;3;0;0;0;0;0;;62;" tx_head = 0;"
64;node;;main.c;navigation_task;354;3;0;0;0;0;0;;63,62;" tx_buf[tx_head] = *((uint8_t *)(&nav_stage)); ck_a += *((uint8_t *)(&nav_stage)); ck_b += ck_a; tx_head++; tx_head >= 255;"
65;node;;main.c;navigation_task;354;3;0;0;0;0;0;;64;" tx_head = 0;"
66;node;;main.c;navigation_task;354;3;0;0;0;0;0;;65,64;" ck_a = 10; ck_b = 10; tx_buf[tx_head] = *((uint8_t *)(&nav_block)); ck_a += *((uint8_t *)(&nav_block)); ck_b += ck_a; tx_head++; tx_head >= 255;"
67;node;;main.c;navigation_task;354;3;0;0;0;0;0;;66;" tx_head = 0;"
68;node;;main.c;navigation_task;354;3;0;0;0;0;0;;67,66;" tx_buf[tx_head] = 10; tx_head++; tx_head >= 255;"
69;node;;main.c;navigation_task;354;3;0;0;0;0;0;;68;" tx_head = 0;"
70;node;;main.c;navigation_task;354;3;0;0;0;0;0;;69,68;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
71;node;;main.c;navigation_task;354;3;0;0;0;0;0;;70,6;" [B74.1] ? [B72.1] : [B73.1];"
72;node;;main.c;navigation_task;354;3;0;0;0;0;0;;71;" 30 < (255 - (tx_head - tx_tail));"
73;node;;main.c;navigation_task;354;3;0;0;0;0;0;;71;" 30 < (tx_tail - tx_head);"
74;node;;main.c;navigation_task;354;3;0;0;0;0;0;;72,73;" tx_head >= tx_tail;"
75;node;;main.c;navigation_task;352;5;352;17;0;0;1;nav_update;74;" nav_update();"
76;node;;main.c;navigation_task;350;5;350;15;0;0;1;nav_home;74;" nav_home();"
77;node;;main.c;navigation_task;348;3;349;34;0;0;0;;76,75;" lateral_mode = 3; pprz_mode == 3;"
78;entry;;main.c;navigation_task;345;31;345;31;0;0;0;;77;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;periodic_task;463;1;463;1;0;0;0;;;""
1;node;;main.c;periodic_task;446;11;446;16;0;0;0;;3,6,0,2;" _20Hz (ImplicitCastExpr, IntegralCast, int);"
2;node;default;main.c;periodic_task;461;5;461;21;0;0;0;;0;" fatal_error_nb++;"
3;node;case 2;main.c;periodic_task;457;5;458;20;0;0;1;stabilisation_task,link_fbw_send;0;" stabilisation_task(); link_fbw_send();"
5;node;;main.c;periodic_task;453;7;453;23;0;0;1;reporting_task;0;" reporting_task();"
6;node;case 1;main.c;periodic_task;450;5;452;19;0;0;0;;5,0;" static uint8_t odd;; odd++; odd & 1;"
8;node;;main.c;periodic_task;437;10;437;14;0;0;0;;9,1;" _4Hz (ImplicitCastExpr, IntegralCast, int);"
9;node;case 0;main.c;periodic_task;439;5;442;25;0;0;1;estimator_propagate_state,navigation_task,altitude_control_task,climb_control_task;1;" estimator_propagate_state(); navigation_task(); altitude_control_task(); climb_control_task();"
10;node;;main.c;periodic_task;435;5;435;44;0;0;0;;8;" low_battery |= (t >= 5);"
11;node;;main.c;periodic_task;434;42;434;47;0;0;0;;10;" t = 0;"
12;node;;main.c;periodic_task;434;32;434;35;0;0;0;;10;" t++;"
13;node;;main.c;periodic_task;429;5;434;30;0;0;0;;12,11;" cputime++; stage_time_ds = (int16_t)(stage_time_ds + 0.5); stage_time++; block_time++; vsupply < 93;"
14;node;;main.c;periodic_task;428;32;428;55;0;0;0;;13;" estimator_flight_time++;"
15;node;;main.c;periodic_task;428;9;428;30;0;0;0;;14,13;" estimator_flight_time (ImplicitCastExpr, LValueToRValue, uint16_t);"
16;node;;main.c;periodic_task;427;7;427;12;0;0;0;;15,8;" !_1Hz;"
17;node;;main.c;periodic_task;425;5;425;39;0;0;0;;16;" stage_time_ds = stage_time_ds + 0.10000000000000001;"
18;node;;main.c;periodic_task;424;7;424;13;0;0;0;;17,16;" !_10Hz;"
19;node;;main.c;periodic_task;422;17;422;23;0;0;0;;18;" _1Hz = 0;"
20;node;;main.c;periodic_task;421;3;422;15;0;0;0;;19,18;" _1Hz++; _1Hz >= 61;"
21;node;;main.c;periodic_task;420;17;420;23;0;0;0;;20;" _4Hz = 0;"
22;node;;main.c;periodic_task;419;3;420;15;0;0;0;;21,20;" _4Hz++; _4Hz >= 15;"
23;node;;main.c;periodic_task;418;17;418;24;0;0;0;;22;" _10Hz = 0;"
24;node;;main.c;periodic_task;417;3;418;15;0;0;0;;23,22;" _10Hz++; _10Hz >= 6;"
25;node;;main.c;periodic_task;416;17;416;24;0;0;0;;24;" _20Hz = 0;"
26;node;;main.c;periodic_task;407;3;416;15;0;0;0;;25,24;" static uint8_t _20Hz = 0;; static uint8_t _10Hz = 0;; static uint8_t _4Hz = 0;; static uint8_t _1Hz = 0;; static uint8_t t = 0;; estimator_t += (256. * 1024. / 16 / 1.0E+6); _20Hz++; _20Hz >= 3;"
27;entry;;main.c;periodic_task;406;29;406;29;0;0;0;;26;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;pprz_mode_update;128;1;128;1;0;0;0;;;""
1;node;;main.c;pprz_mode_update;127;5;127;17;0;0;0;;0;" return 0;;"
2;node;;main.c;pprz_mode_update;125;5;0;0;0;0;0;;0;" return 0;;"
3;node;;main.c;pprz_mode_update;125;5;0;0;0;0;0;;0;" pprz_mode = new_mode; return (!0);;"
4;node;;main.c;pprz_mode_update;125;5;0;0;0;0;0;;3,2;" [B10.1] ? [B5.1] : ([B6.1]); uint8_t new_mode = (from_fbw.channels[4] > 200 * 16 ? 2 : (from_fbw.channels[4] > (-(600 * 16) / 2) ? 1 : 0));; pprz_mode != new_mode;"
5;node;;main.c;pprz_mode_update;125;5;0;0;0;0;0;;4;" 2;"
6;node;;main.c;pprz_mode_update;125;5;0;0;0;0;0;;4;" [B9.1] ? [B7.1] : [B8.1];"
7;node;;main.c;pprz_mode_update;125;5;0;0;0;0;0;;6;" 1;"
8;node;;main.c;pprz_mode_update;125;5;0;0;0;0;0;;6;" 0;"
9;node;;main.c;pprz_mode_update;125;5;0;0;0;0;0;;7,8;" from_fbw.channels[4] > (-(600 * 16) / 2);"
10;node;;main.c;pprz_mode_update;125;5;0;0;0;0;0;;5,9;" from_fbw.channels[4] > 200 * 16;"
11;node;;main.c;pprz_mode_update;124;38;0;0;0;0;0;;10,1;" [B14.1] ? [B12.3] : [B13.1];"
12;node;;main.c;pprz_mode_update;124;38;0;0;0;0;0;;11;" rc_event_1 = 0; !0; ... , ;"
13;node;;main.c;pprz_mode_update;124;38;0;0;0;0;0;;11;" 0;"
14;node;;main.c;pprz_mode_update;124;38;0;0;0;0;0;;12,13;" rc_event_1 (ImplicitCastExpr, IntegralCast, int);"
15;node;;main.c;pprz_mode_update;124;7;124;34;0;0;0;;10,14;" pprz_mode != 3;"
16;entry;;main.c;pprz_mode_update;122;42;122;42;0;0;0;;15;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;radio_control_task;340;1;340;1;0;0;0;;;""
1;node;;main.c;radio_control_task;335;2;335;15;0;0;0;;0;" launch = (!0);"
2;node;;main.c;radio_control_task;334;43;334;100;0;0;0;;1,0;" from_fbw.channels[0] > (pprz_t)((600 * 16) * 0.90000000000000002);"
3;node;;main.c;radio_control_task;333;7;334;39;0;0;1;ground_calibrate;2,0;" ground_calibrate(); pprz_mode == 2;"
4;node;;main.c;radio_control_task;327;5;332;31;0;0;1;events_update;3,0;" mcu1_ppm_cpt = from_fbw.ppm_cpt; vsupply = from_fbw.vsupply; events_update(); !estimator_flight_time;"
5;node;;main.c;radio_control_task;319;7;319;54;0;0;0;;4;" desired_gaz = from_fbw.channels[0];"
6;node;;main.c;radio_control_task;318;42;318;70;0;0;0;;5,4;" pprz_mode == 1;"
7;node;;main.c;radio_control_task;318;9;318;38;0;0;0;;5,6;" pprz_mode == 0;"
8;node;;main.c;radio_control_task;315;7;316;77;0;0;0;;7;" desired_roll = ((float)from_fbw.channels[1] / (float)(600 * 16) * -0.59999999999999998 + 0.); desired_pitch = ((float)from_fbw.channels[2] / (float)(600 * 16) * 0.5 + 0.);"
9;node;;main.c;radio_control_task;314;9;314;37;0;0;0;;8,7;" pprz_mode == 1;"
10;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;9;" modem_nb_ovrn++;"
11;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;9;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
12;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;11;" tx_tail = 0;"
13;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;12,11;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
14;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;13,9;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
15;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;14;" tx_head = 0;"
16;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;15,14;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
17;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;16;" tx_head = 0;"
18;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;17,16;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
19;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;18;" tx_head = 0;"
20;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;19,18;" tx_buf[tx_head] = *((uint8_t *)(&ir_estim_mode)); ck_a += *((uint8_t *)(&ir_estim_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
21;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;20;" tx_head = 0;"
22;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;21,20;" tx_buf[tx_head] = *((uint8_t *)(&mcu1_status)); ck_a += *((uint8_t *)(&mcu1_status)); ck_b += ck_a; tx_head++; tx_head >= 255;"
23;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;22;" tx_head = 0;"
24;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;23,22;" tx_buf[tx_head] = *((uint8_t *)(&inflight_calib_mode)); ck_a += *((uint8_t *)(&inflight_calib_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
25;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;24;" tx_head = 0;"
26;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;25,24;" tx_buf[tx_head] = *((uint8_t *)(&vertical_mode)); ck_a += *((uint8_t *)(&vertical_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
27;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;26;" tx_head = 0;"
28;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;27,26;" ck_a = 11; ck_b = 11; tx_buf[tx_head] = *((uint8_t *)(&pprz_mode)); ck_a += *((uint8_t *)(&pprz_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
29;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;28;" tx_head = 0;"
30;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;29,28;" tx_buf[tx_head] = 11; tx_head++; tx_head >= 255;"
31;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;30;" tx_head = 0;"
32;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;31,30;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
33;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;32,10;" [B36.1] ? [B34.1] : [B35.1];"
34;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;33;" 9 < (255 - (tx_head - tx_tail));"
35;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;33;" 9 < (tx_tail - tx_head);"
36;node;;main.c;radio_control_task;312;7;0;0;0;0;0;;34,35;" tx_head >= tx_tail;"
37;node;;main.c;radio_control_task;310;5;311;22;0;0;1;mcu1_status_update;36,9;" mcu1_status_update(); mode_changed |= [B37.1]; mode_changed (ImplicitCastExpr, LValueToRValue, uint8_t);"
38;node;;main.c;radio_control_task;306;7;307;41;0;0;0;;37;" [B40.8] || [B39.1]; inflight_calib([B38.1]); mode_changed |= calib_mode_changed;"
39;node;;main.c;radio_control_task;306;44;306;61;0;0;0;;38;" pprz_mode_changed (ImplicitCastExpr, IntegralCast, int);"
40;node;;main.c;radio_control_task;299;7;306;40;0;0;1;pprz_mode_update,ir_estim_mode_update,inflight_calib_mode_update;38,39;" pprz_mode_update(); bool_t pprz_mode_changed = pprz_mode_update();; mode_changed |= pprz_mode_changed; ir_estim_mode_update(); mode_changed |= [B40.4]; inflight_calib_mode_update(); calib_mode_changed = [B40.6]; calib_mode_changed (ImplicitCastExpr, IntegralCast, int);"
41;node;;main.c;radio_control_task;298;9;0;0;0;0;0;;40,37;" (*(volatile uint8_t *)(((uint16_t)&(from_fbw.status)))) & (1 << (2));"
42;node;;main.c;radio_control_task;295;7;296;26;0;0;0;;41;" pprz_mode = 3; mode_changed = (!0);"
43;node;;main.c;radio_control_task;294;128;294;145;0;0;0;;42,41;" too_far_from_home (ImplicitCastExpr, IntegralCast, int);"
44;node;;main.c;radio_control_task;294;93;294;122;0;0;0;;42,43;" pprz_mode == 0;"
45;node;;main.c;radio_control_task;294;61;294;89;0;0;0;;42,44;" pprz_mode == 1;"
46;node;;main.c;radio_control_task;292;5;293;23;0;0;1;copy_from_to_fbw;45,43;" uint8_t mode_changed = 0;; copy_from_to_fbw(); (*(volatile uint8_t *)(((uint16_t)&(from_fbw.status)))) & (1 << (1));"
47;node;;main.c;radio_control_task;290;3;291;29;0;0;0;;46,0;" bool_t calib_mode_changed;; link_fbw_receive_valid (ImplicitCastExpr, LValueToRValue, uint8_t);"
48;entry;;main.c;radio_control_task;289;34;289;34;0;0;0;;47;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;receive_gps_data_task;488;1;488;1;0;0;0;;;""
1;node;;main.c;receive_gps_data_task;485;3;486;28;0;0;1;use_gps_pos;0;" use_gps_pos(); gps_pos_available = 0;"
2;node;;main.c;receive_gps_data_task;481;2;483;29;0;0;1;parse_gps_msg;1,0;" parse_gps_msg(); gps_msg_received = 0; gps_pos_available (ImplicitCastExpr, LValueToRValue, bool_t);"
3;entry;;main.c;receive_gps_data_task;480;2;480;2;0;0;0;;2;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;reporting_task;276;1;276;1;0;0;0;;;""
1;node;;main.c;reporting_task;274;5;0;0;0;0;0;;0;" modem_nb_ovrn++;"
2;node;;main.c;reporting_task;274;5;0;0;0;0;0;;0;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
3;node;;main.c;reporting_task;274;5;0;0;0;0;0;;2;" tx_tail = 0;"
4;node;;main.c;reporting_task;274;5;0;0;0;0;0;;3,2;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
5;node;;main.c;reporting_task;274;5;0;0;0;0;0;;4,0;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
6;node;;main.c;reporting_task;274;5;0;0;0;0;0;;5;" tx_head = 0;"
7;node;;main.c;reporting_task;274;5;0;0;0;0;0;;6,5;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
8;node;;main.c;reporting_task;274;5;0;0;0;0;0;;7;" tx_head = 0;"
9;node;;main.c;reporting_task;274;5;0;0;0;0;0;;8,7;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
10;node;;main.c;reporting_task;274;5;0;0;0;0;0;;9;" tx_head = 0;"
11;node;;main.c;reporting_task;274;5;0;0;0;0;0;;10,9;" tx_buf[tx_head] = *((uint8_t *)(&utm_north0) + 3); ck_a += *((uint8_t *)(&utm_north0) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
12;node;;main.c;reporting_task;274;5;0;0;0;0;0;;11;" tx_head = 0;"
13;node;;main.c;reporting_task;274;5;0;0;0;0;0;;12,11;" tx_buf[tx_head] = *((uint8_t *)(&utm_north0) + 2); ck_a += *((uint8_t *)(&utm_north0) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
14;node;;main.c;reporting_task;274;5;0;0;0;0;0;;13;" tx_head = 0;"
15;node;;main.c;reporting_task;274;5;0;0;0;0;0;;14,13;" tx_buf[tx_head] = *((uint8_t *)(&utm_north0) + 1); ck_a += *((uint8_t *)(&utm_north0) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
16;node;;main.c;reporting_task;274;5;0;0;0;0;0;;15;" tx_head = 0;"
17;node;;main.c;reporting_task;274;5;0;0;0;0;0;;16,15;" tx_buf[tx_head] = *((uint8_t *)(&utm_north0)); ck_a += *((uint8_t *)(&utm_north0)); ck_b += ck_a; tx_head++; tx_head >= 255;"
18;node;;main.c;reporting_task;274;5;0;0;0;0;0;;17;" tx_head = 0;"
19;node;;main.c;reporting_task;274;5;0;0;0;0;0;;18,17;" tx_buf[tx_head] = *((uint8_t *)(&utm_east0) + 3); ck_a += *((uint8_t *)(&utm_east0) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
20;node;;main.c;reporting_task;274;5;0;0;0;0;0;;19;" tx_head = 0;"
21;node;;main.c;reporting_task;274;5;0;0;0;0;0;;20,19;" tx_buf[tx_head] = *((uint8_t *)(&utm_east0) + 2); ck_a += *((uint8_t *)(&utm_east0) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
22;node;;main.c;reporting_task;274;5;0;0;0;0;0;;21;" tx_head = 0;"
23;node;;main.c;reporting_task;274;5;0;0;0;0;0;;22,21;" tx_buf[tx_head] = *((uint8_t *)(&utm_east0) + 1); ck_a += *((uint8_t *)(&utm_east0) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
24;node;;main.c;reporting_task;274;5;0;0;0;0;0;;23;" tx_head = 0;"
25;node;;main.c;reporting_task;274;5;0;0;0;0;0;;24,23;" ck_a = 9; ck_b = 9; tx_buf[tx_head] = *((uint8_t *)(&utm_east0)); ck_a += *((uint8_t *)(&utm_east0)); ck_b += ck_a; tx_head++; tx_head >= 255;"
26;node;;main.c;reporting_task;274;5;0;0;0;0;0;;25;" tx_head = 0;"
27;node;;main.c;reporting_task;274;5;0;0;0;0;0;;26,25;" tx_buf[tx_head] = 9; tx_head++; tx_head >= 255;"
28;node;;main.c;reporting_task;274;5;0;0;0;0;0;;27;" tx_head = 0;"
29;node;;main.c;reporting_task;274;5;0;0;0;0;0;;28,27;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
30;node;;main.c;reporting_task;274;5;0;0;0;0;0;;29,1;" [B33.1] ? [B31.1] : [B32.1];"
31;node;;main.c;reporting_task;274;5;0;0;0;0;0;;30;" 12 < (255 - (tx_head - tx_tail));"
32;node;;main.c;reporting_task;274;5;0;0;0;0;0;;30;" 12 < (tx_tail - tx_head);"
33;node;;main.c;reporting_task;274;5;0;0;0;0;0;;31,32;" tx_head >= tx_tail;"
34;node;;main.c;reporting_task;274;5;0;0;0;0;0;;33,0;" i % 100 == 49;"
35;node;;main.c;reporting_task;274;5;0;0;0;0;0;;34;" modem_nb_ovrn++;"
36;node;;main.c;reporting_task;274;5;0;0;0;0;0;;34;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
37;node;;main.c;reporting_task;274;5;0;0;0;0;0;;36;" tx_tail = 0;"
38;node;;main.c;reporting_task;274;5;0;0;0;0;0;;37,36;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
39;node;;main.c;reporting_task;274;5;0;0;0;0;0;;38,34;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
40;node;;main.c;reporting_task;274;5;0;0;0;0;0;;39;" tx_head = 0;"
41;node;;main.c;reporting_task;274;5;0;0;0;0;0;;40,39;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
42;node;;main.c;reporting_task;274;5;0;0;0;0;0;;41;" tx_head = 0;"
43;node;;main.c;reporting_task;274;5;0;0;0;0;0;;42,41;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
44;node;;main.c;reporting_task;274;5;0;0;0;0;0;;43;" tx_head = 0;"
45;node;;main.c;reporting_task;274;5;0;0;0;0;0;;44,43;" tx_buf[tx_head] = *((uint8_t *)(&mcu1_ppm_cpt)); ck_a += *((uint8_t *)(&mcu1_ppm_cpt)); ck_b += ck_a; tx_head++; tx_head >= 255;"
46;node;;main.c;reporting_task;274;5;0;0;0;0;0;;45;" tx_head = 0;"
47;node;;main.c;reporting_task;274;5;0;0;0;0;0;;46,45;" tx_buf[tx_head] = *((uint8_t *)(&gps_nb_ovrn)); ck_a += *((uint8_t *)(&gps_nb_ovrn)); ck_b += ck_a; tx_head++; tx_head >= 255;"
48;node;;main.c;reporting_task;274;5;0;0;0;0;0;;47;" tx_head = 0;"
49;node;;main.c;reporting_task;274;5;0;0;0;0;0;;48,47;" tx_buf[tx_head] = *((uint8_t *)(&modem_nb_ovrn)); ck_a += *((uint8_t *)(&modem_nb_ovrn)); ck_b += ck_a; tx_head++; tx_head >= 255;"
50;node;;main.c;reporting_task;274;5;0;0;0;0;0;;49;" tx_head = 0;"
51;node;;main.c;reporting_task;274;5;0;0;0;0;0;;50,49;" tx_buf[tx_head] = *((uint8_t *)(&link_fbw_fbw_nb_err)); ck_a += *((uint8_t *)(&link_fbw_fbw_nb_err)); ck_b += ck_a; tx_head++; tx_head >= 255;"
52;node;;main.c;reporting_task;274;5;0;0;0;0;0;;51;" tx_head = 0;"
53;node;;main.c;reporting_task;274;5;0;0;0;0;0;;52,51;" ck_a = 13; ck_b = 13; tx_buf[tx_head] = *((uint8_t *)(&link_fbw_nb_err)); ck_a += *((uint8_t *)(&link_fbw_nb_err)); ck_b += ck_a; tx_head++; tx_head >= 255;"
54;node;;main.c;reporting_task;274;5;0;0;0;0;0;;53;" tx_head = 0;"
55;node;;main.c;reporting_task;274;5;0;0;0;0;0;;54,53;" tx_buf[tx_head] = 13; tx_head++; tx_head >= 255;"
56;node;;main.c;reporting_task;274;5;0;0;0;0;0;;55;" tx_head = 0;"
57;node;;main.c;reporting_task;274;5;0;0;0;0;0;;56,55;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
58;node;;main.c;reporting_task;274;5;0;0;0;0;0;;57,35;" [B61.1] ? [B59.1] : [B60.1];"
59;node;;main.c;reporting_task;274;5;0;0;0;0;0;;58;" 9 < (255 - (tx_head - tx_tail));"
60;node;;main.c;reporting_task;274;5;0;0;0;0;0;;58;" 9 < (tx_tail - tx_head);"
61;node;;main.c;reporting_task;274;5;0;0;0;0;0;;59,60;" tx_head >= tx_tail;"
62;node;;main.c;reporting_task;274;5;0;0;0;0;0;;61,34;" i % 50 == 29;"
63;node;;main.c;reporting_task;274;5;0;0;0;0;0;;62;" modem_nb_ovrn++;"
64;node;;main.c;reporting_task;274;5;0;0;0;0;0;;62;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
65;node;;main.c;reporting_task;274;5;0;0;0;0;0;;64;" tx_tail = 0;"
66;node;;main.c;reporting_task;274;5;0;0;0;0;0;;65,64;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
67;node;;main.c;reporting_task;274;5;0;0;0;0;0;;66,62;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
68;node;;main.c;reporting_task;274;5;0;0;0;0;0;;67;" tx_head = 0;"
69;node;;main.c;reporting_task;274;5;0;0;0;0;0;;68,67;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
70;node;;main.c;reporting_task;274;5;0;0;0;0;0;;69;" tx_head = 0;"
71;node;;main.c;reporting_task;274;5;0;0;0;0;0;;70,69;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
72;node;;main.c;reporting_task;274;5;0;0;0;0;0;;71;" tx_head = 0;"
73;node;;main.c;reporting_task;274;5;0;0;0;0;0;;72,71;" tx_buf[tx_head] = *((uint8_t *)(&ir_estim_mode)); ck_a += *((uint8_t *)(&ir_estim_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
74;node;;main.c;reporting_task;274;5;0;0;0;0;0;;73;" tx_head = 0;"
75;node;;main.c;reporting_task;274;5;0;0;0;0;0;;74,73;" tx_buf[tx_head] = *((uint8_t *)(&mcu1_status)); ck_a += *((uint8_t *)(&mcu1_status)); ck_b += ck_a; tx_head++; tx_head >= 255;"
76;node;;main.c;reporting_task;274;5;0;0;0;0;0;;75;" tx_head = 0;"
77;node;;main.c;reporting_task;274;5;0;0;0;0;0;;76,75;" tx_buf[tx_head] = *((uint8_t *)(&inflight_calib_mode)); ck_a += *((uint8_t *)(&inflight_calib_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
78;node;;main.c;reporting_task;274;5;0;0;0;0;0;;77;" tx_head = 0;"
79;node;;main.c;reporting_task;274;5;0;0;0;0;0;;78,77;" tx_buf[tx_head] = *((uint8_t *)(&vertical_mode)); ck_a += *((uint8_t *)(&vertical_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
80;node;;main.c;reporting_task;274;5;0;0;0;0;0;;79;" tx_head = 0;"
81;node;;main.c;reporting_task;274;5;0;0;0;0;0;;80,79;" ck_a = 11; ck_b = 11; tx_buf[tx_head] = *((uint8_t *)(&pprz_mode)); ck_a += *((uint8_t *)(&pprz_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
82;node;;main.c;reporting_task;274;5;0;0;0;0;0;;81;" tx_head = 0;"
83;node;;main.c;reporting_task;274;5;0;0;0;0;0;;82,81;" tx_buf[tx_head] = 11; tx_head++; tx_head >= 255;"
84;node;;main.c;reporting_task;274;5;0;0;0;0;0;;83;" tx_head = 0;"
85;node;;main.c;reporting_task;274;5;0;0;0;0;0;;84,83;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
86;node;;main.c;reporting_task;274;5;0;0;0;0;0;;85,63;" [B89.1] ? [B87.1] : [B88.1];"
87;node;;main.c;reporting_task;274;5;0;0;0;0;0;;86;" 9 < (255 - (tx_head - tx_tail));"
88;node;;main.c;reporting_task;274;5;0;0;0;0;0;;86;" 9 < (tx_tail - tx_head);"
89;node;;main.c;reporting_task;274;5;0;0;0;0;0;;87,88;" tx_head >= tx_tail;"
90;node;;main.c;reporting_task;274;5;0;0;0;0;0;;89,62;" i % 50 == 9;"
91;node;;main.c;reporting_task;274;5;0;0;0;0;0;;90;" modem_nb_ovrn++;"
92;node;;main.c;reporting_task;274;5;0;0;0;0;0;;90;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
93;node;;main.c;reporting_task;274;5;0;0;0;0;0;;92;" tx_tail = 0;"
94;node;;main.c;reporting_task;274;5;0;0;0;0;0;;93,92;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
95;node;;main.c;reporting_task;274;5;0;0;0;0;0;;94,90;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
96;node;;main.c;reporting_task;274;5;0;0;0;0;0;;95;" tx_head = 0;"
97;node;;main.c;reporting_task;274;5;0;0;0;0;0;;96,95;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
98;node;;main.c;reporting_task;274;5;0;0;0;0;0;;97;" tx_head = 0;"
99;node;;main.c;reporting_task;274;5;0;0;0;0;0;;98,97;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
100;node;;main.c;reporting_task;274;5;0;0;0;0;0;;99;" tx_head = 0;"
101;node;;main.c;reporting_task;274;5;0;0;0;0;0;;100,99;" tx_buf[tx_head] = *((uint8_t *)(&climb_pgain) + 3); ck_a += *((uint8_t *)(&climb_pgain) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
102;node;;main.c;reporting_task;274;5;0;0;0;0;0;;101;" tx_head = 0;"
103;node;;main.c;reporting_task;274;5;0;0;0;0;0;;102,101;" tx_buf[tx_head] = *((uint8_t *)(&climb_pgain) + 2); ck_a += *((uint8_t *)(&climb_pgain) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
104;node;;main.c;reporting_task;274;5;0;0;0;0;0;;103;" tx_head = 0;"
105;node;;main.c;reporting_task;274;5;0;0;0;0;0;;104,103;" tx_buf[tx_head] = *((uint8_t *)(&climb_pgain) + 1); ck_a += *((uint8_t *)(&climb_pgain) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
106;node;;main.c;reporting_task;274;5;0;0;0;0;0;;105;" tx_head = 0;"
107;node;;main.c;reporting_task;274;5;0;0;0;0;0;;106,105;" tx_buf[tx_head] = *((uint8_t *)(&climb_pgain)); ck_a += *((uint8_t *)(&climb_pgain)); ck_b += ck_a; tx_head++; tx_head >= 255;"
108;node;;main.c;reporting_task;274;5;0;0;0;0;0;;107;" tx_head = 0;"
109;node;;main.c;reporting_task;274;5;0;0;0;0;0;;108,107;" tx_buf[tx_head] = *((uint8_t *)(&climb_sum_err) + 3); ck_a += *((uint8_t *)(&climb_sum_err) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
110;node;;main.c;reporting_task;274;5;0;0;0;0;0;;109;" tx_head = 0;"
111;node;;main.c;reporting_task;274;5;0;0;0;0;0;;110,109;" tx_buf[tx_head] = *((uint8_t *)(&climb_sum_err) + 2); ck_a += *((uint8_t *)(&climb_sum_err) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
112;node;;main.c;reporting_task;274;5;0;0;0;0;0;;111;" tx_head = 0;"
113;node;;main.c;reporting_task;274;5;0;0;0;0;0;;112,111;" tx_buf[tx_head] = *((uint8_t *)(&climb_sum_err) + 1); ck_a += *((uint8_t *)(&climb_sum_err) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
114;node;;main.c;reporting_task;274;5;0;0;0;0;0;;113;" tx_head = 0;"
115;node;;main.c;reporting_task;274;5;0;0;0;0;0;;114,113;" tx_buf[tx_head] = *((uint8_t *)(&climb_sum_err)); ck_a += *((uint8_t *)(&climb_sum_err)); ck_b += ck_a; tx_head++; tx_head >= 255;"
116;node;;main.c;reporting_task;274;5;0;0;0;0;0;;115;" tx_head = 0;"
117;node;;main.c;reporting_task;274;5;0;0;0;0;0;;116,115;" tx_buf[tx_head] = *((uint8_t *)(&desired_climb) + 3); ck_a += *((uint8_t *)(&desired_climb) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
118;node;;main.c;reporting_task;274;5;0;0;0;0;0;;117;" tx_head = 0;"
119;node;;main.c;reporting_task;274;5;0;0;0;0;0;;118,117;" tx_buf[tx_head] = *((uint8_t *)(&desired_climb) + 2); ck_a += *((uint8_t *)(&desired_climb) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
120;node;;main.c;reporting_task;274;5;0;0;0;0;0;;119;" tx_head = 0;"
121;node;;main.c;reporting_task;274;5;0;0;0;0;0;;120,119;" tx_buf[tx_head] = *((uint8_t *)(&desired_climb) + 1); ck_a += *((uint8_t *)(&desired_climb) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
122;node;;main.c;reporting_task;274;5;0;0;0;0;0;;121;" tx_head = 0;"
123;node;;main.c;reporting_task;274;5;0;0;0;0;0;;122,121;" tx_buf[tx_head] = *((uint8_t *)(&desired_climb)); ck_a += *((uint8_t *)(&desired_climb)); ck_b += ck_a; tx_head++; tx_head >= 255;"
124;node;;main.c;reporting_task;274;5;0;0;0;0;0;;123;" tx_head = 0;"
125;node;;main.c;reporting_task;274;5;0;0;0;0;0;;124,123;" tx_buf[tx_head] = *((uint8_t *)(&desired_gaz) + 1); ck_a += *((uint8_t *)(&desired_gaz) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
126;node;;main.c;reporting_task;274;5;0;0;0;0;0;;125;" tx_head = 0;"
127;node;;main.c;reporting_task;274;5;0;0;0;0;0;;126,125;" ck_a = 14; ck_b = 14; tx_buf[tx_head] = *((uint8_t *)(&desired_gaz)); ck_a += *((uint8_t *)(&desired_gaz)); ck_b += ck_a; tx_head++; tx_head >= 255;"
128;node;;main.c;reporting_task;274;5;0;0;0;0;0;;127;" tx_head = 0;"
129;node;;main.c;reporting_task;274;5;0;0;0;0;0;;128,127;" tx_buf[tx_head] = 14; tx_head++; tx_head >= 255;"
130;node;;main.c;reporting_task;274;5;0;0;0;0;0;;129;" tx_head = 0;"
131;node;;main.c;reporting_task;274;5;0;0;0;0;0;;130,129;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
132;node;;main.c;reporting_task;274;5;0;0;0;0;0;;131,91;" [B135.1] ? [B133.1] : [B134.1];"
133;node;;main.c;reporting_task;274;5;0;0;0;0;0;;132;" 18 < (255 - (tx_head - tx_tail));"
134;node;;main.c;reporting_task;274;5;0;0;0;0;0;;132;" 18 < (tx_tail - tx_head);"
135;node;;main.c;reporting_task;274;5;0;0;0;0;0;;133,134;" tx_head >= tx_tail;"
136;node;;main.c;reporting_task;274;5;0;0;0;0;0;;135,90;" i % 20 == 18;"
137;node;;main.c;reporting_task;274;5;0;0;0;0;0;;136;" modem_nb_ovrn++;"
138;node;;main.c;reporting_task;274;5;0;0;0;0;0;;136;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
139;node;;main.c;reporting_task;274;5;0;0;0;0;0;;138;" tx_tail = 0;"
140;node;;main.c;reporting_task;274;5;0;0;0;0;0;;139,138;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
141;node;;main.c;reporting_task;274;5;0;0;0;0;0;;140,136;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
142;node;;main.c;reporting_task;274;5;0;0;0;0;0;;141;" tx_head = 0;"
143;node;;main.c;reporting_task;274;5;0;0;0;0;0;;142,141;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
144;node;;main.c;reporting_task;274;5;0;0;0;0;0;;143;" tx_head = 0;"
145;node;;main.c;reporting_task;274;5;0;0;0;0;0;;144,143;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
146;node;;main.c;reporting_task;274;5;0;0;0;0;0;;145;" tx_head = 0;"
147;node;;main.c;reporting_task;274;5;0;0;0;0;0;;146,145;" tx_buf[tx_head] = *((uint8_t *)(&stage_time) + 1); ck_a += *((uint8_t *)(&stage_time) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
148;node;;main.c;reporting_task;274;5;0;0;0;0;0;;147;" tx_head = 0;"
149;node;;main.c;reporting_task;274;5;0;0;0;0;0;;148,147;" tx_buf[tx_head] = *((uint8_t *)(&stage_time)); ck_a += *((uint8_t *)(&stage_time)); ck_b += ck_a; tx_head++; tx_head >= 255;"
150;node;;main.c;reporting_task;274;5;0;0;0;0;0;;149;" tx_head = 0;"
151;node;;main.c;reporting_task;274;5;0;0;0;0;0;;150,149;" tx_buf[tx_head] = *((uint8_t *)(&block_time) + 1); ck_a += *((uint8_t *)(&block_time) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
152;node;;main.c;reporting_task;274;5;0;0;0;0;0;;151;" tx_head = 0;"
153;node;;main.c;reporting_task;274;5;0;0;0;0;0;;152,151;" tx_buf[tx_head] = *((uint8_t *)(&block_time)); ck_a += *((uint8_t *)(&block_time)); ck_b += ck_a; tx_head++; tx_head >= 255;"
154;node;;main.c;reporting_task;274;5;0;0;0;0;0;;153;" tx_head = 0;"
155;node;;main.c;reporting_task;274;5;0;0;0;0;0;;154,153;" tx_buf[tx_head] = *((uint8_t *)(&low_battery)); ck_a += *((uint8_t *)(&low_battery)); ck_b += ck_a; tx_head++; tx_head >= 255;"
156;node;;main.c;reporting_task;274;5;0;0;0;0;0;;155;" tx_head = 0;"
157;node;;main.c;reporting_task;274;5;0;0;0;0;0;;156,155;" tx_buf[tx_head] = *((uint8_t *)(&estimator_flight_time) + 1); ck_a += *((uint8_t *)(&estimator_flight_time) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
158;node;;main.c;reporting_task;274;5;0;0;0;0;0;;157;" tx_head = 0;"
159;node;;main.c;reporting_task;274;5;0;0;0;0;0;;158,157;" tx_buf[tx_head] = *((uint8_t *)(&estimator_flight_time)); ck_a += *((uint8_t *)(&estimator_flight_time)); ck_b += ck_a; tx_head++; tx_head >= 255;"
160;node;;main.c;reporting_task;274;5;0;0;0;0;0;;159;" tx_head = 0;"
161;node;;main.c;reporting_task;274;5;0;0;0;0;0;;160,159;" ck_a = 12; ck_b = 12; tx_buf[tx_head] = *((uint8_t *)(&vsupply)); ck_a += *((uint8_t *)(&vsupply)); ck_b += ck_a; tx_head++; tx_head >= 255;"
162;node;;main.c;reporting_task;274;5;0;0;0;0;0;;161;" tx_head = 0;"
163;node;;main.c;reporting_task;274;5;0;0;0;0;0;;162,161;" tx_buf[tx_head] = 12; tx_head++; tx_head >= 255;"
164;node;;main.c;reporting_task;274;5;0;0;0;0;0;;163;" tx_head = 0;"
165;node;;main.c;reporting_task;274;5;0;0;0;0;0;;164,163;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
166;node;;main.c;reporting_task;274;5;0;0;0;0;0;;165,137;" [B169.1] ? [B167.1] : [B168.1];"
167;node;;main.c;reporting_task;274;5;0;0;0;0;0;;166;" 12 < (255 - (tx_head - tx_tail));"
168;node;;main.c;reporting_task;274;5;0;0;0;0;0;;166;" 12 < (tx_tail - tx_head);"
169;node;;main.c;reporting_task;274;5;0;0;0;0;0;;167,168;" tx_head >= tx_tail;"
170;node;;main.c;reporting_task;274;5;0;0;0;0;0;;169,136;" i % 20 == 8;"
171;node;;main.c;reporting_task;274;5;0;0;0;0;0;;170;" modem_nb_ovrn++;"
172;node;;main.c;reporting_task;274;5;0;0;0;0;0;;170;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
173;node;;main.c;reporting_task;274;5;0;0;0;0;0;;172;" tx_tail = 0;"
174;node;;main.c;reporting_task;274;5;0;0;0;0;0;;173,172;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
175;node;;main.c;reporting_task;274;5;0;0;0;0;0;;174,170;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
176;node;;main.c;reporting_task;274;5;0;0;0;0;0;;175;" tx_head = 0;"
177;node;;main.c;reporting_task;274;5;0;0;0;0;0;;176,175;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
178;node;;main.c;reporting_task;274;5;0;0;0;0;0;;177;" tx_head = 0;"
179;node;;main.c;reporting_task;274;5;0;0;0;0;0;;178,177;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
180;node;;main.c;reporting_task;274;5;0;0;0;0;0;;179;" tx_head = 0;"
181;node;;main.c;reporting_task;274;5;0;0;0;0;0;;180,179;" tx_buf[tx_head] = *((uint8_t *)(&desired_altitude) + 3); ck_a += *((uint8_t *)(&desired_altitude) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
182;node;;main.c;reporting_task;274;5;0;0;0;0;0;;181;" tx_head = 0;"
183;node;;main.c;reporting_task;274;5;0;0;0;0;0;;182,181;" tx_buf[tx_head] = *((uint8_t *)(&desired_altitude) + 2); ck_a += *((uint8_t *)(&desired_altitude) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
184;node;;main.c;reporting_task;274;5;0;0;0;0;0;;183;" tx_head = 0;"
185;node;;main.c;reporting_task;274;5;0;0;0;0;0;;184,183;" tx_buf[tx_head] = *((uint8_t *)(&desired_altitude) + 1); ck_a += *((uint8_t *)(&desired_altitude) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
186;node;;main.c;reporting_task;274;5;0;0;0;0;0;;185;" tx_head = 0;"
187;node;;main.c;reporting_task;274;5;0;0;0;0;0;;186,185;" tx_buf[tx_head] = *((uint8_t *)(&desired_altitude)); ck_a += *((uint8_t *)(&desired_altitude)); ck_b += ck_a; tx_head++; tx_head >= 255;"
188;node;;main.c;reporting_task;274;5;0;0;0;0;0;;187;" tx_head = 0;"
189;node;;main.c;reporting_task;274;5;0;0;0;0;0;;188,187;" tx_buf[tx_head] = *((uint8_t *)(&desired_y) + 3); ck_a += *((uint8_t *)(&desired_y) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
190;node;;main.c;reporting_task;274;5;0;0;0;0;0;;189;" tx_head = 0;"
191;node;;main.c;reporting_task;274;5;0;0;0;0;0;;190,189;" tx_buf[tx_head] = *((uint8_t *)(&desired_y) + 2); ck_a += *((uint8_t *)(&desired_y) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
192;node;;main.c;reporting_task;274;5;0;0;0;0;0;;191;" tx_head = 0;"
193;node;;main.c;reporting_task;274;5;0;0;0;0;0;;192,191;" tx_buf[tx_head] = *((uint8_t *)(&desired_y) + 1); ck_a += *((uint8_t *)(&desired_y) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
194;node;;main.c;reporting_task;274;5;0;0;0;0;0;;193;" tx_head = 0;"
195;node;;main.c;reporting_task;274;5;0;0;0;0;0;;194,193;" tx_buf[tx_head] = *((uint8_t *)(&desired_y)); ck_a += *((uint8_t *)(&desired_y)); ck_b += ck_a; tx_head++; tx_head >= 255;"
196;node;;main.c;reporting_task;274;5;0;0;0;0;0;;195;" tx_head = 0;"
197;node;;main.c;reporting_task;274;5;0;0;0;0;0;;196,195;" tx_buf[tx_head] = *((uint8_t *)(&desired_x) + 3); ck_a += *((uint8_t *)(&desired_x) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
198;node;;main.c;reporting_task;274;5;0;0;0;0;0;;197;" tx_head = 0;"
199;node;;main.c;reporting_task;274;5;0;0;0;0;0;;198,197;" tx_buf[tx_head] = *((uint8_t *)(&desired_x) + 2); ck_a += *((uint8_t *)(&desired_x) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
200;node;;main.c;reporting_task;274;5;0;0;0;0;0;;199;" tx_head = 0;"
201;node;;main.c;reporting_task;274;5;0;0;0;0;0;;200,199;" tx_buf[tx_head] = *((uint8_t *)(&desired_x) + 1); ck_a += *((uint8_t *)(&desired_x) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
202;node;;main.c;reporting_task;274;5;0;0;0;0;0;;201;" tx_head = 0;"
203;node;;main.c;reporting_task;274;5;0;0;0;0;0;;202,201;" tx_buf[tx_head] = *((uint8_t *)(&desired_x)); ck_a += *((uint8_t *)(&desired_x)); ck_b += ck_a; tx_head++; tx_head >= 255;"
204;node;;main.c;reporting_task;274;5;0;0;0;0;0;;203;" tx_head = 0;"
205;node;;main.c;reporting_task;274;5;0;0;0;0;0;;204,203;" tx_buf[tx_head] = *((uint8_t *)(&desired_pitch) + 3); ck_a += *((uint8_t *)(&desired_pitch) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
206;node;;main.c;reporting_task;274;5;0;0;0;0;0;;205;" tx_head = 0;"
207;node;;main.c;reporting_task;274;5;0;0;0;0;0;;206,205;" tx_buf[tx_head] = *((uint8_t *)(&desired_pitch) + 2); ck_a += *((uint8_t *)(&desired_pitch) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
208;node;;main.c;reporting_task;274;5;0;0;0;0;0;;207;" tx_head = 0;"
209;node;;main.c;reporting_task;274;5;0;0;0;0;0;;208,207;" tx_buf[tx_head] = *((uint8_t *)(&desired_pitch) + 1); ck_a += *((uint8_t *)(&desired_pitch) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
210;node;;main.c;reporting_task;274;5;0;0;0;0;0;;209;" tx_head = 0;"
211;node;;main.c;reporting_task;274;5;0;0;0;0;0;;210,209;" tx_buf[tx_head] = *((uint8_t *)(&desired_pitch)); ck_a += *((uint8_t *)(&desired_pitch)); ck_b += ck_a; tx_head++; tx_head >= 255;"
212;node;;main.c;reporting_task;274;5;0;0;0;0;0;;211;" tx_head = 0;"
213;node;;main.c;reporting_task;274;5;0;0;0;0;0;;212,211;" tx_buf[tx_head] = *((uint8_t *)(&desired_roll) + 3); ck_a += *((uint8_t *)(&desired_roll) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
214;node;;main.c;reporting_task;274;5;0;0;0;0;0;;213;" tx_head = 0;"
215;node;;main.c;reporting_task;274;5;0;0;0;0;0;;214,213;" tx_buf[tx_head] = *((uint8_t *)(&desired_roll) + 2); ck_a += *((uint8_t *)(&desired_roll) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
216;node;;main.c;reporting_task;274;5;0;0;0;0;0;;215;" tx_head = 0;"
217;node;;main.c;reporting_task;274;5;0;0;0;0;0;;216,215;" tx_buf[tx_head] = *((uint8_t *)(&desired_roll) + 1); ck_a += *((uint8_t *)(&desired_roll) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
218;node;;main.c;reporting_task;274;5;0;0;0;0;0;;217;" tx_head = 0;"
219;node;;main.c;reporting_task;274;5;0;0;0;0;0;;218,217;" ck_a = 18; ck_b = 18; tx_buf[tx_head] = *((uint8_t *)(&desired_roll)); ck_a += *((uint8_t *)(&desired_roll)); ck_b += ck_a; tx_head++; tx_head >= 255;"
220;node;;main.c;reporting_task;274;5;0;0;0;0;0;;219;" tx_head = 0;"
221;node;;main.c;reporting_task;274;5;0;0;0;0;0;;220,219;" tx_buf[tx_head] = 18; tx_head++; tx_head >= 255;"
222;node;;main.c;reporting_task;274;5;0;0;0;0;0;;221;" tx_head = 0;"
223;node;;main.c;reporting_task;274;5;0;0;0;0;0;;222,221;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
224;node;;main.c;reporting_task;274;5;0;0;0;0;0;;223,171;" [B227.1] ? [B225.1] : [B226.1];"
225;node;;main.c;reporting_task;274;5;0;0;0;0;0;;224;" 24 < (255 - (tx_head - tx_tail));"
226;node;;main.c;reporting_task;274;5;0;0;0;0;0;;224;" 24 < (tx_tail - tx_head);"
227;node;;main.c;reporting_task;274;5;0;0;0;0;0;;225,226;" tx_head >= tx_tail;"
228;node;;main.c;reporting_task;274;5;0;0;0;0;0;;227,170;" i % 10 == 3;"
229;node;;main.c;reporting_task;274;5;0;0;0;0;0;;228;" modem_nb_ovrn++;"
230;node;;main.c;reporting_task;274;5;0;0;0;0;0;;228;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
231;node;;main.c;reporting_task;274;5;0;0;0;0;0;;230;" tx_tail = 0;"
232;node;;main.c;reporting_task;274;5;0;0;0;0;0;;231,230;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
233;node;;main.c;reporting_task;274;5;0;0;0;0;0;;232,228;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
234;node;;main.c;reporting_task;274;5;0;0;0;0;0;;233;" tx_head = 0;"
235;node;;main.c;reporting_task;274;5;0;0;0;0;0;;234,233;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
236;node;;main.c;reporting_task;274;5;0;0;0;0;0;;235;" tx_head = 0;"
237;node;;main.c;reporting_task;274;5;0;0;0;0;0;;236,235;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
238;node;;main.c;reporting_task;274;5;0;0;0;0;0;;237;" tx_head = 0;"
239;node;;main.c;reporting_task;274;5;0;0;0;0;0;;238,237;" tx_buf[tx_head] = *((uint8_t *)(&slider_2_val) + 3); ck_a += *((uint8_t *)(&slider_2_val) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
240;node;;main.c;reporting_task;274;5;0;0;0;0;0;;239;" tx_head = 0;"
241;node;;main.c;reporting_task;274;5;0;0;0;0;0;;240,239;" tx_buf[tx_head] = *((uint8_t *)(&slider_2_val) + 2); ck_a += *((uint8_t *)(&slider_2_val) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
242;node;;main.c;reporting_task;274;5;0;0;0;0;0;;241;" tx_head = 0;"
243;node;;main.c;reporting_task;274;5;0;0;0;0;0;;242,241;" tx_buf[tx_head] = *((uint8_t *)(&slider_2_val) + 1); ck_a += *((uint8_t *)(&slider_2_val) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
244;node;;main.c;reporting_task;274;5;0;0;0;0;0;;243;" tx_head = 0;"
245;node;;main.c;reporting_task;274;5;0;0;0;0;0;;244,243;" tx_buf[tx_head] = *((uint8_t *)(&slider_2_val)); ck_a += *((uint8_t *)(&slider_2_val)); ck_b += ck_a; tx_head++; tx_head >= 255;"
246;node;;main.c;reporting_task;274;5;0;0;0;0;0;;245;" tx_head = 0;"
247;node;;main.c;reporting_task;274;5;0;0;0;0;0;;246,245;" tx_buf[tx_head] = *((uint8_t *)(&slider_1_val) + 3); ck_a += *((uint8_t *)(&slider_1_val) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
248;node;;main.c;reporting_task;274;5;0;0;0;0;0;;247;" tx_head = 0;"
249;node;;main.c;reporting_task;274;5;0;0;0;0;0;;248,247;" tx_buf[tx_head] = *((uint8_t *)(&slider_1_val) + 2); ck_a += *((uint8_t *)(&slider_1_val) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
250;node;;main.c;reporting_task;274;5;0;0;0;0;0;;249;" tx_head = 0;"
251;node;;main.c;reporting_task;274;5;0;0;0;0;0;;250,249;" tx_buf[tx_head] = *((uint8_t *)(&slider_1_val) + 1); ck_a += *((uint8_t *)(&slider_1_val) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
252;node;;main.c;reporting_task;274;5;0;0;0;0;0;;251;" tx_head = 0;"
253;node;;main.c;reporting_task;274;5;0;0;0;0;0;;252,251;" tx_buf[tx_head] = *((uint8_t *)(&slider_1_val)); ck_a += *((uint8_t *)(&slider_1_val)); ck_b += ck_a; tx_head++; tx_head >= 255;"
254;node;;main.c;reporting_task;274;5;0;0;0;0;0;;253;" tx_head = 0;"
255;node;;main.c;reporting_task;274;5;0;0;0;0;0;;254,253;" ck_a = 17; ck_b = 17; tx_buf[tx_head] = *((uint8_t *)(&inflight_calib_mode)); ck_a += *((uint8_t *)(&inflight_calib_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
256;node;;main.c;reporting_task;274;5;0;0;0;0;0;;255;" tx_head = 0;"
257;node;;main.c;reporting_task;274;5;0;0;0;0;0;;256,255;" tx_buf[tx_head] = 17; tx_head++; tx_head >= 255;"
258;node;;main.c;reporting_task;274;5;0;0;0;0;0;;257;" tx_head = 0;"
259;node;;main.c;reporting_task;274;5;0;0;0;0;0;;258,257;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
260;node;;main.c;reporting_task;274;5;0;0;0;0;0;;259,229;" [B263.1] ? [B261.1] : [B262.1];"
261;node;;main.c;reporting_task;274;5;0;0;0;0;0;;260;" 13 < (255 - (tx_head - tx_tail));"
262;node;;main.c;reporting_task;274;5;0;0;0;0;0;;260;" 13 < (tx_tail - tx_head);"
263;node;;main.c;reporting_task;274;5;0;0;0;0;0;;261,262;" tx_head >= tx_tail;"
264;node;;main.c;reporting_task;274;5;0;0;0;0;0;;263,228;" inflight_calib_mode != 0;"
265;node;;main.c;reporting_task;274;5;0;0;0;0;0;;264,228;" i % 5 == 2;"
266;node;;main.c;reporting_task;274;5;0;0;0;0;0;;265;" modem_nb_ovrn++;"
267;node;;main.c;reporting_task;274;5;0;0;0;0;0;;265;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
268;node;;main.c;reporting_task;274;5;0;0;0;0;0;;267;" tx_tail = 0;"
269;node;;main.c;reporting_task;274;5;0;0;0;0;0;;268,267;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
270;node;;main.c;reporting_task;274;5;0;0;0;0;0;;269,265;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
271;node;;main.c;reporting_task;274;5;0;0;0;0;0;;270;" tx_head = 0;"
272;node;;main.c;reporting_task;274;5;0;0;0;0;0;;271,270;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
273;node;;main.c;reporting_task;274;5;0;0;0;0;0;;272;" tx_head = 0;"
274;node;;main.c;reporting_task;274;5;0;0;0;0;0;;273,272;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
275;node;;main.c;reporting_task;274;5;0;0;0;0;0;;274;" tx_head = 0;"
276;node;;main.c;reporting_task;274;5;0;0;0;0;0;;275,274;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch) + 1); ck_a += *((uint8_t *)(&ir_pitch) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
277;node;;main.c;reporting_task;274;5;0;0;0;0;0;;276;" tx_head = 0;"
278;node;;main.c;reporting_task;274;5;0;0;0;0;0;;277,276;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch)); ck_a += *((uint8_t *)(&ir_pitch)); ck_b += ck_a; tx_head++; tx_head >= 255;"
279;node;;main.c;reporting_task;274;5;0;0;0;0;0;;278;" tx_head = 0;"
280;node;;main.c;reporting_task;274;5;0;0;0;0;0;;279,278;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll) + 1); ck_a += *((uint8_t *)(&ir_roll) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
281;node;;main.c;reporting_task;274;5;0;0;0;0;0;;280;" tx_head = 0;"
282;node;;main.c;reporting_task;274;5;0;0;0;0;0;;281,280;" ck_a = 7; ck_b = 7; tx_buf[tx_head] = *((uint8_t *)(&ir_roll)); ck_a += *((uint8_t *)(&ir_roll)); ck_b += ck_a; tx_head++; tx_head >= 255;"
283;node;;main.c;reporting_task;274;5;0;0;0;0;0;;282;" tx_head = 0;"
284;node;;main.c;reporting_task;274;5;0;0;0;0;0;;283,282;" tx_buf[tx_head] = 7; tx_head++; tx_head >= 255;"
285;node;;main.c;reporting_task;274;5;0;0;0;0;0;;284;" tx_head = 0;"
286;node;;main.c;reporting_task;274;5;0;0;0;0;0;;285,284;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
287;node;;main.c;reporting_task;274;5;0;0;0;0;0;;286,266;" [B290.1] ? [B288.1] : [B289.1];"
288;node;;main.c;reporting_task;274;5;0;0;0;0;0;;287;" 8 < (255 - (tx_head - tx_tail));"
289;node;;main.c;reporting_task;274;5;0;0;0;0;0;;287;" 8 < (tx_tail - tx_head);"
290;node;;main.c;reporting_task;274;5;0;0;0;0;0;;288,289;" tx_head >= tx_tail;"
291;node;;main.c;reporting_task;274;5;0;0;0;0;0;;290,265;" i % 5 == 1;"
292;node;;main.c;reporting_task;274;5;0;0;0;0;0;;291;" modem_nb_ovrn++;"
293;node;;main.c;reporting_task;274;5;0;0;0;0;0;;291;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
294;node;;main.c;reporting_task;274;5;0;0;0;0;0;;293;" tx_tail = 0;"
295;node;;main.c;reporting_task;274;5;0;0;0;0;0;;294,293;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
296;node;;main.c;reporting_task;274;5;0;0;0;0;0;;295,291;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
297;node;;main.c;reporting_task;274;5;0;0;0;0;0;;296;" tx_head = 0;"
298;node;;main.c;reporting_task;274;5;0;0;0;0;0;;297,296;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
299;node;;main.c;reporting_task;274;5;0;0;0;0;0;;298;" tx_head = 0;"
300;node;;main.c;reporting_task;274;5;0;0;0;0;0;;299,298;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
301;node;;main.c;reporting_task;274;5;0;0;0;0;0;;300;" tx_head = 0;"
302;node;;main.c;reporting_task;274;5;0;0;0;0;0;;301,300;" tx_buf[tx_head] = *((uint8_t *)(&estimator_theta) + 3); ck_a += *((uint8_t *)(&estimator_theta) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
303;node;;main.c;reporting_task;274;5;0;0;0;0;0;;302;" tx_head = 0;"
304;node;;main.c;reporting_task;274;5;0;0;0;0;0;;303,302;" tx_buf[tx_head] = *((uint8_t *)(&estimator_theta) + 2); ck_a += *((uint8_t *)(&estimator_theta) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
305;node;;main.c;reporting_task;274;5;0;0;0;0;0;;304;" tx_head = 0;"
306;node;;main.c;reporting_task;274;5;0;0;0;0;0;;305,304;" tx_buf[tx_head] = *((uint8_t *)(&estimator_theta) + 1); ck_a += *((uint8_t *)(&estimator_theta) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
307;node;;main.c;reporting_task;274;5;0;0;0;0;0;;306;" tx_head = 0;"
308;node;;main.c;reporting_task;274;5;0;0;0;0;0;;307,306;" tx_buf[tx_head] = *((uint8_t *)(&estimator_theta)); ck_a += *((uint8_t *)(&estimator_theta)); ck_b += ck_a; tx_head++; tx_head >= 255;"
309;node;;main.c;reporting_task;274;5;0;0;0;0;0;;308;" tx_head = 0;"
310;node;;main.c;reporting_task;274;5;0;0;0;0;0;;309,308;" tx_buf[tx_head] = *((uint8_t *)(&estimator_psi) + 3); ck_a += *((uint8_t *)(&estimator_psi) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
311;node;;main.c;reporting_task;274;5;0;0;0;0;0;;310;" tx_head = 0;"
312;node;;main.c;reporting_task;274;5;0;0;0;0;0;;311,310;" tx_buf[tx_head] = *((uint8_t *)(&estimator_psi) + 2); ck_a += *((uint8_t *)(&estimator_psi) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
313;node;;main.c;reporting_task;274;5;0;0;0;0;0;;312;" tx_head = 0;"
314;node;;main.c;reporting_task;274;5;0;0;0;0;0;;313,312;" tx_buf[tx_head] = *((uint8_t *)(&estimator_psi) + 1); ck_a += *((uint8_t *)(&estimator_psi) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
315;node;;main.c;reporting_task;274;5;0;0;0;0;0;;314;" tx_head = 0;"
316;node;;main.c;reporting_task;274;5;0;0;0;0;0;;315,314;" tx_buf[tx_head] = *((uint8_t *)(&estimator_psi)); ck_a += *((uint8_t *)(&estimator_psi)); ck_b += ck_a; tx_head++; tx_head >= 255;"
317;node;;main.c;reporting_task;274;5;0;0;0;0;0;;316;" tx_head = 0;"
318;node;;main.c;reporting_task;274;5;0;0;0;0;0;;317,316;" tx_buf[tx_head] = *((uint8_t *)(&estimator_phi) + 3); ck_a += *((uint8_t *)(&estimator_phi) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
319;node;;main.c;reporting_task;274;5;0;0;0;0;0;;318;" tx_head = 0;"
320;node;;main.c;reporting_task;274;5;0;0;0;0;0;;319,318;" tx_buf[tx_head] = *((uint8_t *)(&estimator_phi) + 2); ck_a += *((uint8_t *)(&estimator_phi) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
321;node;;main.c;reporting_task;274;5;0;0;0;0;0;;320;" tx_head = 0;"
322;node;;main.c;reporting_task;274;5;0;0;0;0;0;;321,320;" tx_buf[tx_head] = *((uint8_t *)(&estimator_phi) + 1); ck_a += *((uint8_t *)(&estimator_phi) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
323;node;;main.c;reporting_task;274;5;0;0;0;0;0;;322;" tx_head = 0;"
324;node;;main.c;reporting_task;274;5;0;0;0;0;0;;323,322;" ck_a = 6; ck_b = 6; tx_buf[tx_head] = *((uint8_t *)(&estimator_phi)); ck_a += *((uint8_t *)(&estimator_phi)); ck_b += ck_a; tx_head++; tx_head >= 255;"
325;node;;main.c;reporting_task;274;5;0;0;0;0;0;;324;" tx_head = 0;"
326;node;;main.c;reporting_task;274;5;0;0;0;0;0;;325,324;" tx_buf[tx_head] = 6; tx_head++; tx_head >= 255;"
327;node;;main.c;reporting_task;274;5;0;0;0;0;0;;326;" tx_head = 0;"
328;node;;main.c;reporting_task;274;5;0;0;0;0;0;;327,326;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
329;node;;main.c;reporting_task;274;5;0;0;0;0;0;;328,292;" [B332.1] ? [B330.1] : [B331.1];"
330;node;;main.c;reporting_task;274;5;0;0;0;0;0;;329;" 16 < (255 - (tx_head - tx_tail));"
331;node;;main.c;reporting_task;274;5;0;0;0;0;0;;329;" 16 < (tx_tail - tx_head);"
332;node;;main.c;reporting_task;274;5;0;0;0;0;0;;330,331;" tx_head >= tx_tail;"
333;node;;main.c;reporting_task;274;5;0;0;0;0;0;;332,291;" i % 5 == 0;"
334;node;;main.c;reporting_task;274;5;0;0;0;0;0;;333;" i = 0;"
335;node;;main.c;reporting_task;274;5;0;0;0;0;0;;334,333;" static uint8_t i;; i++; i == 250;"
336;node;;main.c;reporting_task;270;7;270;19;0;0;0;;0;" boot = 0;"
337;node;;main.c;reporting_task;269;7;0;0;0;0;0;;336;" modem_nb_ovrn++;"
338;node;;main.c;reporting_task;269;7;0;0;0;0;0;;336;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
339;node;;main.c;reporting_task;269;7;0;0;0;0;0;;338;" tx_tail = 0;"
340;node;;main.c;reporting_task;269;7;0;0;0;0;0;;339,338;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
341;node;;main.c;reporting_task;269;7;0;0;0;0;0;;340,336;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
342;node;;main.c;reporting_task;269;7;0;0;0;0;0;;341;" tx_head = 0;"
343;node;;main.c;reporting_task;269;7;0;0;0;0;0;;342,341;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
344;node;;main.c;reporting_task;269;7;0;0;0;0;0;;343;" tx_head = 0;"
345;node;;main.c;reporting_task;269;7;0;0;0;0;0;;344,343;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
346;node;;main.c;reporting_task;269;7;0;0;0;0;0;;345;" tx_head = 0;"
347;node;;main.c;reporting_task;269;7;0;0;0;0;0;;346,345;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral) + 1); ck_a += *((uint8_t *)(&ir_pitch_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
348;node;;main.c;reporting_task;269;7;0;0;0;0;0;;347;" tx_head = 0;"
349;node;;main.c;reporting_task;269;7;0;0;0;0;0;;348,347;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral)); ck_a += *((uint8_t *)(&ir_pitch_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
350;node;;main.c;reporting_task;269;7;0;0;0;0;0;;349;" tx_head = 0;"
351;node;;main.c;reporting_task;269;7;0;0;0;0;0;;350,349;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral) + 1); ck_a += *((uint8_t *)(&ir_roll_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
352;node;;main.c;reporting_task;269;7;0;0;0;0;0;;351;" tx_head = 0;"
353;node;;main.c;reporting_task;269;7;0;0;0;0;0;;352,351;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral)); ck_a += *((uint8_t *)(&ir_roll_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
354;node;;main.c;reporting_task;269;7;0;0;0;0;0;;353;" tx_head = 0;"
355;node;;main.c;reporting_task;269;7;0;0;0;0;0;;354,353;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
356;node;;main.c;reporting_task;269;7;0;0;0;0;0;;355;" tx_head = 0;"
357;node;;main.c;reporting_task;269;7;0;0;0;0;0;;356,355;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
358;node;;main.c;reporting_task;269;7;0;0;0;0;0;;357;" tx_head = 0;"
359;node;;main.c;reporting_task;269;7;0;0;0;0;0;;358,357;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
360;node;;main.c;reporting_task;269;7;0;0;0;0;0;;359;" tx_head = 0;"
361;node;;main.c;reporting_task;269;7;0;0;0;0;0;;360,359;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir)); ck_a += *((uint8_t *)(&estimator_rad_of_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
362;node;;main.c;reporting_task;269;7;0;0;0;0;0;;361;" tx_head = 0;"
363;node;;main.c;reporting_task;269;7;0;0;0;0;0;;362,361;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 3); ck_a += *((uint8_t *)(&estimator_rad) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
364;node;;main.c;reporting_task;269;7;0;0;0;0;0;;363;" tx_head = 0;"
365;node;;main.c;reporting_task;269;7;0;0;0;0;0;;364,363;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 2); ck_a += *((uint8_t *)(&estimator_rad) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
366;node;;main.c;reporting_task;269;7;0;0;0;0;0;;365;" tx_head = 0;"
367;node;;main.c;reporting_task;269;7;0;0;0;0;0;;366,365;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 1); ck_a += *((uint8_t *)(&estimator_rad) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
368;node;;main.c;reporting_task;269;7;0;0;0;0;0;;367;" tx_head = 0;"
369;node;;main.c;reporting_task;269;7;0;0;0;0;0;;368,367;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad)); ck_a += *((uint8_t *)(&estimator_rad)); ck_b += ck_a; tx_head++; tx_head >= 255;"
370;node;;main.c;reporting_task;269;7;0;0;0;0;0;;369;" tx_head = 0;"
371;node;;main.c;reporting_task;269;7;0;0;0;0;0;;370,369;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 3); ck_a += *((uint8_t *)(&estimator_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
372;node;;main.c;reporting_task;269;7;0;0;0;0;0;;371;" tx_head = 0;"
373;node;;main.c;reporting_task;269;7;0;0;0;0;0;;372,371;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 2); ck_a += *((uint8_t *)(&estimator_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
374;node;;main.c;reporting_task;269;7;0;0;0;0;0;;373;" tx_head = 0;"
375;node;;main.c;reporting_task;269;7;0;0;0;0;0;;374,373;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 1); ck_a += *((uint8_t *)(&estimator_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
376;node;;main.c;reporting_task;269;7;0;0;0;0;0;;375;" tx_head = 0;"
377;node;;main.c;reporting_task;269;7;0;0;0;0;0;;376,375;" ck_a = 5; ck_b = 5; tx_buf[tx_head] = *((uint8_t *)(&estimator_ir)); ck_a += *((uint8_t *)(&estimator_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
378;node;;main.c;reporting_task;269;7;0;0;0;0;0;;377;" tx_head = 0;"
379;node;;main.c;reporting_task;269;7;0;0;0;0;0;;378,377;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
380;node;;main.c;reporting_task;269;7;0;0;0;0;0;;379;" tx_head = 0;"
381;node;;main.c;reporting_task;269;7;0;0;0;0;0;;380,379;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
382;node;;main.c;reporting_task;269;7;0;0;0;0;0;;381,337;" [B385.1] ? [B383.1] : [B384.1];"
383;node;;main.c;reporting_task;269;7;0;0;0;0;0;;382;" 20 < (255 - (tx_head - tx_tail));"
384;node;;main.c;reporting_task;269;7;0;0;0;0;0;;382;" 20 < (tx_tail - tx_head);"
385;node;;main.c;reporting_task;269;7;0;0;0;0;0;;383,384;" tx_head >= tx_tail;"
386;node;;main.c;reporting_task;268;7;0;0;0;0;0;;385;" modem_nb_ovrn++;"
387;node;;main.c;reporting_task;268;7;0;0;0;0;0;;385;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
388;node;;main.c;reporting_task;268;7;0;0;0;0;0;;387;" tx_tail = 0;"
389;node;;main.c;reporting_task;268;7;0;0;0;0;0;;388,387;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
390;node;;main.c;reporting_task;268;7;0;0;0;0;0;;389,385;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
391;node;;main.c;reporting_task;268;7;0;0;0;0;0;;390;" tx_head = 0;"
392;node;;main.c;reporting_task;268;7;0;0;0;0;0;;391,390;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
393;node;;main.c;reporting_task;268;7;0;0;0;0;0;;392;" tx_head = 0;"
394;node;;main.c;reporting_task;268;7;0;0;0;0;0;;393,392;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
395;node;;main.c;reporting_task;268;7;0;0;0;0;0;;394;" tx_head = 0;"
396;node;;main.c;reporting_task;268;7;0;0;0;0;0;;395,394;" tx_buf[tx_head] = *((uint8_t *)(&version) + 1); ck_a += *((uint8_t *)(&version) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
397;node;;main.c;reporting_task;268;7;0;0;0;0;0;;396;" tx_head = 0;"
398;node;;main.c;reporting_task;268;7;0;0;0;0;0;;397,396;" ck_a = 1; ck_b = 1; tx_buf[tx_head] = *((uint8_t *)(&version)); ck_a += *((uint8_t *)(&version)); ck_b += ck_a; tx_head++; tx_head >= 255;"
399;node;;main.c;reporting_task;268;7;0;0;0;0;0;;398;" tx_head = 0;"
400;node;;main.c;reporting_task;268;7;0;0;0;0;0;;399,398;" tx_buf[tx_head] = 1; tx_head++; tx_head >= 255;"
401;node;;main.c;reporting_task;268;7;0;0;0;0;0;;400;" tx_head = 0;"
402;node;;main.c;reporting_task;268;7;0;0;0;0;0;;401,400;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
403;node;;main.c;reporting_task;268;7;0;0;0;0;0;;402,386;" [B406.1] ? [B404.1] : [B405.1];"
404;node;;main.c;reporting_task;268;7;0;0;0;0;0;;403;" 6 < (255 - (tx_head - tx_tail));"
405;node;;main.c;reporting_task;268;7;0;0;0;0;0;;403;" 6 < (tx_tail - tx_head);"
406;node;;main.c;reporting_task;268;7;0;0;0;0;0;;404,405;" tx_head >= tx_tail;"
407;node;;main.c;reporting_task;264;3;267;11;0;0;0;;406,335;" static uint8_t boot = (!0);; boot (ImplicitCastExpr, LValueToRValue, uint8_t);"
408;entry;;main.c;reporting_task;263;30;263;30;0;0;0;;407;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;stabilisation_task;478;1;478;1;0;0;0;;;""
1;node;;main.c;stabilisation_task;477;5;477;77;0;0;0;;0;" [B7.7] ? [B2.1] : ([B3.1]); to_fbw.channels[5] = ([B1.1]);"
2;node;;main.c;stabilisation_task;477;36;0;0;0;0;0;;1;" -(600 * 16) (ImplicitCastExpr, IntegralToFloating, double);"
3;node;;main.c;stabilisation_task;477;36;0;0;0;0;0;;1;" [B6.1] ? [B4.1] : [B5.1];"
4;node;;main.c;stabilisation_task;477;36;0;0;0;0;0;;3;" (600 * 16) (ImplicitCastExpr, IntegralToFloating, double);"
5;node;;main.c;stabilisation_task;477;36;0;0;0;0;0;;3;" (600 * 16) / 0.75 * (-estimator_phi);"
6;node;;main.c;stabilisation_task;477;36;0;0;0;0;0;;4,5;" (600 * 16) / 0.75 * (-estimator_phi) > (600 * 16);"
7;node;;main.c;stabilisation_task;467;5;473;52;0;0;1;ir_update,estimator_update_state_infrared,roll_pitch_pid_run;2,6;" ir_update(); estimator_update_state_infrared(); roll_pitch_pid_run(); to_fbw.channels[0] = desired_gaz; to_fbw.channels[1] = desired_aileron; to_fbw.channels[2] = desired_elevator; (600 * 16) / 0.75 * (-estimator_phi) < -(600 * 16);"
8;entry;;main.c;stabilisation_task;466;2;466;2;0;0;0;;7;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;main.c;use_gps_pos;508;1;508;1;0;0;0;;;""
1;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;0;" modem_nb_ovrn++;"
2;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;0;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
3;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;2;" tx_tail = 0;"
4;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;3,2;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
5;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;4,0;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
6;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;5;" tx_head = 0;"
7;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;6,5;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
8;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;7;" tx_head = 0;"
9;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;8,7;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
10;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;9;" tx_head = 0;"
11;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;10,9;" tx_buf[tx_head] = *((uint8_t *)(&cputime) + 1); ck_a += *((uint8_t *)(&cputime) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
12;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;11;" tx_head = 0;"
13;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;12,11;" ck_a = 4; ck_b = 4; tx_buf[tx_head] = *((uint8_t *)(&cputime)); ck_a += *((uint8_t *)(&cputime)); ck_b += ck_a; tx_head++; tx_head >= 255;"
14;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;13;" tx_head = 0;"
15;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;14,13;" tx_buf[tx_head] = 4; tx_head++; tx_head >= 255;"
16;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;15;" tx_head = 0;"
17;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;16,15;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
18;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;17,1;" [B21.3] ? [B19.1] : [B20.1];"
19;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;18;" 6 < (255 - (tx_head - tx_tail));"
20;node;;main.c;use_gps_pos;506;5;0;0;0;0;0;;18;" 6 < (tx_tail - tx_head);"
21;node;;main.c;use_gps_pos;504;5;505;18;0;0;0;;19,20;" estimator_flight_time = 1; launch = (!0); tx_head >= tx_tail;"
22;node;;main.c;use_gps_pos;503;34;503;78;0;0;0;;21,0;" estimator_hspeed_mod > 5.;"
23;node;;main.c;use_gps_pos;503;7;503;29;0;0;0;;22,0;" !estimator_flight_time;"
24;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;23;" modem_nb_ovrn++;"
25;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;23;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
26;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;25;" tx_tail = 0;"
27;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;26,25;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
28;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;27,23;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
29;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;28;" tx_head = 0;"
30;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;29,28;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
31;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;30;" tx_head = 0;"
32;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;31,30;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
33;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;32;" tx_head = 0;"
34;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;33,32;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral) + 1); ck_a += *((uint8_t *)(&ir_pitch_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
35;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;34;" tx_head = 0;"
36;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;35,34;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral)); ck_a += *((uint8_t *)(&ir_pitch_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
37;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;36;" tx_head = 0;"
38;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;37,36;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral) + 1); ck_a += *((uint8_t *)(&ir_roll_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
39;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;38;" tx_head = 0;"
40;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;39,38;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral)); ck_a += *((uint8_t *)(&ir_roll_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
41;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;40;" tx_head = 0;"
42;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;41,40;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
43;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;42;" tx_head = 0;"
44;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;43,42;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
45;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;44;" tx_head = 0;"
46;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;45,44;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
47;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;46;" tx_head = 0;"
48;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;47,46;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir)); ck_a += *((uint8_t *)(&estimator_rad_of_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
49;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;48;" tx_head = 0;"
50;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;49,48;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 3); ck_a += *((uint8_t *)(&estimator_rad) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
51;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;50;" tx_head = 0;"
52;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;51,50;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 2); ck_a += *((uint8_t *)(&estimator_rad) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
53;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;52;" tx_head = 0;"
54;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;53,52;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 1); ck_a += *((uint8_t *)(&estimator_rad) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
55;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;54;" tx_head = 0;"
56;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;55,54;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad)); ck_a += *((uint8_t *)(&estimator_rad)); ck_b += ck_a; tx_head++; tx_head >= 255;"
57;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;56;" tx_head = 0;"
58;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;57,56;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 3); ck_a += *((uint8_t *)(&estimator_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
59;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;58;" tx_head = 0;"
60;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;59,58;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 2); ck_a += *((uint8_t *)(&estimator_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
61;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;60;" tx_head = 0;"
62;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;61,60;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 1); ck_a += *((uint8_t *)(&estimator_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
63;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;62;" tx_head = 0;"
64;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;63,62;" ck_a = 5; ck_b = 5; tx_buf[tx_head] = *((uint8_t *)(&estimator_ir)); ck_a += *((uint8_t *)(&estimator_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
65;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;64;" tx_head = 0;"
66;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;65,64;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
67;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;66;" tx_head = 0;"
68;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;67,66;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
69;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;68,24;" [B72.2] ? [B70.1] : [B71.1];"
70;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;69;" 20 < (255 - (tx_head - tx_tail));"
71;node;;main.c;use_gps_pos;502;3;0;0;0;0;0;;69;" 20 < (tx_tail - tx_head);"
72;node;;main.c;use_gps_pos;501;3;501;31;0;0;1;estimator_update_state_gps;70,71;" estimator_update_state_gps(); tx_head >= tx_tail;"
73;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;72;" modem_nb_ovrn++;"
74;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;72;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
75;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;74;" tx_tail = 0;"
76;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;75,74;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
77;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;76,72;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
78;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;77;" tx_head = 0;"
79;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;78,77;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
80;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;79;" tx_head = 0;"
81;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;80,79;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
82;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;81;" tx_head = 0;"
83;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;82,81;" tx_buf[tx_head] = *((uint8_t *)(&gps_ftow) + 3); ck_a += *((uint8_t *)(&gps_ftow) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
84;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;83;" tx_head = 0;"
85;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;84,83;" tx_buf[tx_head] = *((uint8_t *)(&gps_ftow) + 2); ck_a += *((uint8_t *)(&gps_ftow) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
86;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;85;" tx_head = 0;"
87;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;86,85;" tx_buf[tx_head] = *((uint8_t *)(&gps_ftow) + 1); ck_a += *((uint8_t *)(&gps_ftow) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
88;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;87;" tx_head = 0;"
89;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;88,87;" tx_buf[tx_head] = *((uint8_t *)(&gps_ftow)); ck_a += *((uint8_t *)(&gps_ftow)); ck_b += ck_a; tx_head++; tx_head >= 255;"
90;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;89;" tx_head = 0;"
91;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;90,89;" tx_buf[tx_head] = *((uint8_t *)(&gps_fclimb) + 3); ck_a += *((uint8_t *)(&gps_fclimb) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
92;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;91;" tx_head = 0;"
93;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;92,91;" tx_buf[tx_head] = *((uint8_t *)(&gps_fclimb) + 2); ck_a += *((uint8_t *)(&gps_fclimb) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
94;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;93;" tx_head = 0;"
95;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;94,93;" tx_buf[tx_head] = *((uint8_t *)(&gps_fclimb) + 1); ck_a += *((uint8_t *)(&gps_fclimb) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
96;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;95;" tx_head = 0;"
97;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;96,95;" tx_buf[tx_head] = *((uint8_t *)(&gps_fclimb)); ck_a += *((uint8_t *)(&gps_fclimb)); ck_b += ck_a; tx_head++; tx_head >= 255;"
98;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;97;" tx_head = 0;"
99;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;98,97;" tx_buf[tx_head] = *((uint8_t *)(&gps_fspeed) + 3); ck_a += *((uint8_t *)(&gps_fspeed) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
100;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;99;" tx_head = 0;"
101;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;100,99;" tx_buf[tx_head] = *((uint8_t *)(&gps_fspeed) + 2); ck_a += *((uint8_t *)(&gps_fspeed) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
102;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;101;" tx_head = 0;"
103;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;102,101;" tx_buf[tx_head] = *((uint8_t *)(&gps_fspeed) + 1); ck_a += *((uint8_t *)(&gps_fspeed) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
104;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;103;" tx_head = 0;"
105;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;104,103;" tx_buf[tx_head] = *((uint8_t *)(&gps_fspeed)); ck_a += *((uint8_t *)(&gps_fspeed)); ck_b += ck_a; tx_head++; tx_head >= 255;"
106;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;105;" tx_head = 0;"
107;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;106,105;" tx_buf[tx_head] = *((uint8_t *)(&gps_falt) + 3); ck_a += *((uint8_t *)(&gps_falt) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
108;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;107;" tx_head = 0;"
109;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;108,107;" tx_buf[tx_head] = *((uint8_t *)(&gps_falt) + 2); ck_a += *((uint8_t *)(&gps_falt) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
110;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;109;" tx_head = 0;"
111;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;110,109;" tx_buf[tx_head] = *((uint8_t *)(&gps_falt) + 1); ck_a += *((uint8_t *)(&gps_falt) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
112;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;111;" tx_head = 0;"
113;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;112,111;" tx_buf[tx_head] = *((uint8_t *)(&gps_falt)); ck_a += *((uint8_t *)(&gps_falt)); ck_b += ck_a; tx_head++; tx_head >= 255;"
114;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;113;" tx_head = 0;"
115;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;114,113;" tx_buf[tx_head] = *((uint8_t *)(&gps_fcourse) + 3); ck_a += *((uint8_t *)(&gps_fcourse) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
116;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;115;" tx_head = 0;"
117;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;116,115;" tx_buf[tx_head] = *((uint8_t *)(&gps_fcourse) + 2); ck_a += *((uint8_t *)(&gps_fcourse) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
118;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;117;" tx_head = 0;"
119;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;118,117;" tx_buf[tx_head] = *((uint8_t *)(&gps_fcourse) + 1); ck_a += *((uint8_t *)(&gps_fcourse) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
120;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;119;" tx_head = 0;"
121;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;120,119;" tx_buf[tx_head] = *((uint8_t *)(&gps_fcourse)); ck_a += *((uint8_t *)(&gps_fcourse)); ck_b += ck_a; tx_head++; tx_head >= 255;"
122;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;121;" tx_head = 0;"
123;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;122,121;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_north) + 3); ck_a += *((uint8_t *)(&gps_utm_north) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
124;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;123;" tx_head = 0;"
125;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;124,123;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_north) + 2); ck_a += *((uint8_t *)(&gps_utm_north) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
126;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;125;" tx_head = 0;"
127;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;126,125;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_north) + 1); ck_a += *((uint8_t *)(&gps_utm_north) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
128;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;127;" tx_head = 0;"
129;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;128,127;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_north)); ck_a += *((uint8_t *)(&gps_utm_north)); ck_b += ck_a; tx_head++; tx_head >= 255;"
130;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;129;" tx_head = 0;"
131;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;130,129;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_east) + 3); ck_a += *((uint8_t *)(&gps_utm_east) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
132;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;131;" tx_head = 0;"
133;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;132,131;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_east) + 2); ck_a += *((uint8_t *)(&gps_utm_east) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
134;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;133;" tx_head = 0;"
135;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;134,133;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_east) + 1); ck_a += *((uint8_t *)(&gps_utm_east) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
136;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;135;" tx_head = 0;"
137;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;136,135;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_east)); ck_a += *((uint8_t *)(&gps_utm_east)); ck_b += ck_a; tx_head++; tx_head >= 255;"
138;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;137;" tx_head = 0;"
139;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;138,137;" ck_a = 8; ck_b = 8; tx_buf[tx_head] = *((uint8_t *)(&gps_mode)); ck_a += *((uint8_t *)(&gps_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
140;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;139;" tx_head = 0;"
141;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;140,139;" tx_buf[tx_head] = 8; tx_head++; tx_head >= 255;"
142;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;141;" tx_head = 0;"
143;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;142,141;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
144;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;143,73;" [B147.1] ? [B145.1] : [B146.1];"
145;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;144;" 33 < (255 - (tx_head - tx_tail));"
146;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;144;" 33 < (tx_tail - tx_head);"
147;node;;main.c;use_gps_pos;500;3;0;0;0;0;0;;145,146;" tx_head >= tx_tail;"
148;entry;;main.c;use_gps_pos;499;27;499;27;0;0;0;;147;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;mainloop.c;main;82;1;82;1;0;0;0;;;""
1;node;;mainloop.c;main;81;3;81;11;0;0;0;;0;" return 0;;"
3;node;;mainloop.c;main;77;7;78;27;0;0;1;radio_control_task;9;" link_fbw_receive_complete = 0; radio_control_task();"
4;node;;mainloop.c;main;76;9;76;34;0;0;0;;3,9;" link_fbw_receive_complete (ImplicitCastExpr, LValueToRValue, uint8_t);"
5;node;;mainloop.c;main;74;2;74;25;0;0;1;receive_gps_data_task;4;" receive_gps_data_task();"
6;node;;mainloop.c;main;72;9;72;25;0;0;0;;5,4;" gps_msg_received (ImplicitCastExpr, LValueToRValue, uint8_t);"
7;node;;mainloop.c;main;71;7;71;22;0;0;1;periodic_task;6;" periodic_task();"
8;node;;mainloop.c;main;70;8;70;24;0;0;1;timer_periodic;7,6;" timer_periodic();"
9;node;;mainloop.c;main;69;10;69;11;0;0;0;;8,1;" 1;"
11;node;;mainloop.c;main;65;7;65;17;0;0;0;;13;" init_cpt--;"
12;node;;mainloop.c;main;64;9;64;25;0;0;1;timer_periodic;11,13;" timer_periodic();"
13;node;;mainloop.c;main;63;10;63;18;0;0;0;;12,9;" init_cpt (ImplicitCastExpr, LValueToRValue, uint8_t);"
14;node;;mainloop.c;main;43;3;62;16;0;0;1;timer_init,modem_init,adc_init,spi_init,link_fbw_init,gps_init,nav_init,ir_init,estimator_init;13;" uint8_t init_cpt;; timer_init(); modem_init(); adc_init(); spi_init(); link_fbw_init(); gps_init(); nav_init(); ir_init(); estimator_init(); init_cpt = 30;"
15;entry;;mainloop.c;main;42;2;42;2;0;0;0;;14;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;modem.c;modem_init;63;1;63;1;0;0;0;;;""
1;node;;modem.c;modem_init;50;3;62;42;0;0;0;;0;" (*(volatile uint8_t *)((23) + 32)) |= (1 << (4)); (*(volatile uint8_t *)((49) + 32)) = 1; (*(volatile uint8_t *)((51) + 32)) = (1 << (3)) | (1 << (4)) | (1 << (0)); (*(volatile uint8_t *)((17) + 32)) |= (1 << (7)) | (1 << (6)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((18) + 32)))))) |= (1 << (6)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((18) + 32)))))) &= ~(1 << (7)); (*(volatile uint8_t *)((58) + 32)) |= (1 << (1));"
2;entry;;modem.c;modem_init;44;26;44;26;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;nav.c;approaching;132;1;132;1;0;0;0;;;""
1;node;;nav.c;approaching;129;3;131;25;0;0;0;;0;" scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y; return (scal_prod < 0);;"
2;node;;nav.c;approaching;127;5;127;16;0;0;0;;0;" return (!0);;"
3;node;;nav.c;approaching;125;3;126;34;0;0;0;;2,1;" [B6.6] ? [B4.1] : [B5.1]; carrot = ([B3.1]); dist2_to_wp < carrot * carrot;"
4;node;;nav.c;approaching;125;27;125;29;0;0;0;;3;" 40 (ImplicitCastExpr, IntegralToFloating, float);"
5;node;;nav.c;approaching;125;32;125;38;0;0;0;;3;" carrot (ImplicitCastExpr, LValueToRValue, float);"
6;node;;nav.c;approaching;119;3;125;24;0;0;0;;4,5;" float pw_x = waypoints[wp].x - estimator_x;; float pw_y = waypoints[wp].y - estimator_y;; float scal_prod;; dist2_to_wp = pw_x * pw_x + pw_y * pw_y; carrot = 5. * estimator_hspeed_mod; carrot < 40;"
7;entry;;nav.c;approaching;118;40;118;40;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;nav.c;compute_dist2_to_home;172;1;172;1;0;0;0;;;""
1;node;;nav.c;compute_dist2_to_home;168;3;171;78;0;0;0;;0;" float ph_x = waypoints[0].x - estimator_x;; float ph_y = waypoints[0].y - estimator_y;; dist2_to_home = ph_x * ph_x + ph_y * ph_y; too_far_from_home = dist2_to_home > (500. * 500.);"
2;entry;;nav.c;compute_dist2_to_home;167;49;167;49;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;nav.c;fly_to;143;1;143;1;0;0;0;;;""
1;node;;nav.c;fly_to;142;3;142;46;0;0;1;fly_to_xy;0;" fly_to_xy(waypoints[wp].x, waypoints[wp].y);"
2;entry;;nav.c;fly_to;141;33;141;33;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;nav.c;fly_to_xy;139;1;139;1;0;0;0;;;""
1;node;;nav.c;fly_to_xy;136;3;138;67;0;0;1;atan2;0;" desired_x = x; desired_y = y; atan2(y - estimator_y, x - estimator_x); desired_course = 3.1415926535897931 / 2. - [B1.3];"
2;entry;;nav.c;fly_to_xy;135;2;135;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;nav.c;glide_to;165;1;165;1;0;0;0;;;""
1;node;;nav.c;glide_to;162;3;164;68;0;0;0;;0;" float last_alt = waypoints[_last_wp].a;; desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt); pre_climb = 10. * (waypoints[wp].a - last_alt) / leg;"
2;entry;;nav.c;glide_to;161;53;161;53;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;nav.c;nav_home;181;1;181;1;0;0;0;;;""
1;node;;nav.c;nav_home;176;3;180;30;0;0;1;compute_dist2_to_home;0;" nav_pitch = 0.; vertical_mode = 3; desired_altitude = 125. + 50; compute_dist2_to_home(); dist2_to_wp = dist2_to_home;"
3;node;;nav.c;nav_home;175;3;0;0;0;0;0;;4;" qdr -= 360;"
4;node;;nav.c;nav_home;175;3;0;0;0;0;0;;3,1;" qdr >= 360;"
6;node;;nav.c;nav_home;175;3;0;0;0;0;0;;7;" qdr += 360;"
7;node;;nav.c;nav_home;175;3;0;0;0;0;0;;6,4;" qdr < 0;"
8;node;;nav.c;nav_home;175;3;0;0;0;0;0;;7;" atan2(estimator_y - waypoints[0].y, estimator_x - waypoints[0].x); float alpha = atan2(estimator_y - waypoints[0].y, estimator_x - waypoints[0].x);; float alpha_carrot = alpha + 5. / -50 * estimator_hspeed_mod;; cos(alpha_carrot); fabs(50); sin(alpha_carrot); fabs(50); fly_to_xy(waypoints[0].x + [B8.4] * [B8.5], waypoints[0].y + [B8.6] * [B8.7]); qdr = ((3.1415926535897931 / 2 - alpha_carrot) / 3.1415926535897931 * 180.);"
9;entry;;nav.c;nav_home;174;22;174;22;0;0;0;;8;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;nav.c;nav_init;193;1;193;1;0;0;0;;;""
1;node;;nav.c;nav_init;191;3;192;16;0;0;0;;0;" nav_block = 0; nav_stage = 0;"
2;entry;;nav.c;nav_init;190;22;190;22;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;nav.c;nav_update;187;1;187;1;0;0;0;;;""
1;node;;nav.c;nav_update;184;3;186;13;0;0;1;compute_dist2_to_home,auto_nav;0;" compute_dist2_to_home(); auto_nav();"
2;entry;;nav.c;nav_update;183;24;183;24;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;nav.c;route_to;159;1;159;1;0;0;0;;;""
1;node;;nav.c;route_to;157;3;158;62;0;0;1;fly_to_xy;0;" [B4.3] ? [B2.1] : [B3.1]; alpha = ([B1.1]); fly_to_xy(last_wp_x + alpha * leg_x, last_wp_y + alpha * leg_y);"
2;node;;nav.c;route_to;157;11;0;0;0;0;0;;1;" 1.;"
3;node;;nav.c;route_to;157;11;0;0;0;0;0;;1;" alpha (ImplicitCastExpr, FloatingCast, double);"
4;node;;nav.c;route_to;156;3;156;33;0;0;0;;2,3;" [B7.5] ? [B5.1] : [B6.1]; alpha += ([B4.1]); 1. < alpha;"
5;node;;nav.c;route_to;156;12;0;0;0;0;0;;4;" carrot / leg (ImplicitCastExpr, FloatingCast, double);"
6;node;;nav.c;route_to;156;12;0;0;0;0;0;;4;" 0.;"
7;node;;nav.c;route_to;154;3;155;19;0;0;1;sqrt;5,6;" [B10.7] ? [B8.1] : [B9.1]; alpha = ([B7.1]); sqrt(leg2); leg = [B7.3]; carrot / leg > 0.;"
8;node;;nav.c;route_to;154;11;0;0;0;0;0;;7;" alpha (ImplicitCastExpr, FloatingCast, double);"
9;node;;nav.c;route_to;154;11;0;0;0;0;0;;7;" 0.;"
10;node;;nav.c;route_to;148;3;153;89;0;0;0;;8,9;" float last_wp_x = waypoints[_last_wp].x;; float last_wp_y = waypoints[_last_wp].y;; float leg_x = waypoints[wp].x - last_wp_x;; float leg_y = waypoints[wp].y - last_wp_y;; float leg2 = leg_x * leg_x + leg_y * leg_y;; alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2; alpha > 0.;"
11;entry;;nav.c;route_to;147;2;147;2;0;0;0;;10;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pid.c;altitude_pid_run;127;1;127;1;0;0;0;;;""
1;node;;pid.c;altitude_pid_run;126;34;126;59;0;0;0;;0;" desired_climb = 1.;"
2;node;;pid.c;altitude_pid_run;126;7;126;32;0;0;0;;1,0;" desired_climb > 1.;"
3;node;;pid.c;altitude_pid_run;125;35;125;61;0;0;0;;2;" desired_climb = -1.;"
4;node;;pid.c;altitude_pid_run;123;3;125;33;0;0;0;;3,2;" float err = estimator_z - desired_altitude;; desired_climb = pre_climb + altitude_pgain * err; desired_climb < -1.;"
5;entry;;pid.c;altitude_pid_run;122;30;122;30;0;0;0;;4;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pid.c;climb_pid_run;117;1;117;1;0;0;0;;;""
1;node;;pid.c;climb_pid_run;114;5;115;44;0;0;0;;0;" [B7.1] ? [B2.1] : ([B3.1]); desired_gaz = ([B1.1]); desired_pitch = nav_pitch + pitch_of_vz;"
2;node;;pid.c;climb_pid_run;114;19;0;0;0;0;0;;1;" 0 (ImplicitCastExpr, IntegralToFloating, float);"
3;node;;pid.c;climb_pid_run;114;19;0;0;0;0;0;;1;" [B6.1] ? [B4.1] : [B5.1];"
4;node;;pid.c;climb_pid_run;114;19;0;0;0;0;0;;3;" (600 * 16) (ImplicitCastExpr, IntegralToFloating, float);"
5;node;;pid.c;climb_pid_run;114;19;0;0;0;0;0;;3;" fgaz * (600 * 16);"
6;node;;pid.c;climb_pid_run;114;19;0;0;0;0;0;;4,5;" fgaz * (600 * 16) > (600 * 16);"
7;node;;pid.c;climb_pid_run;114;19;0;0;0;0;0;;2,6;" fgaz * (600 * 16) < 0;"
8;node;;pid.c;climb_pid_run;113;46;113;81;0;0;0;;7;" climb_sum_err = -100;"
9;node;;pid.c;climb_pid_run;113;9;113;44;0;0;0;;8,7;" climb_sum_err < -100;"
10;node;;pid.c;climb_pid_run;112;44;112;77;0;0;0;;9;" climb_sum_err = 100;"
11;node;;pid.c;climb_pid_run;109;5;112;42;0;0;0;;10,9;" ([B14.1]) ? [B12.1] : [B13.1]; pitch_of_vz = [B11.1]; fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + 0.31 + 0.20000000000000001 * desired_climb; climb_sum_err += err; climb_sum_err > 100;"
12;node;;pid.c;climb_pid_run;109;41;109;74;0;0;0;;11;" desired_climb * pitch_of_vz_pgain (ImplicitCastExpr, FloatingCast, double);"
13;node;;pid.c;climb_pid_run;109;77;109;79;0;0;0;;11;" 0.;"
14;node;;pid.c;climb_pid_run;109;20;109;37;0;0;0;;12,13;" desired_climb > 0;"
15;node;;pid.c;climb_pid_run;106;7;106;54;0;0;0;;0;" climb_pitch_sum_err = -100;"
16;node;;pid.c;climb_pid_run;105;9;105;56;0;0;0;;15,0;" climb_pitch_sum_err < -100;"
17;node;;pid.c;climb_pid_run;104;7;104;52;0;0;0;;16;" climb_pitch_sum_err = 100;"
18;node;;pid.c;climb_pid_run;102;5;103;54;0;0;0;;17,16;" climb_pitch_sum_err += err; climb_pitch_sum_err > 100;"
19;node;;pid.c;climb_pid_run;101;7;101;32;0;0;0;;18;" desired_pitch = min_pitch;"
20;node;;pid.c;climb_pid_run;100;9;100;34;0;0;0;;19,18;" desired_pitch < min_pitch;"
21;node;;pid.c;climb_pid_run;99;7;99;32;0;0;0;;20;" desired_pitch = max_pitch;"
22;node;;pid.c;climb_pid_run;96;5;98;34;0;0;0;;21,20;" desired_gaz = nav_desired_gaz; desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err); desired_pitch > max_pitch;"
23;node;;pid.c;climb_pid_run;93;3;95;17;0;0;0;;22,14;" float err = estimator_z_dot - desired_climb;; float fgaz;; auto_pitch (ImplicitCastExpr, LValueToRValue, bool_t);"
24;entry;;pid.c;climb_pid_run;92;30;92;30;0;0;0;;23;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pid.c;course_pid_run;73;1;73;1;0;0;0;;;""
1;node;;pid.c;course_pid_run;72;5;72;33;0;0;0;;0;" nav_desired_roll = -max_roll;"
2;node;;pid.c;course_pid_run;71;12;71;40;0;0;0;;1,0;" nav_desired_roll < -max_roll;"
3;node;;pid.c;course_pid_run;70;5;70;32;0;0;0;;0;" nav_desired_roll = max_roll;"
4;node;;pid.c;course_pid_run;68;3;69;34;0;0;0;;3,2;" nav_desired_roll = course_pgain * err; nav_desired_roll > max_roll;"
6;node;;pid.c;course_pid_run;67;3;0;0;0;0;0;;7;" err += 2 * 3.1415926535897931;"
7;node;;pid.c;course_pid_run;67;3;0;0;0;0;0;;6,4;" err < -3.1415926535897931;"
9;node;;pid.c;course_pid_run;67;3;0;0;0;0;0;;10;" err -= 2 * 3.1415926535897931;"
10;node;;pid.c;course_pid_run;67;3;0;0;0;0;0;;9,7;" err > 3.1415926535897931;"
11;node;;pid.c;course_pid_run;66;3;66;53;0;0;0;;10;" float err = estimator_hspeed_dir - desired_course;;"
12;entry;;pid.c;course_pid_run;65;30;65;30;0;0;0;;11;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pid.c;roll_pitch_pid_run;59;1;59;1;0;0;0;;;""
1;node;;pid.c;roll_pitch_pid_run;58;3;58;50;0;0;0;;0;" [B7.3] ? [B2.1] : ([B3.1]); desired_elevator = ([B1.1]);"
2;node;;pid.c;roll_pitch_pid_run;58;22;0;0;0;0;0;;1;" -(600 * 16) (ImplicitCastExpr, IntegralToFloating, float);"
3;node;;pid.c;roll_pitch_pid_run;58;22;0;0;0;0;0;;1;" [B6.1] ? [B4.1] : [B5.1];"
4;node;;pid.c;roll_pitch_pid_run;58;22;0;0;0;0;0;;3;" (600 * 16) (ImplicitCastExpr, IntegralToFloating, float);"
5;node;;pid.c;roll_pitch_pid_run;58;22;0;0;0;0;0;;3;" pitch_pgain * err;"
6;node;;pid.c;roll_pitch_pid_run;58;22;0;0;0;0;0;;4,5;" pitch_pgain * err > (600 * 16);"
7;node;;pid.c;roll_pitch_pid_run;57;3;57;81;0;0;1;fabs;2,6;" fabs(estimator_phi); err = -(estimator_theta - desired_pitch - pitch_of_roll * [B7.1]); pitch_pgain * err < -(600 * 16);"
8;node;;pid.c;roll_pitch_pid_run;56;5;56;23;0;0;0;;7;" pitch_of_roll = 0.;"
9;node;;pid.c;roll_pitch_pid_run;54;3;55;24;0;0;0;;8,7;" [B15.2] ? [B10.1] : ([B11.1]); desired_aileron = ([B9.1]); pitch_of_roll < 0.;"
10;node;;pid.c;roll_pitch_pid_run;54;21;0;0;0;0;0;;9;" -(600 * 16) (ImplicitCastExpr, IntegralToFloating, float);"
11;node;;pid.c;roll_pitch_pid_run;54;21;0;0;0;0;0;;9;" [B14.1] ? [B12.1] : [B13.1];"
12;node;;pid.c;roll_pitch_pid_run;54;21;0;0;0;0;0;;11;" (600 * 16) (ImplicitCastExpr, IntegralToFloating, float);"
13;node;;pid.c;roll_pitch_pid_run;54;21;0;0;0;0;0;;11;" roll_pgain * err;"
14;node;;pid.c;roll_pitch_pid_run;54;21;0;0;0;0;0;;12,13;" roll_pgain * err > (600 * 16);"
15;node;;pid.c;roll_pitch_pid_run;53;3;53;45;0;0;0;;10,14;" float err = estimator_phi - desired_roll;; roll_pgain * err < -(600 * 16);"
16;entry;;pid.c;roll_pitch_pid_run;52;34;52;34;0;0;0;;15;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;spi.c;spi_init;33;1;33;1;0;0;0;;;""
1;node;;spi.c;spi_init;17;3;32;27;0;0;0;;0;" (*(volatile uint8_t *)((23) + 32)) |= (1 << (2)) | (1 << (1)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((23) + 32)))))) |= (1 << (0)); spi_cur_slave = 0; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((24) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((2) + 32)))))) |= (1 << (7)); spi_cur_slave = 0; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((3) + 32)))))) |= (1 << (7)); spi_cur_slave = 0;"
2;entry;;spi.c;spi_init;15;23;15;23;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;uart.c;uart0_init;125;1;125;1;0;0;0;;;""
1;node;;uart.c;uart0_init;114;3;122;35;0;0;0;;0;" (*(volatile uint8_t *)(144)) = 0; (*(volatile uint8_t *)((9) + 32)) = 25; (*(volatile uint8_t *)((11) + 32)) = 0; (*(volatile uint8_t *)((10) + 32)) = (1 << (4)) | (1 << (3)); (*(volatile uint8_t *)(149)) = (1 << (2)) | (1 << (1)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((10) + 32)))))) |= (1 << (7));"
2;entry;;uart.c;uart0_init;112;26;112;26;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;uart.c;uart0_print_hex;85;1;85;1;0;0;0;;;""
1;node;;uart.c;uart0_print_hex;79;3;84;27;0;0;1;uart0_transmit,uart0_transmit;0;" const uint8_t hex[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};; uint8_t high = (c & 240) >> 4;; uint8_t low = c & 15;; uart0_transmit(hex[high]); uart0_transmit(hex[low]);"
2;entry;;uart.c;uart0_print_hex;78;40;78;40;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;uart.c;uart0_print_string;76;1;76;1;0;0;0;;;""
2;node;;uart.c;uart0_print_string;73;5;74;8;0;0;1;uart0_transmit;3;" uart0_transmit(s[i]); i++;"
3;node;;uart.c;uart0_print_string;72;10;72;14;0;0;0;;2,0;" s[i] (ImplicitCastExpr, LValueToRValue, uint8_t);"
4;node;;uart.c;uart0_print_string;71;3;71;17;0;0;0;;3;" uint8_t i = 0;;"
5;entry;;uart.c;uart0_print_string;70;44;70;44;0;0;0;;4;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;uart.c;uart0_transmit;52;1;52;1;0;0;0;;;""
1;node;;uart.c;uart0_transmit;49;5;49;16;0;0;0;;0;" (*(volatile uint8_t *)((12) + 32)) = data; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((10) + 32)))))) |= (1 << (6));"
2;node;;uart.c;uart0_transmit;46;5;47;15;0;0;0;;0;" tx_buf0[tx_head0] = data; tx_head0++;"
3;node;;uart.c;uart0_transmit;44;7;44;13;0;0;0;;0;" return;;"
4;node;;uart.c;uart0_transmit;42;9;42;33;0;0;0;;3,2;" tx_tail0 == tx_head0 + 1;"
5;node;;uart.c;uart0_transmit;40;7;40;26;0;0;0;;4,1;" (*(volatile uint8_t *)((10) + 32)) & (1 << (6));"
6;entry;;uart.c;uart0_transmit;39;44;39;44;0;0;0;;5;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;uart.c;uart1_init;142;1;142;1;0;0;0;;;""
1;node;;uart.c;uart1_init;129;3;139;35;0;0;0;;0;" (*(volatile uint8_t *)(152)) = 0; (*(volatile uint8_t *)(153)) = 25; (*(volatile uint8_t *)(155)) = 0; (*(volatile uint8_t *)(154)) = (1 << (4)) | (1 << (3)); (*(volatile uint8_t *)(157)) = (1 << (2)) | (1 << (1)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)(154)))))) |= (1 << (7));"
2;entry;;uart.c;uart1_init;127;26;127;26;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;uart.c;uart1_transmit;67;1;67;1;0;0;0;;;""
1;node;;uart.c;uart1_transmit;64;5;64;16;0;0;0;;0;" (*(volatile uint8_t *)(156)) = data; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)(154)))))) |= (1 << (6));"
2;node;;uart.c;uart1_transmit;61;5;62;15;0;0;0;;0;" tx_buf1[tx_head1] = data; tx_head1++;"
3;node;;uart.c;uart1_transmit;59;7;59;13;0;0;0;;0;" return;;"
4;node;;uart.c;uart1_transmit;57;9;57;33;0;0;0;;3,2;" tx_tail1 == tx_head1 + 1;"
5;node;;uart.c;uart1_transmit;55;7;55;26;0;0;0;;4,1;" (*(volatile uint8_t *)(154)) & (1 << (6));"
6;entry;;uart.c;uart1_transmit;54;44;54;44;0;0;0;;5;""

