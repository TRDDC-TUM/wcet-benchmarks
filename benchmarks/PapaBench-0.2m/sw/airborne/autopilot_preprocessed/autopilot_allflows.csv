#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_adc.c;__vector_21;130;1;130;1;0;0;0;;;""
1;node;;pp_adc.c;__vector_21;128;3;129;97;0;0;0;;0;" (*(volatile uint8_t *)((7) + 32)) = adc_input | (1 << (6)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((6) + 32)))))) |= (1 << (6));"
2;node;;pp_adc.c;__vector_21;127;5;127;18;0;0;0;;1;" adc_input = 0;"
3;node;;pp_adc.c;__vector_21;125;3;126;21;0;0;0;;2,1;" adc_input++; adc_input >= 8;"
4;node;;pp_adc.c;__vector_21;120;5;123;25;0;0;0;;3;" buf->sum -= buf->values[new_head]; buf->values[new_head] = adc_value; buf->sum += adc_value; buf->head = new_head;"
5;node;;pp_adc.c;__vector_21;119;27;119;39;0;0;0;;4;" new_head = 0;"
6;node;;pp_adc.c;__vector_21;118;5;119;25;0;0;0;;5,4;" uint8_t new_head = buf->head + 1;; new_head >= 32;"
7;node;;pp_adc.c;__vector_21;113;3;117;10;0;0;0;;6,3;" uint8_t adc_input = (*(volatile uint8_t *)((7) + 32)) & 7;; struct adc_buf *buf = buffers[adc_input];; uint16_t adc_value = (*(volatile uint16_t *)((4) + 32));; adc_samples[adc_input] = adc_value; buf (ImplicitCastExpr, LValueToRValue, struct adc_buf *);"
8;entry;;pp_adc.c;__vector_21;112;2;112;2;0;0;0;;7;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_adc.c;adc_buf_channel;94;1;94;1;0;0;0;;;""
1;node;;pp_adc.c;adc_buf_channel;93;3;93;27;0;0;0;;0;" buffers[adc_channel] = s;"
2;entry;;pp_adc.c;adc_buf_channel;92;63;92;63;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_adc.c;adc_init;110;1;110;1;0;0;0;;;""
1;node;;pp_adc.c;adc_init;108;21;108;24;0;0;0;;3;" i++;"
2;node;;pp_adc.c;adc_init;109;5;109;36;0;0;0;;1;" buffers[i] = (struct adc_buf *)0;"
3;node;;pp_adc.c;adc_init;108;14;108;19;0;0;0;;2,0;" i < 8;"
4;node;;pp_adc.c;adc_init;98;3;108;12;0;0;0;;3;" uint8_t i;; (*(volatile uint8_t *)(98)) = 0; (*(volatile uint8_t *)(97)) = 0; (*(volatile uint8_t *)((7) + 32)) = (1 << (6)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((8) + 32)))))) |= (1 << (7)); (*(volatile uint8_t *)((6) + 32)) = 0 | 7 | (1 << 7) | (1 << 3) | (1 << 6); i = 0;"
5;entry;;pp_adc.c;adc_init;97;2;97;2;0;0;0;;4;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_estimator.c;copysign;79;1;79;1;0;0;0;;;""
1;node;;pp_estimator.c;copysign;73;5;78;15;0;0;0;;0;" asm (\"bst\t%D2, 7\t\n\tbld\t%D0, 7\t\" : \"=r\" (__x) : \"0\" (__x), \"r\" (__y));; return __x;;"
2;entry;;pp_estimator.c;copysign;72;2;72;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_estimator.c;estimator_init;207;1;207;1;0;0;0;;;""
1;node;;pp_estimator.c;estimator_init;201;5;206;37;0;0;0;;0;" estimator_x = 0.; estimator_y = 0.; estimator_z = 0.; estimator_phi = 0.; estimator_psi = 0.; estimator_theta = 0; estimator_hspeed_mod = 0.; estimator_hspeed_dir = 0.; estimator_z_dot = 0.; estimator_phi_dot = 0.; estimator_psi_dot = 0.; estimator_theta_dot = 0.; estimator_flight_time = 0; estimator_rad_of_ir = ir_rad_of_ir;"
2;entry;;pp_estimator.c;estimator_init;200;30;200;30;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_estimator.c;estimator_propagate_state;257;1;257;1;0;0;0;;;""
1;entry;;pp_estimator.c;estimator_propagate_state;256;41;256;41;0;0;0;;0;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_estimator.c;estimator_update_ir_estim;247;1;247;1;0;0;0;;;""
1;node;;pp_estimator.c;estimator_update_ir_estim;245;3;246;20;0;0;0;;0;" last_hspeed_dir = estimator_hspeed_dir; last_t = gps_ftow;"
2;node;;pp_estimator.c;estimator_update_ir_estim;239;5;243;29;0;0;0;;1;" initialized = (!0); init_ir2 = ir_contrast; init_ir2 = init_ir2 * init_ir2; sum_xy = 100. * estimator_rad_of_ir * init_ir2; sum_xx = 100. * init_ir2;"
3;node;;pp_estimator.c;estimator_update_ir_estim;233;2;235;41;0;0;0;;1;" sum_xy = estimator_rad * estimator_ir + 0.99899999999999999 * sum_xy; sum_xx = estimator_ir * estimator_ir + 0.99899999999999999 * sum_xx; estimator_rad_of_ir = sum_xy / sum_xx;"
4;node;;pp_estimator.c;estimator_update_ir_estim;232;74;232;97;0;0;0;;3,1;" ir_roll < ir_contrast / 2;"
5;node;;pp_estimator.c;estimator_update_ir_estim;232;45;232;70;0;0;0;;4,1;" -ir_contrast / 2 < ir_roll;"
6;node;;pp_estimator.c;estimator_update_ir_estim;232;27;232;40;0;0;0;;5,1;" absphi > 0.050000000000000003;"
7;node;;pp_estimator.c;estimator_update_ir_estim;229;7;232;23;0;0;1;fabs;6,1;" estimator_ir = (float)ir_roll; estimator_rad = phi; fabs(phi); absphi = [B7.3]; absphi < 1.;"
8;virtual node;;;estimator_update_ir_estim;0;0;0;0;0;0;0;;10;""
9;node;;pp_estimator.c;estimator_update_ir_estim;228;119;228;152;0;0;0;;8;" phi += 2 * 3.1415926535897931;"
10;node;;pp_estimator.c;estimator_update_ir_estim;228;88;228;117;0;0;0;;9,7;" phi < -3.1415926535897931;"
11;virtual node;;;estimator_update_ir_estim;0;0;0;0;0;0;0;;13;""
12;node;;pp_estimator.c;estimator_update_ir_estim;228;46;228;79;0;0;0;;11;" phi -= 2 * 3.1415926535897931;"
13;node;;pp_estimator.c;estimator_update_ir_estim;228;16;228;44;0;0;0;;12,10;" phi > 3.1415926535897931;"
14;node;;pp_estimator.c;estimator_update_ir_estim;227;7;227;28;0;0;0;;13;" phi = phi / dt * 10. / 9.8100000000000004;"
15;virtual node;;;estimator_update_ir_estim;0;0;0;0;0;0;0;;17;""
16;node;;pp_estimator.c;estimator_update_ir_estim;226;119;226;152;0;0;0;;15;" phi += 2 * 3.1415926535897931;"
17;node;;pp_estimator.c;estimator_update_ir_estim;226;88;226;117;0;0;0;;16,14;" phi < -3.1415926535897931;"
18;virtual node;;;estimator_update_ir_estim;0;0;0;0;0;0;0;;20;""
19;node;;pp_estimator.c;estimator_update_ir_estim;226;46;226;79;0;0;0;;18;" phi -= 2 * 3.1415926535897931;"
20;node;;pp_estimator.c;estimator_update_ir_estim;226;16;226;44;0;0;0;;19,17;" phi > 3.1415926535897931;"
21;node;;pp_estimator.c;estimator_update_ir_estim;225;7;225;60;0;0;0;;20;" float phi = (estimator_hspeed_dir - last_hspeed_dir);;"
22;node;;pp_estimator.c;estimator_update_ir_estim;223;5;224;17;0;0;0;;21,1;" float dt = gps_ftow - last_t;; dt > 0.10000000000000001;"
23;node;;pp_estimator.c;estimator_update_ir_estim;215;3;221;18;0;0;0;;22,2;" static float last_hspeed_dir;; static float last_t;; static bool_t initialized = 0;; static float sum_xy;; static float sum_xx;; float absphi;; float init_ir2;; initialized (ImplicitCastExpr, LValueToRValue, bool_t);"
24;entry;;pp_estimator.c;estimator_update_ir_estim;214;41;214;41;0;0;0;;23;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_estimator.c;estimator_update_state_gps;255;1;255;1;0;0;0;;;""
1;node;;pp_estimator.c;estimator_update_state_gps;253;7;253;34;0;0;1;estimator_update_ir_estim;0;" estimator_update_ir_estim();"
2;node;;pp_estimator.c;estimator_update_state_gps;250;7;252;30;0;0;0;;1,0;" estimator_x = gps_east; estimator_y = gps_north; estimator_z = gps_falt; estimator_hspeed_mod = gps_fspeed; estimator_hspeed_dir = gps_fcourse; estimator_z_dot = gps_fclimb; estimator_flight_time (ImplicitCastExpr, LValueToRValue, uint16_t);"
3;node;;pp_estimator.c;estimator_update_state_gps;249;8;249;21;0;0;0;;2,0;" gps_mode == 3;"
4;entry;;pp_estimator.c;estimator_update_state_gps;248;42;248;42;0;0;0;;3;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_estimator.c;estimator_update_state_infrared;213;1;213;1;0;0;0;;;""
1;node;;pp_estimator.c;estimator_update_state_infrared;209;3;212;41;0;0;0;;0;" ([B5.1] && (([B4.1]))) ? [B2.1] : [B3.1]; float rad_of_ir = (ir_estim_mode == 1 && ((!0))) ? estimator_rad_of_ir : ir_rad_of_ir;; estimator_phi = rad_of_ir * ir_roll; estimator_theta = rad_of_ir * ir_pitch;"
2;node;;pp_estimator.c;estimator_update_state_infrared;210;5;210;24;0;0;0;;1;" estimator_rad_of_ir (ImplicitCastExpr, LValueToRValue, float);"
3;node;;pp_estimator.c;estimator_update_state_infrared;210;27;210;39;0;0;0;;1;" ir_rad_of_ir (ImplicitCastExpr, LValueToRValue, float);"
#4;node;;pp_estimator.c;estimator_update_state_infrared;209;46;209;48;0;0;0;;2,3;" !0;" # LLVM TODO: trivially true expression; no code generated
5;node;;pp_estimator.c;estimator_update_state_infrared;209;22;209;40;0;0;0;;2,3;" ir_estim_mode == 1;"
6;entry;;pp_estimator.c;estimator_update_state_infrared;208;47;208;47;0;0;0;;5;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_estimator.c;isfinite;70;1;70;1;0;0;0;;;""
1;node;;pp_estimator.c;isfinite;61;5;69;25;0;0;0;;0;" unsigned char __exp;; asm (\"mov\t%0, %C1\t\t\n\tlsl\t%0\t\t\n\tmov\t%0, %D1\t\t\n\trol\t%0\t\t\" : \"=r\" (__exp) : \"r\" (__x));; return __exp != 255;;"
2;entry;;pp_estimator.c;isfinite;60;2;60;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_gps_ubx.c;__vector_30;306;160;306;160;0;0;0;;;""
1;node;;pp_gps_ubx.c;__vector_30;306;103;306;158;0;0;1;parse_ubx;0;" uint8_t c = (*(volatile uint8_t *)(156));; parse_ubx(c);"
2;entry;;pp_gps_ubx.c;__vector_30;306;102;306;102;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_gps_ubx.c;copysign;168;1;168;1;0;0;0;;;""
1;node;;pp_gps_ubx.c;copysign;162;5;167;15;0;0;0;;0;" asm (\"bst\t%D2, 7\t\n\tbld\t%D0, 7\t\" : \"=r\" (__x) : \"0\" (__x), \"r\" (__y));; return __x;;"
2;entry;;pp_gps_ubx.c;copysign;161;2;161;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_gps_ubx.c;gps_init;220;1;220;1;0;0;0;;;""
1;node;;pp_gps_ubx.c;gps_init;218;3;219;17;0;0;1;uart1_init;0;" uart1_init(); ubx_status = 0;"
2;entry;;pp_gps_ubx.c;gps_init;217;24;217;24;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_gps_ubx.c;isfinite;159;1;159;1;0;0;0;;;""
1;node;;pp_gps_ubx.c;isfinite;150;5;158;25;0;0;0;;0;" unsigned char __exp;; asm (\"mov\t%0, %C1\t\t\n\tlsl\t%0\t\t\n\tmov\t%0, %D1\t\t\n\trol\t%0\t\t\" : \"=r\" (__exp) : \"r\" (__x));; return __exp != 255;;"
2;entry;;pp_gps_ubx.c;isfinite;149;2;149;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_gps_ubx.c;parse_gps_msg;239;1;239;1;0;0;0;;;""
1;node;;pp_gps_ubx.c;parse_gps_msg;230;7;236;31;0;0;0;;0;" gps_fspeed = ((float)(*((uint32_t *)(ubx_msg_buf + 20)))) / 100.; gps_fclimb = ((float)(*((int32_t *)(ubx_msg_buf + 12)))) / -100.; gps_fcourse = ((((float)(*((int32_t *)(ubx_msg_buf + 24)))) / 1.0E+5) / 180. * 3.1415926999999999); gps_ftow = ((float)(*((uint32_t *)(ubx_msg_buf + 0)))) / 1000.; gps_east = gps_utm_east / 100 - 605530; gps_north = gps_utm_north / 100 - 5797350; gps_pos_available = (!0);"
2;node;;pp_gps_ubx.c;parse_gps_msg;229;16;229;30;0;0;0;;1,0;" ubx_id == 18;"
3;node;;pp_gps_ubx.c;parse_gps_msg;228;7;228;48;0;0;0;;0;" gps_mode = (*((uint8_t *)(ubx_msg_buf + 4)));"
4;node;;pp_gps_ubx.c;parse_gps_msg;227;16;227;30;0;0;0;;3,2;" ubx_id == 3;"
5;node;;pp_gps_ubx.c;parse_gps_msg;224;7;226;63;0;0;0;;0;" gps_utm_east = (*((int32_t *)(ubx_msg_buf + 4))); gps_utm_north = (*((int32_t *)(ubx_msg_buf + 8))); gps_falt = (float)(*((int32_t *)(ubx_msg_buf + 12))) / 100.;"
6;node;;pp_gps_ubx.c;parse_gps_msg;223;9;223;23;0;0;0;;5,4;" ubx_id == 8;"
7;node;;pp_gps_ubx.c;parse_gps_msg;222;7;222;24;0;0;0;;6,0;" ubx_class == 1;"
8;entry;;pp_gps_ubx.c;parse_gps_msg;221;29;221;29;0;0;0;;7;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_gps_ubx.c;parse_ubx;305;1;305;1;0;0;0;;;""
1;node;restart;pp_gps_ubx.c;parse_ubx;303;3;304;9;0;0;0;;0;" ubx_status = 0; return;;"
2;virtual node;error;;parse_ubx;0;0;0;0;0;0;0;;1;""
3;node;;pp_gps_ubx.c;parse_ubx;300;3;300;9;0;0;0;;0;" return;;"
4;node;;pp_gps_ubx.c;parse_ubx;246;11;246;21;0;0;0;;8,11,14,17,18,19,22,25,28,3;" ubx_status (ImplicitCastExpr, IntegralCast, int);"
5;virtual node;;pp_gps_ubx.c;parse_ubx;298;5;298;10;0;0;0;;3;""
6;node;;pp_gps_ubx.c;parse_ubx;296;5;296;28;0;0;0;;1;" gps_msg_received = (!0);"
7;virtual node;;pp_gps_ubx.c;parse_ubx;295;7;295;17;0;0;0;;2;""
8;node;case 8;pp_gps_ubx.c;parse_ubx;294;9;294;18;0;0;0;;7,6;" c != ck_b;"
9;node;;pp_gps_ubx.c;parse_ubx;291;5;291;17;0;0;0;;3;" ubx_status++;"
10;virtual node;;pp_gps_ubx.c;parse_ubx;290;7;290;17;0;0;0;;2;""
11;node;case 7;pp_gps_ubx.c;parse_ubx;289;9;289;18;0;0;0;;10,9;" c != ck_a;"
12;virtual node;;pp_gps_ubx.c;parse_ubx;287;5;287;10;0;0;0;;3;""
13;node;;pp_gps_ubx.c;parse_ubx;285;7;285;19;0;0;0;;12;" ubx_status++;"
14;node;case 6;pp_gps_ubx.c;parse_ubx;282;5;284;31;0;0;0;;13,12;" ubx_msg_buf[ubx_msg_idx] = c; ubx_msg_idx++; ubx_msg_idx >= ubx_len;"
15;node;;pp_gps_ubx.c;parse_ubx;278;5;279;17;0;0;0;;3;" ubx_msg_idx = 0; ubx_status++;"
16;virtual node;;pp_gps_ubx.c;parse_ubx;277;7;277;17;0;0;0;;2;""
17;node;case 5;pp_gps_ubx.c;parse_ubx;275;5;276;22;0;0;0;;16,15;" ubx_len |= (c << 8); ubx_len > 255;"
18;node;case 4;pp_gps_ubx.c;parse_ubx;271;5;272;17;0;0;0;;3;" ubx_len = c; ubx_status++;"
19;node;case 3;pp_gps_ubx.c;parse_ubx;267;5;268;17;0;0;0;;3;" ubx_id = c; ubx_status++;"
20;node;;pp_gps_ubx.c;parse_ubx;263;5;264;17;0;0;0;;3;" ubx_class = c; ubx_status++;"
21;node;;pp_gps_ubx.c;parse_ubx;260;7;260;20;0;0;0;;2;" gps_nb_ovrn++;"
22;node;case 2;pp_gps_ubx.c;parse_ubx;259;9;259;25;0;0;0;;21,20;" gps_msg_received (ImplicitCastExpr, LValueToRValue, bool_t);"
23;node;;pp_gps_ubx.c;parse_ubx;254;5;256;17;0;0;0;;3;" ck_a = 0; ck_b = 0; ubx_status++;"
24;virtual node;;pp_gps_ubx.c;parse_ubx;253;7;253;17;0;0;0;;2;""
25;node;case 1;pp_gps_ubx.c;parse_ubx;252;9;252;18;0;0;0;;24,23;" c != 98;"
26;virtual node;;pp_gps_ubx.c;parse_ubx;250;5;250;10;0;0;0;;3;""
27;node;;pp_gps_ubx.c;parse_ubx;249;7;249;19;0;0;0;;26;" ubx_status++;"
28;node;case 0;pp_gps_ubx.c;parse_ubx;248;9;248;18;0;0;0;;27,26;" c == 181;"
29;node;;pp_gps_ubx.c;parse_ubx;243;5;244;17;0;0;0;;4;" ck_a += c; ck_b += ck_a;"
30;node;;pp_gps_ubx.c;parse_ubx;242;7;242;21;0;0;0;;29,4;" ubx_status < 7;"
31;entry;;pp_gps_ubx.c;parse_ubx;241;44;241;44;0;0;0;;30;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_if_calib.c;inflight_calib;165;1;165;1;0;0;0;;;""
1;node;;pp_if_calib.c;inflight_calib;161;7;162;37;0;0;0;;0;" max_roll = (max_roll_init + ((float)(from_fbw.channels[6] - slider2_init)) * -0.20000000000000001 / (float)(600 * 16)); slider_2_val = (float)max_roll;"
2;node;;pp_if_calib.c;inflight_calib;158;9;159;44;0;0;0;;1;" max_roll_init = max_roll; slider2_init = from_fbw.channels[6];"
3;node;;pp_if_calib.c;inflight_calib;156;7;157;23;0;0;0;;2,1;" static float max_roll_init;; mode_changed (ImplicitCastExpr, LValueToRValue, bool_t);"
4;node;;pp_if_calib.c;inflight_calib;155;9;155;33;0;0;0;;3,0;" inflight_calib_mode == 2;"
5;node;;pp_if_calib.c;inflight_calib;152;7;153;41;0;0;0;;4;" course_pgain = (course_pgain_init + ((float)(from_fbw.channels[5] - slider1_init)) * 0.10000000000000001 / (float)(600 * 16)); slider_1_val = (float)course_pgain;"
6;node;;pp_if_calib.c;inflight_calib;149;9;150;44;0;0;0;;5;" course_pgain_init = course_pgain; slider1_init = from_fbw.channels[5];"
7;node;;pp_if_calib.c;inflight_calib;147;7;148;23;0;0;0;;6,5;" static float course_pgain_init;; mode_changed (ImplicitCastExpr, LValueToRValue, bool_t);"
8;node;;pp_if_calib.c;inflight_calib;146;9;146;33;0;0;0;;7,4;" inflight_calib_mode == 2;"
9;node;;pp_if_calib.c;inflight_calib;145;7;145;21;0;0;0;;8,0;" pprz_mode == 2;"
10;node;;pp_if_calib.c;inflight_calib;141;7;142;44;0;0;0;;9;" ir_roll_neutral = (ir_roll_neutral_init + (int16_t)(((float)(from_fbw.channels[6] - slider2_init)) * -60. / (float)(600 * 16))); slider_2_val = (float)ir_roll_neutral;"
11;node;;pp_if_calib.c;inflight_calib;138;9;139;44;0;0;0;;10;" ir_roll_neutral_init = ir_roll_neutral; slider2_init = from_fbw.channels[6];"
12;node;;pp_if_calib.c;inflight_calib;136;7;137;23;0;0;0;;11,10;" static int16_t ir_roll_neutral_init;; mode_changed (ImplicitCastExpr, LValueToRValue, bool_t);"
13;node;;pp_if_calib.c;inflight_calib;135;9;135;33;0;0;0;;12,9;" inflight_calib_mode == 2;"
14;node;;pp_if_calib.c;inflight_calib;132;7;133;45;0;0;0;;13;" ir_pitch_neutral = (ir_pitch_neutral_init + (int16_t)(((float)(from_fbw.channels[5] - slider1_init)) * 60. / (float)(600 * 16))); slider_1_val = (float)ir_pitch_neutral;"
15;node;;pp_if_calib.c;inflight_calib;129;9;130;44;0;0;0;;14;" ir_pitch_neutral_init = ir_pitch_neutral; slider1_init = from_fbw.channels[5];"
16;node;;pp_if_calib.c;inflight_calib;127;7;128;23;0;0;0;;15,14;" static int16_t ir_pitch_neutral_init;; mode_changed (ImplicitCastExpr, LValueToRValue, bool_t);"
17;node;;pp_if_calib.c;inflight_calib;126;9;126;33;0;0;0;;16,13;" inflight_calib_mode == 2;"
18;node;;pp_if_calib.c;inflight_calib;125;7;125;21;0;0;0;;17,9;" pprz_mode == 1;"
19;entry;;pp_if_calib.c;inflight_calib;124;43;124;43;0;0;0;;18;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_infrared.c;ir_gain_calib;120;1;120;1;0;0;0;;;""
1;node;;pp_infrared.c;ir_gain_calib;118;3;119;36;0;0;0;;0;" ir_contrast = -ir_pitch; ir_rad_of_ir = 0.75 / ir_contrast;"
2;entry;;pp_infrared.c;ir_gain_calib;117;27;117;27;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_infrared.c;ir_init;110;1;110;1;0;0;0;;;""
1;node;;pp_infrared.c;ir_init;107;3;109;31;0;0;1;adc_buf_channel,adc_buf_channel;0;" ir_rad_of_ir = 0.75 / 200; adc_buf_channel(1, &buf_ir1); adc_buf_channel(2, &buf_ir2);"
2;entry;;pp_infrared.c;ir_init;106;21;106;21;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_infrared.c;ir_update;116;1;116;1;0;0;0;;;""
1;node;;pp_infrared.c;ir_update;112;3;115;60;0;0;0;;0;" int16_t x1_mean = buf_ir1.sum / 32;; int16_t x2_mean = buf_ir2.sum / 32;; ir_roll = (-1 * (x1_mean) + -1 * (x2_mean)) - ir_roll_neutral; ir_pitch = (-1 * (x1_mean) + 1 * (x2_mean)) - ir_pitch_neutral;"
2;entry;;pp_infrared.c;ir_update;111;23;111;23;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_link_fbw.c;__vector_12;165;1;165;1;0;0;0;;;""
1;node;;pp_link_fbw.c;__vector_12;162;3;164;16;0;0;0;;0;" tmp = (*(volatile uint8_t *)((15) + 32)); ((uint8_t *)&from_fbw)[idx_buf - 1] = tmp; xor_in ^= tmp;"
2;node;;pp_link_fbw.c;__vector_12;160;7;160;55;0;0;0;;1;" (*(volatile uint8_t *)((15) + 32)) = xor_out;"
3;node;;pp_link_fbw.c;__vector_12;155;5;157;19;0;0;0;;1;" tmp = ((uint8_t *)&to_fbw)[idx_buf]; (*(volatile uint8_t *)((15) + 32)) = tmp; xor_out ^= tmp;"
4;node;;pp_link_fbw.c;__vector_12;154;7;154;53;0;0;0;;3,2;" idx_buf < (sizeof(struct inter_mcu_msg) + 1) - 1;"
5;node;;pp_link_fbw.c;__vector_12;149;5;152;11;0;0;0;;0;" link_fbw_receive_complete = (!0); spi_cur_slave = 0; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((24) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((13) + 32)))))) &= ~(1 << (7)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((13) + 32)))))) &= ~(1 << (6)); return;;"
6;node;;pp_link_fbw.c;__vector_12;148;7;148;24;0;0;0;;5;" link_fbw_nb_err++;"
7;node;;pp_link_fbw.c;__vector_12;144;7;145;44;0;0;0;;5;" link_fbw_receive_valid = (!0); link_fbw_fbw_nb_err = from_fbw.nb_err;"
8;node;;pp_link_fbw.c;__vector_12;142;5;143;22;0;0;0;;7,6;" tmp = (*(volatile uint8_t *)((15) + 32)); tmp == xor_in;"
9;node;;pp_link_fbw.c;__vector_12;138;3;141;50;0;0;0;;8,4;" uint8_t tmp;; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((55) + 32)))))) &= ~(1 << (4)); idx_buf++; idx_buf == (sizeof(struct inter_mcu_msg) + 1);"
10;entry;;pp_link_fbw.c;__vector_12;137;2;137;2;0;0;0;;9;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_link_fbw.c;link_fbw_init;117;1;117;1;0;0;0;;;""
1;node;;pp_link_fbw.c;link_fbw_init;115;3;116;32;0;0;0;;0;" link_fbw_nb_err (ImplicitCastExpr, LValueToRValue, uint8_t); link_fbw_receive_complete = 0;"
2;entry;;pp_link_fbw.c;link_fbw_init;114;27;114;27;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_link_fbw.c;link_fbw_on_spi_it;135;1;135;1;0;0;0;;;""
1;node;;pp_link_fbw.c;link_fbw_on_spi_it;132;3;134;97;0;0;0;;0;" (*(volatile uint16_t *)((42) + 32)) = (*(volatile uint16_t *)((44) + 32)) + 200; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((54) + 32)))))) |= (1 << (4)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((55) + 32)))))) |= (1 << (4));"
2;entry;;pp_link_fbw.c;link_fbw_on_spi_it;131;34;131;34;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_link_fbw.c;link_fbw_send;130;1;130;1;0;0;0;;;""
1;node;;pp_link_fbw.c;link_fbw_send;123;243;129;29;0;0;0;;0;" (*(volatile uint8_t *)((13) + 32)) |= (1 << (7)); spi_cur_slave = 1; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((24) + 32)))))) &= ~(1 << (0)); idx_buf = 0; xor_in = 0; xor_out = ((uint8_t *)&to_fbw)[idx_buf]; (*(volatile uint8_t *)((15) + 32)) = xor_out; link_fbw_receive_valid = 0;"
2;node;;pp_link_fbw.c;link_fbw_send;123;197;123;241;0;0;0;;1;" foo = (*(volatile uint8_t *)((15) + 32));"
3;node;;pp_link_fbw.c;link_fbw_send;123;5;123;194;0;0;0;;2,1;" uint8_t foo;; (*(volatile uint8_t *)((13) + 32)) = (1 << (6)) | (1 << (4)) | (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((14) + 32)))))) & (1 << (7));"
4;node;;pp_link_fbw.c;link_fbw_send;120;5;121;11;0;0;0;;0;" spi_nb_ovrn++; return;;"
5;node;;pp_link_fbw.c;link_fbw_send;119;7;119;25;0;0;0;;4,3;" spi_cur_slave != 0;"
6;entry;;pp_link_fbw.c;link_fbw_send;118;27;118;27;0;0;0;;5;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;altitude_control_task;441;1;441;1;0;0;0;;;""
1;node;;pp_main.c;altitude_control_task;439;10;439;28;0;0;1;altitude_pid_run;0;" altitude_pid_run();"
2;node;;pp_main.c;altitude_control_task;438;7;438;25;0;0;0;;1,0;" vertical_mode == 3;"
3;node;;pp_main.c;altitude_control_task;437;24;437;38;0;0;0;;2,0;" pprz_mode == 3;"
4;node;;pp_main.c;altitude_control_task;437;6;437;20;0;0;0;;2,3;" pprz_mode == 2;"
5;entry;;pp_main.c;altitude_control_task;436;2;436;2;0;0;0;;4;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;climb_control_task;453;1;453;1;0;0;0;;;""
1;node;;pp_main.c;climb_control_task;451;7;451;23;0;0;0;;0;" desired_gaz = 0.;"
2;node;;pp_main.c;climb_control_task;450;51;450;58;0;0;0;;1,0;" !launch;"
3;node;;pp_main.c;climb_control_task;450;25;450;47;0;0;0;;2,0;" !estimator_flight_time;"
4;node;;pp_main.c;climb_control_task;450;9;450;20;0;0;0;;1,3;" low_battery (ImplicitCastExpr, IntegralCast, int);"
5;node;;pp_main.c;climb_control_task;449;7;449;36;0;0;0;;4;" desired_gaz = nav_desired_gaz;"
6;node;;pp_main.c;climb_control_task;448;9;448;27;0;0;0;;5,4;" vertical_mode == 1;"
7;node;;pp_main.c;climb_control_task;447;10;447;25;0;0;1;climb_pid_run;6;" climb_pid_run();"
8;node;;pp_main.c;climb_control_task;446;6;446;24;0;0;0;;7,6;" vertical_mode >= 2;"
9;node;;pp_main.c;climb_control_task;444;26;444;40;0;0;0;;8,0;" pprz_mode == 3;"
10;node;;pp_main.c;climb_control_task;444;8;444;22;0;0;0;;8,9;" pprz_mode == 2;"
11;entry;;pp_main.c;climb_control_task;443;2;443;2;0;0;0;;10;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;copy_from_to_fbw;368;1;368;1;0;0;0;;;""
1;node;;pp_main.c;copy_from_to_fbw;366;3;367;20;0;0;0;;0;" to_fbw.channels[3] = from_fbw.channels[3]; to_fbw.status = 0;"
2;entry;;pp_main.c;copy_from_to_fbw;365;40;365;40;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;copysign;79;1;79;1;0;0;0;;;""
1;node;;pp_main.c;copysign;73;5;78;15;0;0;0;;0;" asm (\"bst\t%D2, 7\t\n\tbld\t%D0, 7\t\" : \"=r\" (__x) : \"0\" (__x), \"r\" (__y));; return __x;;"
2;entry;;pp_main.c;copysign;72;2;72;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;events_update;364;1;364;1;0;0;0;;;""
1;node;;pp_main.c;events_update;363;172;363;202;0;0;0;;0;" event2_cpt = 0; rc_event_2 = 0;"
2;node;;pp_main.c;events_update;363;142;363;159;0;0;0;;0;" rc_event_2 = (!0);"
3;node;;pp_main.c;events_update;363;106;363;140;0;0;0;;2,0;" event2_cpt++; event2_cpt == 20;"
4;node;;pp_main.c;events_update;363;87;363;102;0;0;0;;3,0;" event2_cpt < 20;"
5;node;;pp_main.c;events_update;363;34;363;78;0;0;0;;4,1;" from_fbw.channels[5] < (int)(-0.75 * (600 * 16));"
6;node;;pp_main.c;events_update;363;8;363;30;0;0;0;;5,1;" inflight_calib_mode == 0;"
7;node;;pp_main.c;events_update;362;171;362;201;0;0;0;;6;" event1_cpt = 0; rc_event_1 = 0;"
8;node;;pp_main.c;events_update;362;141;362;158;0;0;0;;6;" rc_event_1 = (!0);"
9;node;;pp_main.c;events_update;362;105;362;139;0;0;0;;8,6;" event1_cpt++; event1_cpt == 20;"
10;node;;pp_main.c;events_update;362;86;362;101;0;0;0;;9,6;" event1_cpt < 20;"
11;node;;pp_main.c;events_update;362;34;362;77;0;0;0;;10,7;" from_fbw.channels[5] > (int)(0.75 * (600 * 16));"
12;node;;pp_main.c;events_update;360;3;362;30;0;0;0;;11,7;" static uint16_t event1_cpt = 0;; static uint16_t event2_cpt = 0;; inflight_calib_mode == 0;"
13;entry;;pp_main.c;events_update;359;43;359;43;0;0;0;;12;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;ground_calibrate;340;1;340;1;0;0;0;;;""
1;node;;pp_main.c;ground_calibrate;320;3;321;23;0;0;0;;2,75,95,0;" static uint8_t calib_status = 0;; calib_status (ImplicitCastExpr, IntegralCast, int);"
2;virtual node;case 2;pp_main.c;ground_calibrate;338;5;338;10;0;0;0;;0;""
3;virtual node;;pp_main.c;ground_calibrate;336;5;336;10;0;0;0;;0;""
4;node;;pp_main.c;ground_calibrate;334;1077;334;1092;0;0;0;;3;" modem_nb_ovrn++;"
5;node;;pp_main.c;ground_calibrate;334;870;334;1060;0;0;0;;3;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
6;node;;pp_main.c;ground_calibrate;334;854;334;865;0;0;0;;5;" tx_tail = 0;"
7;node;;pp_main.c;ground_calibrate;334;778;334;851;0;0;0;;6,5;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
8;node;;pp_main.c;ground_calibrate;334;718;334;772;0;0;0;;7,3;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
9;node;;pp_main.c;ground_calibrate;334;696;334;707;0;0;0;;8;" tx_head = 0;"
10;node;;pp_main.c;ground_calibrate;334;641;334;694;0;0;0;;9,8;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
11;node;;pp_main.c;ground_calibrate;334;623;334;634;0;0;0;;10;" tx_head = 0;"
12;node;;pp_main.c;ground_calibrate;334;568;334;621;0;0;0;;11,10;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
13;node;;pp_main.c;ground_calibrate;334;545;334;556;0;0;0;;12;" tx_head = 0;"
14;node;;pp_main.c;ground_calibrate;334;412;334;543;0;0;0;;13,12;" tx_buf[tx_head] = *((uint8_t *)(&ir_contrast) + 1); ck_a += *((uint8_t *)(&ir_contrast) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
15;node;;pp_main.c;ground_calibrate;334;394;334;405;0;0;0;;14;" tx_head = 0;"
16;node;;pp_main.c;ground_calibrate;334;239;334;392;0;0;0;;15,14;" ck_a = 3; ck_b = 3; tx_buf[tx_head] = *((uint8_t *)(&ir_contrast)); ck_a += *((uint8_t *)(&ir_contrast)); ck_b += ck_a; tx_head++; tx_head >= 255;"
17;node;;pp_main.c;ground_calibrate;334;223;334;234;0;0;0;;16;" tx_head = 0;"
18;node;;pp_main.c;ground_calibrate;334;171;334;221;0;0;0;;17,16;" tx_buf[tx_head] = 3; tx_head++; tx_head >= 255;"
19;node;;pp_main.c;ground_calibrate;334;153;334;164;0;0;0;;18;" tx_head = 0;"
20;node;;pp_main.c;ground_calibrate;334;98;334;151;0;0;0;;19,18;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
21;node;;pp_main.c;ground_calibrate;334;14;334;89;0;0;0;;20,4;" [B24.2] ? [B22.1] : [B23.1];"
22;node;;pp_main.c;ground_calibrate;334;32;334;63;0;0;0;;21;" 6 < (255 - (tx_head - tx_tail));"
23;node;;pp_main.c;ground_calibrate;334;66;334;89;0;0;0;;21;" 6 < (tx_tail - tx_head);"
24;node;;pp_main.c;ground_calibrate;333;7;334;30;0;0;0;;22,23;" calib_status = 2; tx_head >= tx_tail;"
25;node;;pp_main.c;ground_calibrate;332;3321;332;3336;0;0;0;;24;" modem_nb_ovrn++;"
26;node;;pp_main.c;ground_calibrate;332;3114;332;3304;0;0;0;;24;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
27;node;;pp_main.c;ground_calibrate;332;3098;332;3109;0;0;0;;26;" tx_tail = 0;"
28;node;;pp_main.c;ground_calibrate;332;3022;332;3095;0;0;0;;27,26;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
29;node;;pp_main.c;ground_calibrate;332;2962;332;3016;0;0;0;;28,24;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
30;node;;pp_main.c;ground_calibrate;332;2940;332;2951;0;0;0;;29;" tx_head = 0;"
31;node;;pp_main.c;ground_calibrate;332;2885;332;2938;0;0;0;;30,29;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
32;node;;pp_main.c;ground_calibrate;332;2867;332;2878;0;0;0;;31;" tx_head = 0;"
33;node;;pp_main.c;ground_calibrate;332;2812;332;2865;0;0;0;;32,31;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
34;node;;pp_main.c;ground_calibrate;332;2789;332;2800;0;0;0;;33;" tx_head = 0;"
35;node;;pp_main.c;ground_calibrate;332;2646;332;2787;0;0;0;;34,33;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral) + 1); ck_a += *((uint8_t *)(&ir_pitch_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
36;node;;pp_main.c;ground_calibrate;332;2628;332;2639;0;0;0;;35;" tx_head = 0;"
37;node;;pp_main.c;ground_calibrate;332;2489;332;2626;0;0;0;;36,35;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral)); ck_a += *((uint8_t *)(&ir_pitch_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
38;node;;pp_main.c;ground_calibrate;332;2466;332;2477;0;0;0;;37;" tx_head = 0;"
39;node;;pp_main.c;ground_calibrate;332;2325;332;2464;0;0;0;;38,37;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral) + 1); ck_a += *((uint8_t *)(&ir_roll_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
40;node;;pp_main.c;ground_calibrate;332;2307;332;2318;0;0;0;;39;" tx_head = 0;"
41;node;;pp_main.c;ground_calibrate;332;2170;332;2305;0;0;0;;40,39;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral)); ck_a += *((uint8_t *)(&ir_roll_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
42;node;;pp_main.c;ground_calibrate;332;2147;332;2158;0;0;0;;41;" tx_head = 0;"
43;node;;pp_main.c;ground_calibrate;332;1998;332;2145;0;0;0;;42,41;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
44;node;;pp_main.c;ground_calibrate;332;1980;332;1991;0;0;0;;43;" tx_head = 0;"
45;node;;pp_main.c;ground_calibrate;332;1831;332;1978;0;0;0;;44,43;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
46;node;;pp_main.c;ground_calibrate;332;1813;332;1824;0;0;0;;45;" tx_head = 0;"
47;node;;pp_main.c;ground_calibrate;332;1664;332;1811;0;0;0;;46,45;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
48;node;;pp_main.c;ground_calibrate;332;1646;332;1657;0;0;0;;47;" tx_head = 0;"
49;node;;pp_main.c;ground_calibrate;332;1501;332;1644;0;0;0;;48,47;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir)); ck_a += *((uint8_t *)(&estimator_rad_of_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
50;node;;pp_main.c;ground_calibrate;332;1478;332;1489;0;0;0;;49;" tx_head = 0;"
51;node;;pp_main.c;ground_calibrate;332;1341;332;1476;0;0;0;;50,49;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 3); ck_a += *((uint8_t *)(&estimator_rad) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
52;node;;pp_main.c;ground_calibrate;332;1323;332;1334;0;0;0;;51;" tx_head = 0;"
53;node;;pp_main.c;ground_calibrate;332;1186;332;1321;0;0;0;;52,51;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 2); ck_a += *((uint8_t *)(&estimator_rad) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
54;node;;pp_main.c;ground_calibrate;332;1168;332;1179;0;0;0;;53;" tx_head = 0;"
55;node;;pp_main.c;ground_calibrate;332;1031;332;1166;0;0;0;;54,53;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 1); ck_a += *((uint8_t *)(&estimator_rad) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
56;node;;pp_main.c;ground_calibrate;332;1013;332;1024;0;0;0;;55;" tx_head = 0;"
57;node;;pp_main.c;ground_calibrate;332;880;332;1011;0;0;0;;56,55;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad)); ck_a += *((uint8_t *)(&estimator_rad)); ck_b += ck_a; tx_head++; tx_head >= 255;"
58;node;;pp_main.c;ground_calibrate;332;857;332;868;0;0;0;;57;" tx_head = 0;"
59;node;;pp_main.c;ground_calibrate;332;722;332;855;0;0;0;;58,57;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 3); ck_a += *((uint8_t *)(&estimator_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
60;node;;pp_main.c;ground_calibrate;332;704;332;715;0;0;0;;59;" tx_head = 0;"
61;node;;pp_main.c;ground_calibrate;332;569;332;702;0;0;0;;60,59;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 2); ck_a += *((uint8_t *)(&estimator_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
62;node;;pp_main.c;ground_calibrate;332;551;332;562;0;0;0;;61;" tx_head = 0;"
63;node;;pp_main.c;ground_calibrate;332;416;332;549;0;0;0;;62,61;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 1); ck_a += *((uint8_t *)(&estimator_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
64;node;;pp_main.c;ground_calibrate;332;398;332;409;0;0;0;;63;" tx_head = 0;"
65;node;;pp_main.c;ground_calibrate;332;241;332;396;0;0;0;;64,63;" ck_a = 5; ck_b = 5; tx_buf[tx_head] = *((uint8_t *)(&estimator_ir)); ck_a += *((uint8_t *)(&estimator_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
66;node;;pp_main.c;ground_calibrate;332;225;332;236;0;0;0;;65;" tx_head = 0;"
67;node;;pp_main.c;ground_calibrate;332;173;332;223;0;0;0;;66,65;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
68;node;;pp_main.c;ground_calibrate;332;155;332;166;0;0;0;;67;" tx_head = 0;"
69;node;;pp_main.c;ground_calibrate;332;100;332;153;0;0;0;;68,67;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
70;node;;pp_main.c;ground_calibrate;332;14;332;91;0;0;0;;69,25;" [B73.3] ? [B71.1] : [B72.1];"
71;node;;pp_main.c;ground_calibrate;332;32;332;64;0;0;0;;70;" 20 < (255 - (tx_head - tx_tail));"
72;node;;pp_main.c;ground_calibrate;332;67;332;91;0;0;0;;70;" 20 < (tx_tail - tx_head);"
73;node;;pp_main.c;ground_calibrate;330;7;332;30;0;0;1;ir_gain_calib;71,72;" ir_gain_calib(); estimator_rad_of_ir = ir_rad_of_ir; tx_head >= tx_tail;"
74;node;;pp_main.c;ground_calibrate;329;54;329;85;0;0;0;;73,3;" from_fbw.channels[1] > 200 * 16;"
75;node;case 1;pp_main.c;ground_calibrate;329;10;329;50;0;0;0;;73,74;" from_fbw.channels[1] < (-(600 * 16) / 2);"
76;virtual node;;pp_main.c;ground_calibrate;327;5;327;10;0;0;0;;0;""
77;node;;pp_main.c;ground_calibrate;325;774;325;789;0;0;0;;76;" modem_nb_ovrn++;"
78;node;;pp_main.c;ground_calibrate;325;567;325;757;0;0;0;;76;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
79;node;;pp_main.c;ground_calibrate;325;551;325;562;0;0;0;;78;" tx_tail = 0;"
80;node;;pp_main.c;ground_calibrate;325;475;325;548;0;0;0;;79,78;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
81;node;;pp_main.c;ground_calibrate;325;415;325;469;0;0;0;;80,76;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
82;node;;pp_main.c;ground_calibrate;325;393;325;404;0;0;0;;81;" tx_head = 0;"
83;node;;pp_main.c;ground_calibrate;325;338;325;391;0;0;0;;82,81;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
84;node;;pp_main.c;ground_calibrate;325;320;325;331;0;0;0;;83;" tx_head = 0;"
85;node;;pp_main.c;ground_calibrate;325;239;325;318;0;0;0;;84,83;" ck_a = 2; ck_b = 2; tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
86;node;;pp_main.c;ground_calibrate;325;223;325;234;0;0;0;;85;" tx_head = 0;"
87;node;;pp_main.c;ground_calibrate;325;171;325;221;0;0;0;;86,85;" tx_buf[tx_head] = 2; tx_head++; tx_head >= 255;"
88;node;;pp_main.c;ground_calibrate;325;153;325;164;0;0;0;;87;" tx_head = 0;"
89;node;;pp_main.c;ground_calibrate;325;98;325;151;0;0;0;;88,87;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
90;node;;pp_main.c;ground_calibrate;325;14;325;89;0;0;0;;89,77;" [B93.2] ? [B91.1] : [B92.1];"
91;node;;pp_main.c;ground_calibrate;325;32;325;63;0;0;0;;90;" 4 < (255 - (tx_head - tx_tail));"
92;node;;pp_main.c;ground_calibrate;325;66;325;89;0;0;0;;90;" 4 < (tx_tail - tx_head);"
93;node;;pp_main.c;ground_calibrate;324;7;325;30;0;0;0;;91,92;" calib_status = 1; tx_head >= tx_tail;"
94;node;;pp_main.c;ground_calibrate;323;25;323;39;0;0;0;;93,76;" pprz_mode == 1;"
95;node;case 0;pp_main.c;ground_calibrate;323;9;323;21;0;0;0;;94,76;" cputime < 10;"
96;entry;;pp_main.c;ground_calibrate;319;39;319;39;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;inflight_calib_mode_update;382;1;382;1;0;0;0;;;""
1;node;;pp_main.c;inflight_calib_mode_update;381;202;381;210;0;0;0;;0;" return 0;;"
2;node;;pp_main.c;inflight_calib_mode_update;381;155;381;198;0;0;0;;0;" inflight_calib_mode = new_mode; return (!0);;"
3;node;;pp_main.c;inflight_calib_mode_update;381;5;381;151;0;0;0;;2,1;" [B9.1] ? [B4.1] : ([B5.1]); uint8_t new_mode = (from_fbw.channels[8] < (-(600 * 16) / 2) ? 2 : (from_fbw.channels[8] < 200 * 16 ? 0 : 1));; inflight_calib_mode != new_mode;"
4;node;;pp_main.c;inflight_calib_mode_update;381;68;381;69;0;0;0;;3;" 2;"
#5;node;;pp_main.c;inflight_calib_mode_update;381;73;381;112;0;0;0;;3;" [B8.1] ? [B6.1] : [B7.1];" # LLVM inconvenience: virtual BB (there is no LHS, so this is not a BB)
6;node;;pp_main.c;inflight_calib_mode_update;381;107;381;108;0;0;0;;3;" 0;"
7;node;;pp_main.c;inflight_calib_mode_update;381;111;381;112;0;0;0;;3;" 1;"
8;node;;pp_main.c;inflight_calib_mode_update;381;73;381;104;0;0;0;;6,7;" from_fbw.channels[8] < 200 * 16;"
9;node;;pp_main.c;inflight_calib_mode_update;381;25;381;65;0;0;0;;4,8;" from_fbw.channels[8] < (-(600 * 16) / 2);"
10;entry;;pp_main.c;inflight_calib_mode_update;380;53;380;53;0;0;0;;9;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;ir_estim_mode_update;349;1;349;1;0;0;0;;;""
1;node;;pp_main.c;ir_estim_mode_update;348;140;348;148;0;0;0;;0;" return 0;;"
2;node;;pp_main.c;ir_estim_mode_update;348;99;348;136;0;0;0;;0;" ir_estim_mode = new_mode; return (!0);;"
3;node;;pp_main.c;ir_estim_mode_update;348;5;348;95;0;0;0;;2,1;" [B6.1] ? [B4.1] : [B5.1]; uint8_t new_mode = (from_fbw.channels[7] < 200 * 16 ? 0 : 1);; ir_estim_mode != new_mode;"
4;node;;pp_main.c;ir_estim_mode_update;348;59;348;60;0;0;0;;3;" 0;"
5;node;;pp_main.c;ir_estim_mode_update;348;62;348;63;0;0;0;;3;" 1;"
6;node;;pp_main.c;ir_estim_mode_update;348;25;348;56;0;0;0;;4,5;" from_fbw.channels[7] < 200 * 16;"
7;entry;;pp_main.c;ir_estim_mode_update;347;46;347;46;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;isfinite;70;1;70;1;0;0;0;;;""
1;node;;pp_main.c;isfinite;61;5;69;25;0;0;0;;0;" unsigned char __exp;; asm (\"mov\t%0, %C1\t\t\n\tlsl\t%0\t\t\n\tmov\t%0, %D1\t\t\n\trol\t%0\t\t\" : \"=r\" (__exp) : \"r\" (__x));; return __exp != 255;;"
2;entry;;pp_main.c;isfinite;60;2;60;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;mcu1_status_update;358;1;358;1;0;0;0;;;""
1;node;;pp_main.c;mcu1_status_update;357;3;357;11;0;0;0;;0;" return 0;;"
2;node;;pp_main.c;mcu1_status_update;353;5;355;19;0;0;0;;0;" bool_t changed = ((mcu1_status & 3) != (new_mode & 3));; mcu1_status = new_mode; return changed;;"
3;node;;pp_main.c;mcu1_status_update;351;3;352;30;0;0;0;;2,1;" uint8_t new_mode = from_fbw.status;; mcu1_status != new_mode;"
4;entry;;pp_main.c;mcu1_status_update;350;44;350;44;0;0;0;;3;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;navigation_task;434;1;434;1;0;0;0;;;""
1;node;;pp_main.c;navigation_task;432;5;432;36;0;0;0;;0;" desired_roll = nav_desired_roll;"
2;node;;pp_main.c;navigation_task;431;7;431;23;0;0;1;course_pid_run;1;" course_pid_run();"
3;node;;pp_main.c;navigation_task;430;9;430;26;0;0;0;;2,1;" lateral_mode >= 3;"
4;node;;pp_main.c;navigation_task;428;25;428;39;0;0;0;;3,0;" pprz_mode == 3;"
5;node;;pp_main.c;navigation_task;428;7;428;21;0;0;0;;3,4;" pprz_mode == 2;"
6;node;;pp_main.c;navigation_task;427;4739;427;4754;0;0;0;;5;" modem_nb_ovrn++;"
7;node;;pp_main.c;navigation_task;427;4532;427;4722;0;0;0;;5;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
8;node;;pp_main.c;navigation_task;427;4516;427;4527;0;0;0;;7;" tx_tail = 0;"
9;node;;pp_main.c;navigation_task;427;4440;427;4513;0;0;0;;8,7;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
10;node;;pp_main.c;navigation_task;427;4380;427;4434;0;0;0;;9,5;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
11;node;;pp_main.c;navigation_task;427;4358;427;4369;0;0;0;;10;" tx_head = 0;"
12;node;;pp_main.c;navigation_task;427;4303;427;4356;0;0;0;;11,10;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
13;node;;pp_main.c;navigation_task;427;4285;427;4296;0;0;0;;12;" tx_head = 0;"
14;node;;pp_main.c;navigation_task;427;4230;427;4283;0;0;0;;13,12;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
15;node;;pp_main.c;navigation_task;427;4207;427;4218;0;0;0;;14;" tx_head = 0;"
16;node;;pp_main.c;navigation_task;427;4070;427;4205;0;0;0;;15,14;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_home) + 3); ck_a += *((uint8_t *)(&dist2_to_home) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
17;node;;pp_main.c;navigation_task;427;4052;427;4063;0;0;0;;16;" tx_head = 0;"
18;node;;pp_main.c;navigation_task;427;3915;427;4050;0;0;0;;17,16;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_home) + 2); ck_a += *((uint8_t *)(&dist2_to_home) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
19;node;;pp_main.c;navigation_task;427;3897;427;3908;0;0;0;;18;" tx_head = 0;"
20;node;;pp_main.c;navigation_task;427;3760;427;3895;0;0;0;;19,18;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_home) + 1); ck_a += *((uint8_t *)(&dist2_to_home) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
21;node;;pp_main.c;navigation_task;427;3742;427;3753;0;0;0;;20;" tx_head = 0;"
22;node;;pp_main.c;navigation_task;427;3609;427;3740;0;0;0;;21,20;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_home)); ck_a += *((uint8_t *)(&dist2_to_home)); ck_b += ck_a; tx_head++; tx_head >= 255;"
23;node;;pp_main.c;navigation_task;427;3586;427;3597;0;0;0;;22;" tx_head = 0;"
24;node;;pp_main.c;navigation_task;427;3451;427;3584;0;0;0;;23,22;" tx_buf[tx_head] = *((uint8_t *)(&course_pgain) + 3); ck_a += *((uint8_t *)(&course_pgain) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
25;node;;pp_main.c;navigation_task;427;3433;427;3444;0;0;0;;24;" tx_head = 0;"
26;node;;pp_main.c;navigation_task;427;3298;427;3431;0;0;0;;25,24;" tx_buf[tx_head] = *((uint8_t *)(&course_pgain) + 2); ck_a += *((uint8_t *)(&course_pgain) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
27;node;;pp_main.c;navigation_task;427;3280;427;3291;0;0;0;;26;" tx_head = 0;"
28;node;;pp_main.c;navigation_task;427;3145;427;3278;0;0;0;;27,26;" tx_buf[tx_head] = *((uint8_t *)(&course_pgain) + 1); ck_a += *((uint8_t *)(&course_pgain) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
29;node;;pp_main.c;navigation_task;427;3127;427;3138;0;0;0;;28;" tx_head = 0;"
30;node;;pp_main.c;navigation_task;427;2996;427;3125;0;0;0;;29,28;" tx_buf[tx_head] = *((uint8_t *)(&course_pgain)); ck_a += *((uint8_t *)(&course_pgain)); ck_b += ck_a; tx_head++; tx_head >= 255;"
31;node;;pp_main.c;navigation_task;427;2973;427;2984;0;0;0;;30;" tx_head = 0;"
32;node;;pp_main.c;navigation_task;427;2840;427;2971;0;0;0;;31,30;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_wp) + 3); ck_a += *((uint8_t *)(&dist2_to_wp) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
33;node;;pp_main.c;navigation_task;427;2822;427;2833;0;0;0;;32;" tx_head = 0;"
34;node;;pp_main.c;navigation_task;427;2689;427;2820;0;0;0;;33,32;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_wp) + 2); ck_a += *((uint8_t *)(&dist2_to_wp) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
35;node;;pp_main.c;navigation_task;427;2671;427;2682;0;0;0;;34;" tx_head = 0;"
36;node;;pp_main.c;navigation_task;427;2538;427;2669;0;0;0;;35,34;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_wp) + 1); ck_a += *((uint8_t *)(&dist2_to_wp) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
37;node;;pp_main.c;navigation_task;427;2520;427;2531;0;0;0;;36;" tx_head = 0;"
38;node;;pp_main.c;navigation_task;427;2391;427;2518;0;0;0;;37,36;" tx_buf[tx_head] = *((uint8_t *)(&dist2_to_wp)); ck_a += *((uint8_t *)(&dist2_to_wp)); ck_b += ck_a; tx_head++; tx_head >= 255;"
39;node;;pp_main.c;navigation_task;427;2368;427;2379;0;0;0;;38;" tx_head = 0;"
40;node;;pp_main.c;navigation_task;427;2229;427;2366;0;0;0;;39,38;" tx_buf[tx_head] = *((uint8_t *)(&desired_course) + 3); ck_a += *((uint8_t *)(&desired_course) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
41;node;;pp_main.c;navigation_task;427;2211;427;2222;0;0;0;;40;" tx_head = 0;"
42;node;;pp_main.c;navigation_task;427;2072;427;2209;0;0;0;;41,40;" tx_buf[tx_head] = *((uint8_t *)(&desired_course) + 2); ck_a += *((uint8_t *)(&desired_course) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
43;node;;pp_main.c;navigation_task;427;2054;427;2065;0;0;0;;42;" tx_head = 0;"
44;node;;pp_main.c;navigation_task;427;1915;427;2052;0;0;0;;43,42;" tx_buf[tx_head] = *((uint8_t *)(&desired_course) + 1); ck_a += *((uint8_t *)(&desired_course) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
45;node;;pp_main.c;navigation_task;427;1897;427;1908;0;0;0;;44;" tx_head = 0;"
46;node;;pp_main.c;navigation_task;427;1762;427;1895;0;0;0;;45,44;" tx_buf[tx_head] = *((uint8_t *)(&desired_course)); ck_a += *((uint8_t *)(&desired_course)); ck_b += ck_a; tx_head++; tx_head >= 255;"
47;node;;pp_main.c;navigation_task;427;1739;427;1750;0;0;0;;46;" tx_head = 0;"
48;node;;pp_main.c;navigation_task;427;1606;427;1737;0;0;0;;47,46;" tx_buf[tx_head] = *((uint8_t *)(&estimator_y) + 3); ck_a += *((uint8_t *)(&estimator_y) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
49;node;;pp_main.c;navigation_task;427;1588;427;1599;0;0;0;;48;" tx_head = 0;"
50;node;;pp_main.c;navigation_task;427;1455;427;1586;0;0;0;;49,48;" tx_buf[tx_head] = *((uint8_t *)(&estimator_y) + 2); ck_a += *((uint8_t *)(&estimator_y) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
51;node;;pp_main.c;navigation_task;427;1437;427;1448;0;0;0;;50;" tx_head = 0;"
52;node;;pp_main.c;navigation_task;427;1304;427;1435;0;0;0;;51,50;" tx_buf[tx_head] = *((uint8_t *)(&estimator_y) + 1); ck_a += *((uint8_t *)(&estimator_y) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
53;node;;pp_main.c;navigation_task;427;1286;427;1297;0;0;0;;52;" tx_head = 0;"
54;node;;pp_main.c;navigation_task;427;1157;427;1284;0;0;0;;53,52;" tx_buf[tx_head] = *((uint8_t *)(&estimator_y)); ck_a += *((uint8_t *)(&estimator_y)); ck_b += ck_a; tx_head++; tx_head >= 255;"
55;node;;pp_main.c;navigation_task;427;1134;427;1145;0;0;0;;54;" tx_head = 0;"
56;node;;pp_main.c;navigation_task;427;1001;427;1132;0;0;0;;55,54;" tx_buf[tx_head] = *((uint8_t *)(&estimator_x) + 3); ck_a += *((uint8_t *)(&estimator_x) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
57;node;;pp_main.c;navigation_task;427;983;427;994;0;0;0;;56;" tx_head = 0;"
58;node;;pp_main.c;navigation_task;427;850;427;981;0;0;0;;57,56;" tx_buf[tx_head] = *((uint8_t *)(&estimator_x) + 2); ck_a += *((uint8_t *)(&estimator_x) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
59;node;;pp_main.c;navigation_task;427;832;427;843;0;0;0;;58;" tx_head = 0;"
60;node;;pp_main.c;navigation_task;427;699;427;830;0;0;0;;59,58;" tx_buf[tx_head] = *((uint8_t *)(&estimator_x) + 1); ck_a += *((uint8_t *)(&estimator_x) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
61;node;;pp_main.c;navigation_task;427;681;427;692;0;0;0;;60;" tx_head = 0;"
62;node;;pp_main.c;navigation_task;427;552;427;679;0;0;0;;61,60;" tx_buf[tx_head] = *((uint8_t *)(&estimator_x)); ck_a += *((uint8_t *)(&estimator_x)); ck_b += ck_a; tx_head++; tx_head >= 255;"
63;node;;pp_main.c;navigation_task;427;532;427;543;0;0;0;;62;" tx_head = 0;"
64;node;;pp_main.c;navigation_task;427;407;427;530;0;0;0;;63,62;" tx_buf[tx_head] = *((uint8_t *)(&nav_stage)); ck_a += *((uint8_t *)(&nav_stage)); ck_b += ck_a; tx_head++; tx_head >= 255;"
65;node;;pp_main.c;navigation_task;427;389;427;400;0;0;0;;64;" tx_head = 0;"
66;node;;pp_main.c;navigation_task;427;238;427;387;0;0;0;;65,64;" ck_a = 10; ck_b = 10; tx_buf[tx_head] = *((uint8_t *)(&nav_block)); ck_a += *((uint8_t *)(&nav_block)); ck_b += ck_a; tx_head++; tx_head >= 255;"
67;node;;pp_main.c;navigation_task;427;222;427;233;0;0;0;;66;" tx_head = 0;"
68;node;;pp_main.c;navigation_task;427;169;427;220;0;0;0;;67,66;" tx_buf[tx_head] = 10; tx_head++; tx_head >= 255;"
69;node;;pp_main.c;navigation_task;427;151;427;162;0;0;0;;68;" tx_head = 0;"
70;node;;pp_main.c;navigation_task;427;96;427;149;0;0;0;;69,68;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
71;node;;pp_main.c;navigation_task;427;10;427;87;0;0;0;;70,6;" [B74.1] ? [B72.1] : [B73.1];"
72;node;;pp_main.c;navigation_task;427;28;427;60;0;0;0;;71;" 30 < (255 - (tx_head - tx_tail));"
73;node;;pp_main.c;navigation_task;427;63;427;87;0;0;0;;71;" 30 < (tx_tail - tx_head);"
74;node;;pp_main.c;navigation_task;427;10;427;26;0;0;0;;72,73;" tx_head >= tx_tail;"
75;node;;pp_main.c;navigation_task;426;5;426;17;0;0;1;nav_update;74;" nav_update();"
76;node;;pp_main.c;navigation_task;424;5;424;15;0;0;1;nav_home;74;" nav_home();"
77;node;;pp_main.c;navigation_task;422;3;423;21;0;0;0;;76,75;" lateral_mode = 3; pprz_mode == 3;"
78;entry;;pp_main.c;navigation_task;421;31;421;31;0;0;0;;77;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;periodic_task;506;1;506;1;0;0;0;;;""
1;node;;pp_main.c;periodic_task;489;11;489;16;0;0;0;;3,6,7,2;" _20Hz (ImplicitCastExpr, IntegralCast, int);"
2;node;default;pp_main.c;periodic_task;504;5;504;21;0;0;0;;0;" fatal_error_nb++;"
3;node;case 2;pp_main.c;periodic_task;500;5;501;20;0;0;1;stabilisation_task,link_fbw_send;0;" stabilisation_task(); link_fbw_send();"
4;virtual node;;pp_main.c;periodic_task;497;5;497;10;0;0;0;;0;""
5;node;;pp_main.c;periodic_task;496;7;496;23;0;0;1;reporting_task;4;" reporting_task();"
6;node;case 1;pp_main.c;periodic_task;493;5;495;19;0;0;0;;5,4;" static uint8_t odd;; odd++; odd & 1;"
7;virtual node;case 0;pp_main.c;periodic_task;491;5;491;10;0;0;0;;0;""
8;node;;pp_main.c;periodic_task;481;10;481;14;0;0;0;;9,1;" _4Hz (ImplicitCastExpr, IntegralCast, int);"
9;node;case 0;pp_main.c;periodic_task;483;5;486;25;0;0;1;estimator_propagate_state,navigation_task,altitude_control_task,climb_control_task;1;" estimator_propagate_state(); navigation_task(); altitude_control_task(); climb_control_task();"
10;node;;pp_main.c;periodic_task;479;5;479;28;0;0;0;;8;" low_battery |= (t >= 5);"
11;node;;pp_main.c;periodic_task;478;33;478;38;0;0;0;;10;" t = 0;"
12;node;;pp_main.c;periodic_task;478;23;478;26;0;0;0;;10;" t++;"
13;node;;pp_main.c;periodic_task;474;5;478;21;0;0;0;;12,11;" cputime++; stage_time_ds = (int16_t)(stage_time_ds + 0.5); stage_time++; block_time++; vsupply < 93;"
14;node;;pp_main.c;periodic_task;473;32;473;55;0;0;0;;13;" estimator_flight_time++;"
15;node;;pp_main.c;periodic_task;473;9;473;30;0;0;0;;14,13;" estimator_flight_time (ImplicitCastExpr, LValueToRValue, uint16_t);"
16;node;;pp_main.c;periodic_task;472;7;472;12;0;0;0;;15,8;" !_1Hz;"
17;node;;pp_main.c;periodic_task;470;5;470;39;0;0;0;;16;" stage_time_ds = stage_time_ds + 0.10000000000000001;"
18;node;;pp_main.c;periodic_task;469;7;469;13;0;0;0;;17,16;" !_10Hz;"
19;node;;pp_main.c;periodic_task;468;17;468;23;0;0;0;;18;" _1Hz = 0;"
20;node;;pp_main.c;periodic_task;467;3;468;15;0;0;0;;19,18;" _1Hz++; _1Hz >= 61;"
21;node;;pp_main.c;periodic_task;466;17;466;23;0;0;0;;20;" _4Hz = 0;"
22;node;;pp_main.c;periodic_task;465;3;466;15;0;0;0;;21,20;" _4Hz++; _4Hz >= 15;"
23;node;;pp_main.c;periodic_task;464;17;464;24;0;0;0;;22;" _10Hz = 0;"
24;node;;pp_main.c;periodic_task;463;3;464;15;0;0;0;;23,22;" _10Hz++; _10Hz >= 6;"
25;node;;pp_main.c;periodic_task;462;17;462;24;0;0;0;;24;" _20Hz = 0;"
26;node;;pp_main.c;periodic_task;455;3;462;15;0;0;0;;25,24;" static uint8_t _20Hz = 0;; static uint8_t _10Hz = 0;; static uint8_t _4Hz = 0;; static uint8_t _1Hz = 0;; static uint8_t t = 0;; estimator_t += (256. * 1024. / 16 / 1.0E+6); _20Hz++; _20Hz >= 3;"
27;entry;;pp_main.c;periodic_task;454;29;454;29;0;0;0;;26;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;pprz_mode_update;346;1;346;1;0;0;0;;;""
1;node;;pp_main.c;pprz_mode_update;345;5;345;13;0;0;0;;0;" return 0;;"
2;node;;pp_main.c;pprz_mode_update;343;184;343;192;0;0;0;;0;" return 0;;"
3;node;;pp_main.c;pprz_mode_update;343;147;343;180;0;0;0;;0;" pprz_mode = new_mode; return (!0);;"
4;node;;pp_main.c;pprz_mode_update;343;7;343;143;0;0;0;;3,2;" [B10.1] ? [B5.1] : ([B6.1]); uint8_t new_mode = (from_fbw.channels[4] > 200 * 16 ? 2 : (from_fbw.channels[4] > (-(600 * 16) / 2) ? 1 : 0));; pprz_mode != new_mode;"
5;node;;pp_main.c;pprz_mode_update;343;61;343;62;0;0;0;;4;" 2;"
#6;node;;pp_main.c;pprz_mode_update;343;66;343;114;0;0;0;;4;" [B9.1] ? [B7.1] : [B8.1];" # LLVM inconvenience: virtual BB (there is no LHS, so this is not a BB)
7;node;;pp_main.c;pprz_mode_update;343;109;343;110;0;0;0;;4;" 1;"
8;node;;pp_main.c;pprz_mode_update;343;113;343;114;0;0;0;;4;" 0;"
9;node;;pp_main.c;pprz_mode_update;343;66;343;106;0;0;0;;7,8;" from_fbw.channels[4] > (-(600 * 16) / 2);"
10;node;;pp_main.c;pprz_mode_update;343;27;343;58;0;0;0;;5,9;" from_fbw.channels[4] > 200 * 16;"
11;node;;pp_main.c;pprz_mode_update;342;26;342;63;0;0;0;;10,1;" [B14.1] ? [B12.3] : [B13.1];"
12;node;;pp_main.c;pprz_mode_update;342;39;342;59;0;0;0;;11;" rc_event_1 = 0; !0; ... , ;"
13;node;;pp_main.c;pprz_mode_update;342;62;342;63;0;0;0;;11;" 0;"
14;node;;pp_main.c;pprz_mode_update;342;26;342;36;0;0;0;;12,13;" rc_event_1 (ImplicitCastExpr, IntegralCast, int);"
15;node;;pp_main.c;pprz_mode_update;342;7;342;21;0;0;0;;10,14;" pprz_mode != 3;"
16;entry;;pp_main.c;pprz_mode_update;341;42;341;42;0;0;0;;15;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;radio_control_task;420;1;420;1;0;0;0;;;""
1;node;;pp_main.c;radio_control_task;416;2;416;15;0;0;0;;0;" launch = (!0);"
2;node;;pp_main.c;radio_control_task;415;29;415;78;0;0;0;;1,0;" from_fbw.channels[0] > (pprz_t)((600 * 16) * 0.90000000000000002);"
3;node;;pp_main.c;radio_control_task;414;7;415;25;0;0;1;ground_calibrate;2,0;" ground_calibrate(); pprz_mode == 2;"
4;node;;pp_main.c;radio_control_task;410;5;413;31;0;0;1;events_update;3,0;" mcu1_ppm_cpt = from_fbw.ppm_cpt; vsupply = from_fbw.vsupply; events_update(); !estimator_flight_time;"
5;node;;pp_main.c;radio_control_task;408;7;408;41;0;0;0;;4;" desired_gaz = from_fbw.channels[0];"
6;node;;pp_main.c;radio_control_task;407;27;407;41;0;0;0;;5,4;" pprz_mode == 1;"
7;node;;pp_main.c;radio_control_task;407;9;407;23;0;0;0;;5,6;" pprz_mode == 0;"
8;node;;pp_main.c;radio_control_task;404;7;405;83;0;0;0;;7;" desired_roll = ((float)from_fbw.channels[1] / (float)(600 * 16) * -0.59999999999999998 + 0.); desired_pitch = ((float)from_fbw.channels[2] / (float)(600 * 16) * 0.5 + 0.);"
9;node;;pp_main.c;radio_control_task;403;9;403;23;0;0;0;;8,7;" pprz_mode == 1;"
10;node;;pp_main.c;radio_control_task;402;1532;402;1547;0;0;0;;9;" modem_nb_ovrn++;"
11;node;;pp_main.c;radio_control_task;402;1325;402;1515;0;0;0;;9;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
12;node;;pp_main.c;radio_control_task;402;1309;402;1320;0;0;0;;11;" tx_tail = 0;"
13;node;;pp_main.c;radio_control_task;402;1233;402;1306;0;0;0;;12,11;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
14;node;;pp_main.c;radio_control_task;402;1173;402;1227;0;0;0;;13,9;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
15;node;;pp_main.c;radio_control_task;402;1151;402;1162;0;0;0;;14;" tx_head = 0;"
16;node;;pp_main.c;radio_control_task;402;1096;402;1149;0;0;0;;15,14;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
17;node;;pp_main.c;radio_control_task;402;1078;402;1089;0;0;0;;16;" tx_head = 0;"
18;node;;pp_main.c;radio_control_task;402;1023;402;1076;0;0;0;;17,16;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
19;node;;pp_main.c;radio_control_task;402;1003;402;1014;0;0;0;;18;" tx_head = 0;"
20;node;;pp_main.c;radio_control_task;402;870;402;1001;0;0;0;;19,18;" tx_buf[tx_head] = *((uint8_t *)(&ir_estim_mode)); ck_a += *((uint8_t *)(&ir_estim_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
21;node;;pp_main.c;radio_control_task;402;852;402;863;0;0;0;;20;" tx_head = 0;"
22;node;;pp_main.c;radio_control_task;402;723;402;850;0;0;0;;21,20;" tx_buf[tx_head] = *((uint8_t *)(&mcu1_status)); ck_a += *((uint8_t *)(&mcu1_status)); ck_b += ck_a; tx_head++; tx_head >= 255;"
23;node;;pp_main.c;radio_control_task;402;705;402;716;0;0;0;;22;" tx_head = 0;"
24;node;;pp_main.c;radio_control_task;402;560;402;703;0;0;0;;23,22;" tx_buf[tx_head] = *((uint8_t *)(&inflight_calib_mode)); ck_a += *((uint8_t *)(&inflight_calib_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
25;node;;pp_main.c;radio_control_task;402;542;402;553;0;0;0;;24;" tx_head = 0;"
26;node;;pp_main.c;radio_control_task;402;409;402;540;0;0;0;;25,24;" tx_buf[tx_head] = *((uint8_t *)(&vertical_mode)); ck_a += *((uint8_t *)(&vertical_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
27;node;;pp_main.c;radio_control_task;402;391;402;402;0;0;0;;26;" tx_head = 0;"
28;node;;pp_main.c;radio_control_task;402;240;402;389;0;0;0;;27,26;" ck_a = 11; ck_b = 11; tx_buf[tx_head] = *((uint8_t *)(&pprz_mode)); ck_a += *((uint8_t *)(&pprz_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
29;node;;pp_main.c;radio_control_task;402;224;402;235;0;0;0;;28;" tx_head = 0;"
30;node;;pp_main.c;radio_control_task;402;171;402;222;0;0;0;;29,28;" tx_buf[tx_head] = 11; tx_head++; tx_head >= 255;"
31;node;;pp_main.c;radio_control_task;402;153;402;164;0;0;0;;30;" tx_head = 0;"
32;node;;pp_main.c;radio_control_task;402;98;402;151;0;0;0;;31,30;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
33;node;;pp_main.c;radio_control_task;402;14;402;89;0;0;0;;32,10;" [B36.1] ? [B34.1] : [B35.1];"
34;node;;pp_main.c;radio_control_task;402;32;402;63;0;0;0;;33;" 9 < (255 - (tx_head - tx_tail));"
35;node;;pp_main.c;radio_control_task;402;66;402;89;0;0;0;;33;" 9 < (tx_tail - tx_head);"
36;node;;pp_main.c;radio_control_task;402;14;402;30;0;0;0;;34,35;" tx_head >= tx_tail;"
37;node;;pp_main.c;radio_control_task;400;5;401;22;0;0;1;mcu1_status_update;36,9;" mcu1_status_update(); mode_changed |= [B37.1]; mode_changed (ImplicitCastExpr, LValueToRValue, uint8_t);"
38;node;;pp_main.c;radio_control_task;397;7;398;41;0;0;0;;37;" [B40.8] || [B39.1]; inflight_calib([B38.1]); mode_changed |= calib_mode_changed;"
39;node;;pp_main.c;radio_control_task;397;44;397;61;0;0;0;;38;" pprz_mode_changed (ImplicitCastExpr, IntegralCast, int);"
40;node;;pp_main.c;radio_control_task;393;7;397;40;0;0;1;pprz_mode_update,ir_estim_mode_update,inflight_calib_mode_update;38,39;" pprz_mode_update(); bool_t pprz_mode_changed = pprz_mode_update();; mode_changed |= pprz_mode_changed; ir_estim_mode_update(); mode_changed |= [B40.4]; inflight_calib_mode_update(); calib_mode_changed = [B40.6]; calib_mode_changed (ImplicitCastExpr, IntegralCast, int);"
41;node;;pp_main.c;radio_control_task;392;10;392;79;0;0;0;;40,37;" (*(volatile uint8_t *)(((uint16_t)&(from_fbw.status)))) & (1 << (2));"
42;node;;pp_main.c;radio_control_task;389;7;390;26;0;0;0;;41;" pprz_mode = 3; mode_changed = (!0);"
43;node;;pp_main.c;radio_control_task;388;124;388;141;0;0;0;;42,41;" too_far_from_home (ImplicitCastExpr, IntegralCast, int);"
44;node;;pp_main.c;radio_control_task;388;104;388;118;0;0;0;;42,43;" pprz_mode == 0;"
45;node;;pp_main.c;radio_control_task;388;86;388;100;0;0;0;;42,44;" pprz_mode == 1;"
46;node;;pp_main.c;radio_control_task;386;5;388;80;0;0;1;copy_from_to_fbw;45,43;" uint8_t mode_changed = 0;; copy_from_to_fbw(); (*(volatile uint8_t *)(((uint16_t)&(from_fbw.status)))) & (1 << (1));"
47;node;;pp_main.c;radio_control_task;384;3;385;29;0;0;0;;46,0;" bool_t calib_mode_changed;; link_fbw_receive_valid (ImplicitCastExpr, LValueToRValue, uint8_t);"
48;entry;;pp_main.c;radio_control_task;383;34;383;34;0;0;0;;47;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;receive_gps_data_task;526;1;526;1;0;0;0;;;""
1;node;;pp_main.c;receive_gps_data_task;523;3;524;24;0;0;1;use_gps_pos;0;" use_gps_pos(); gps_pos_available = 0;"
2;node;;pp_main.c;receive_gps_data_task;519;2;521;29;0;0;1;parse_gps_msg;1,0;" parse_gps_msg(); gps_msg_received = 0; gps_pos_available (ImplicitCastExpr, LValueToRValue, bool_t);"
3;entry;;pp_main.c;receive_gps_data_task;518;2;518;2;0;0;0;;2;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;reporting_task;379;1;379;1;0;0;0;;;""
1;node;;pp_main.c;reporting_task;377;20321;377;20336;0;0;0;;0;" modem_nb_ovrn++;"
2;node;;pp_main.c;reporting_task;377;20114;377;20304;0;0;0;;0;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
3;node;;pp_main.c;reporting_task;377;20098;377;20109;0;0;0;;2;" tx_tail = 0;"
4;node;;pp_main.c;reporting_task;377;20022;377;20095;0;0;0;;3,2;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
5;node;;pp_main.c;reporting_task;377;19962;377;20016;0;0;0;;4,0;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
6;node;;pp_main.c;reporting_task;377;19940;377;19951;0;0;0;;5;" tx_head = 0;"
7;node;;pp_main.c;reporting_task;377;19885;377;19938;0;0;0;;6,5;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
8;node;;pp_main.c;reporting_task;377;19867;377;19878;0;0;0;;7;" tx_head = 0;"
9;node;;pp_main.c;reporting_task;377;19812;377;19865;0;0;0;;8,7;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
10;node;;pp_main.c;reporting_task;377;19789;377;19800;0;0;0;;9;" tx_head = 0;"
11;node;;pp_main.c;reporting_task;377;19658;377;19787;0;0;0;;10,9;" tx_buf[tx_head] = *((uint8_t *)(&utm_north0) + 3); ck_a += *((uint8_t *)(&utm_north0) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
12;node;;pp_main.c;reporting_task;377;19640;377;19651;0;0;0;;11;" tx_head = 0;"
13;node;;pp_main.c;reporting_task;377;19509;377;19638;0;0;0;;12,11;" tx_buf[tx_head] = *((uint8_t *)(&utm_north0) + 2); ck_a += *((uint8_t *)(&utm_north0) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
14;node;;pp_main.c;reporting_task;377;19491;377;19502;0;0;0;;13;" tx_head = 0;"
15;node;;pp_main.c;reporting_task;377;19360;377;19489;0;0;0;;14,13;" tx_buf[tx_head] = *((uint8_t *)(&utm_north0) + 1); ck_a += *((uint8_t *)(&utm_north0) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
16;node;;pp_main.c;reporting_task;377;19342;377;19353;0;0;0;;15;" tx_head = 0;"
17;node;;pp_main.c;reporting_task;377;19215;377;19340;0;0;0;;16,15;" tx_buf[tx_head] = *((uint8_t *)(&utm_north0)); ck_a += *((uint8_t *)(&utm_north0)); ck_b += ck_a; tx_head++; tx_head >= 255;"
18;node;;pp_main.c;reporting_task;377;19192;377;19203;0;0;0;;17;" tx_head = 0;"
19;node;;pp_main.c;reporting_task;377;19063;377;19190;0;0;0;;18,17;" tx_buf[tx_head] = *((uint8_t *)(&utm_east0) + 3); ck_a += *((uint8_t *)(&utm_east0) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
20;node;;pp_main.c;reporting_task;377;19045;377;19056;0;0;0;;19;" tx_head = 0;"
21;node;;pp_main.c;reporting_task;377;18916;377;19043;0;0;0;;20,19;" tx_buf[tx_head] = *((uint8_t *)(&utm_east0) + 2); ck_a += *((uint8_t *)(&utm_east0) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
22;node;;pp_main.c;reporting_task;377;18898;377;18909;0;0;0;;21;" tx_head = 0;"
23;node;;pp_main.c;reporting_task;377;18769;377;18896;0;0;0;;22,21;" tx_buf[tx_head] = *((uint8_t *)(&utm_east0) + 1); ck_a += *((uint8_t *)(&utm_east0) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
24;node;;pp_main.c;reporting_task;377;18751;377;18762;0;0;0;;23;" tx_head = 0;"
25;node;;pp_main.c;reporting_task;377;18600;377;18749;0;0;0;;24,23;" ck_a = 9; ck_b = 9; tx_buf[tx_head] = *((uint8_t *)(&utm_east0)); ck_a += *((uint8_t *)(&utm_east0)); ck_b += ck_a; tx_head++; tx_head >= 255;"
26;node;;pp_main.c;reporting_task;377;18584;377;18595;0;0;0;;25;" tx_head = 0;"
27;node;;pp_main.c;reporting_task;377;18532;377;18582;0;0;0;;26,25;" tx_buf[tx_head] = 9; tx_head++; tx_head >= 255;"
28;node;;pp_main.c;reporting_task;377;18514;377;18525;0;0;0;;27;" tx_head = 0;"
29;node;;pp_main.c;reporting_task;377;18459;377;18512;0;0;0;;28,27;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
30;node;;pp_main.c;reporting_task;377;18373;377;18450;0;0;0;;29,1;" [B33.1] ? [B31.1] : [B32.1];"
31;node;;pp_main.c;reporting_task;377;18391;377;18423;0;0;0;;30;" 12 < (255 - (tx_head - tx_tail));"
32;node;;pp_main.c;reporting_task;377;18426;377;18450;0;0;0;;30;" 12 < (tx_tail - tx_head);"
33;node;;pp_main.c;reporting_task;377;18373;377;18389;0;0;0;;31,32;" tx_head >= tx_tail;"
34;node;;pp_main.c;reporting_task;377;18351;377;18364;0;0;0;;33,0;" i % 100 == 49;"
35;node;;pp_main.c;reporting_task;377;18326;377;18341;0;0;0;;34;" modem_nb_ovrn++;"
36;node;;pp_main.c;reporting_task;377;18119;377;18309;0;0;0;;34;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
37;node;;pp_main.c;reporting_task;377;18103;377;18114;0;0;0;;36;" tx_tail = 0;"
38;node;;pp_main.c;reporting_task;377;18027;377;18100;0;0;0;;37,36;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
39;node;;pp_main.c;reporting_task;377;17967;377;18021;0;0;0;;38,34;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
40;node;;pp_main.c;reporting_task;377;17945;377;17956;0;0;0;;39;" tx_head = 0;"
41;node;;pp_main.c;reporting_task;377;17890;377;17943;0;0;0;;40,39;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
42;node;;pp_main.c;reporting_task;377;17872;377;17883;0;0;0;;41;" tx_head = 0;"
43;node;;pp_main.c;reporting_task;377;17817;377;17870;0;0;0;;42,41;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
44;node;;pp_main.c;reporting_task;377;17797;377;17808;0;0;0;;43;" tx_head = 0;"
45;node;;pp_main.c;reporting_task;377;17666;377;17795;0;0;0;;44,43;" tx_buf[tx_head] = *((uint8_t *)(&mcu1_ppm_cpt)); ck_a += *((uint8_t *)(&mcu1_ppm_cpt)); ck_b += ck_a; tx_head++; tx_head >= 255;"
46;node;;pp_main.c;reporting_task;377;17648;377;17659;0;0;0;;45;" tx_head = 0;"
47;node;;pp_main.c;reporting_task;377;17519;377;17646;0;0;0;;46,45;" tx_buf[tx_head] = *((uint8_t *)(&gps_nb_ovrn)); ck_a += *((uint8_t *)(&gps_nb_ovrn)); ck_b += ck_a; tx_head++; tx_head >= 255;"
48;node;;pp_main.c;reporting_task;377;17501;377;17512;0;0;0;;47;" tx_head = 0;"
49;node;;pp_main.c;reporting_task;377;17368;377;17499;0;0;0;;48,47;" tx_buf[tx_head] = *((uint8_t *)(&modem_nb_ovrn)); ck_a += *((uint8_t *)(&modem_nb_ovrn)); ck_b += ck_a; tx_head++; tx_head >= 255;"
50;node;;pp_main.c;reporting_task;377;17350;377;17361;0;0;0;;49;" tx_head = 0;"
51;node;;pp_main.c;reporting_task;377;17205;377;17348;0;0;0;;50,49;" tx_buf[tx_head] = *((uint8_t *)(&link_fbw_fbw_nb_err)); ck_a += *((uint8_t *)(&link_fbw_fbw_nb_err)); ck_b += ck_a; tx_head++; tx_head >= 255;"
52;node;;pp_main.c;reporting_task;377;17187;377;17198;0;0;0;;51;" tx_head = 0;"
53;node;;pp_main.c;reporting_task;377;17024;377;17185;0;0;0;;52,51;" ck_a = 13; ck_b = 13; tx_buf[tx_head] = *((uint8_t *)(&link_fbw_nb_err)); ck_a += *((uint8_t *)(&link_fbw_nb_err)); ck_b += ck_a; tx_head++; tx_head >= 255;"
54;node;;pp_main.c;reporting_task;377;17008;377;17019;0;0;0;;53;" tx_head = 0;"
55;node;;pp_main.c;reporting_task;377;16955;377;17006;0;0;0;;54,53;" tx_buf[tx_head] = 13; tx_head++; tx_head >= 255;"
56;node;;pp_main.c;reporting_task;377;16937;377;16948;0;0;0;;55;" tx_head = 0;"
57;node;;pp_main.c;reporting_task;377;16882;377;16935;0;0;0;;56,55;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
58;node;;pp_main.c;reporting_task;377;16798;377;16873;0;0;0;;57,35;" [B61.1] ? [B59.1] : [B60.1];"
59;node;;pp_main.c;reporting_task;377;16816;377;16847;0;0;0;;58;" 9 < (255 - (tx_head - tx_tail));"
60;node;;pp_main.c;reporting_task;377;16850;377;16873;0;0;0;;58;" 9 < (tx_tail - tx_head);"
61;node;;pp_main.c;reporting_task;377;16798;377;16814;0;0;0;;59,60;" tx_head >= tx_tail;"
62;node;;pp_main.c;reporting_task;377;16777;377;16789;0;0;0;;61,34;" i % 50 == 29;"
63;node;;pp_main.c;reporting_task;377;16752;377;16767;0;0;0;;62;" modem_nb_ovrn++;"
64;node;;pp_main.c;reporting_task;377;16545;377;16735;0;0;0;;62;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
65;node;;pp_main.c;reporting_task;377;16529;377;16540;0;0;0;;64;" tx_tail = 0;"
66;node;;pp_main.c;reporting_task;377;16453;377;16526;0;0;0;;65,64;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
67;node;;pp_main.c;reporting_task;377;16393;377;16447;0;0;0;;66,62;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
68;node;;pp_main.c;reporting_task;377;16371;377;16382;0;0;0;;67;" tx_head = 0;"
69;node;;pp_main.c;reporting_task;377;16316;377;16369;0;0;0;;68,67;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
70;node;;pp_main.c;reporting_task;377;16298;377;16309;0;0;0;;69;" tx_head = 0;"
71;node;;pp_main.c;reporting_task;377;16243;377;16296;0;0;0;;70,69;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
72;node;;pp_main.c;reporting_task;377;16223;377;16234;0;0;0;;71;" tx_head = 0;"
73;node;;pp_main.c;reporting_task;377;16090;377;16221;0;0;0;;72,71;" tx_buf[tx_head] = *((uint8_t *)(&ir_estim_mode)); ck_a += *((uint8_t *)(&ir_estim_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
74;node;;pp_main.c;reporting_task;377;16072;377;16083;0;0;0;;73;" tx_head = 0;"
75;node;;pp_main.c;reporting_task;377;15943;377;16070;0;0;0;;74,73;" tx_buf[tx_head] = *((uint8_t *)(&mcu1_status)); ck_a += *((uint8_t *)(&mcu1_status)); ck_b += ck_a; tx_head++; tx_head >= 255;"
76;node;;pp_main.c;reporting_task;377;15925;377;15936;0;0;0;;75;" tx_head = 0;"
77;node;;pp_main.c;reporting_task;377;15780;377;15923;0;0;0;;76,75;" tx_buf[tx_head] = *((uint8_t *)(&inflight_calib_mode)); ck_a += *((uint8_t *)(&inflight_calib_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
78;node;;pp_main.c;reporting_task;377;15762;377;15773;0;0;0;;77;" tx_head = 0;"
79;node;;pp_main.c;reporting_task;377;15629;377;15760;0;0;0;;78,77;" tx_buf[tx_head] = *((uint8_t *)(&vertical_mode)); ck_a += *((uint8_t *)(&vertical_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
80;node;;pp_main.c;reporting_task;377;15611;377;15622;0;0;0;;79;" tx_head = 0;"
81;node;;pp_main.c;reporting_task;377;15460;377;15609;0;0;0;;80,79;" ck_a = 11; ck_b = 11; tx_buf[tx_head] = *((uint8_t *)(&pprz_mode)); ck_a += *((uint8_t *)(&pprz_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
82;node;;pp_main.c;reporting_task;377;15444;377;15455;0;0;0;;81;" tx_head = 0;"
83;node;;pp_main.c;reporting_task;377;15391;377;15442;0;0;0;;82,81;" tx_buf[tx_head] = 11; tx_head++; tx_head >= 255;"
84;node;;pp_main.c;reporting_task;377;15373;377;15384;0;0;0;;83;" tx_head = 0;"
85;node;;pp_main.c;reporting_task;377;15318;377;15371;0;0;0;;84,83;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
86;node;;pp_main.c;reporting_task;377;15234;377;15309;0;0;0;;85,63;" [B89.1] ? [B87.1] : [B88.1];"
87;node;;pp_main.c;reporting_task;377;15252;377;15283;0;0;0;;86;" 9 < (255 - (tx_head - tx_tail));"
88;node;;pp_main.c;reporting_task;377;15286;377;15309;0;0;0;;86;" 9 < (tx_tail - tx_head);"
89;node;;pp_main.c;reporting_task;377;15234;377;15250;0;0;0;;87,88;" tx_head >= tx_tail;"
90;node;;pp_main.c;reporting_task;377;15214;377;15225;0;0;0;;89,62;" i % 50 == 9;"
91;node;;pp_main.c;reporting_task;377;15189;377;15204;0;0;0;;90;" modem_nb_ovrn++;"
92;node;;pp_main.c;reporting_task;377;14982;377;15172;0;0;0;;90;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
93;node;;pp_main.c;reporting_task;377;14966;377;14977;0;0;0;;92;" tx_tail = 0;"
94;node;;pp_main.c;reporting_task;377;14890;377;14963;0;0;0;;93,92;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
95;node;;pp_main.c;reporting_task;377;14830;377;14884;0;0;0;;94,90;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
96;node;;pp_main.c;reporting_task;377;14808;377;14819;0;0;0;;95;" tx_head = 0;"
97;node;;pp_main.c;reporting_task;377;14753;377;14806;0;0;0;;96,95;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
98;node;;pp_main.c;reporting_task;377;14735;377;14746;0;0;0;;97;" tx_head = 0;"
99;node;;pp_main.c;reporting_task;377;14680;377;14733;0;0;0;;98,97;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
100;node;;pp_main.c;reporting_task;377;14657;377;14668;0;0;0;;99;" tx_head = 0;"
101;node;;pp_main.c;reporting_task;377;14524;377;14655;0;0;0;;100,99;" tx_buf[tx_head] = *((uint8_t *)(&climb_pgain) + 3); ck_a += *((uint8_t *)(&climb_pgain) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
102;node;;pp_main.c;reporting_task;377;14506;377;14517;0;0;0;;101;" tx_head = 0;"
103;node;;pp_main.c;reporting_task;377;14373;377;14504;0;0;0;;102,101;" tx_buf[tx_head] = *((uint8_t *)(&climb_pgain) + 2); ck_a += *((uint8_t *)(&climb_pgain) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
104;node;;pp_main.c;reporting_task;377;14355;377;14366;0;0;0;;103;" tx_head = 0;"
105;node;;pp_main.c;reporting_task;377;14222;377;14353;0;0;0;;104,103;" tx_buf[tx_head] = *((uint8_t *)(&climb_pgain) + 1); ck_a += *((uint8_t *)(&climb_pgain) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
106;node;;pp_main.c;reporting_task;377;14204;377;14215;0;0;0;;105;" tx_head = 0;"
107;node;;pp_main.c;reporting_task;377;14075;377;14202;0;0;0;;106,105;" tx_buf[tx_head] = *((uint8_t *)(&climb_pgain)); ck_a += *((uint8_t *)(&climb_pgain)); ck_b += ck_a; tx_head++; tx_head >= 255;"
108;node;;pp_main.c;reporting_task;377;14052;377;14063;0;0;0;;107;" tx_head = 0;"
109;node;;pp_main.c;reporting_task;377;13915;377;14050;0;0;0;;108,107;" tx_buf[tx_head] = *((uint8_t *)(&climb_sum_err) + 3); ck_a += *((uint8_t *)(&climb_sum_err) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
110;node;;pp_main.c;reporting_task;377;13897;377;13908;0;0;0;;109;" tx_head = 0;"
111;node;;pp_main.c;reporting_task;377;13760;377;13895;0;0;0;;110,109;" tx_buf[tx_head] = *((uint8_t *)(&climb_sum_err) + 2); ck_a += *((uint8_t *)(&climb_sum_err) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
112;node;;pp_main.c;reporting_task;377;13742;377;13753;0;0;0;;111;" tx_head = 0;"
113;node;;pp_main.c;reporting_task;377;13605;377;13740;0;0;0;;112,111;" tx_buf[tx_head] = *((uint8_t *)(&climb_sum_err) + 1); ck_a += *((uint8_t *)(&climb_sum_err) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
114;node;;pp_main.c;reporting_task;377;13587;377;13598;0;0;0;;113;" tx_head = 0;"
115;node;;pp_main.c;reporting_task;377;13454;377;13585;0;0;0;;114,113;" tx_buf[tx_head] = *((uint8_t *)(&climb_sum_err)); ck_a += *((uint8_t *)(&climb_sum_err)); ck_b += ck_a; tx_head++; tx_head >= 255;"
116;node;;pp_main.c;reporting_task;377;13431;377;13442;0;0;0;;115;" tx_head = 0;"
117;node;;pp_main.c;reporting_task;377;13294;377;13429;0;0;0;;116,115;" tx_buf[tx_head] = *((uint8_t *)(&desired_climb) + 3); ck_a += *((uint8_t *)(&desired_climb) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
118;node;;pp_main.c;reporting_task;377;13276;377;13287;0;0;0;;117;" tx_head = 0;"
119;node;;pp_main.c;reporting_task;377;13139;377;13274;0;0;0;;118,117;" tx_buf[tx_head] = *((uint8_t *)(&desired_climb) + 2); ck_a += *((uint8_t *)(&desired_climb) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
120;node;;pp_main.c;reporting_task;377;13121;377;13132;0;0;0;;119;" tx_head = 0;"
121;node;;pp_main.c;reporting_task;377;12984;377;13119;0;0;0;;120,119;" tx_buf[tx_head] = *((uint8_t *)(&desired_climb) + 1); ck_a += *((uint8_t *)(&desired_climb) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
122;node;;pp_main.c;reporting_task;377;12966;377;12977;0;0;0;;121;" tx_head = 0;"
123;node;;pp_main.c;reporting_task;377;12833;377;12964;0;0;0;;122,121;" tx_buf[tx_head] = *((uint8_t *)(&desired_climb)); ck_a += *((uint8_t *)(&desired_climb)); ck_b += ck_a; tx_head++; tx_head >= 255;"
124;node;;pp_main.c;reporting_task;377;12810;377;12821;0;0;0;;123;" tx_head = 0;"
125;node;;pp_main.c;reporting_task;377;12677;377;12808;0;0;0;;124,123;" tx_buf[tx_head] = *((uint8_t *)(&desired_gaz) + 1); ck_a += *((uint8_t *)(&desired_gaz) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
126;node;;pp_main.c;reporting_task;377;12659;377;12670;0;0;0;;125;" tx_head = 0;"
127;node;;pp_main.c;reporting_task;377;12502;377;12657;0;0;0;;126,125;" ck_a = 14; ck_b = 14; tx_buf[tx_head] = *((uint8_t *)(&desired_gaz)); ck_a += *((uint8_t *)(&desired_gaz)); ck_b += ck_a; tx_head++; tx_head >= 255;"
128;node;;pp_main.c;reporting_task;377;12486;377;12497;0;0;0;;127;" tx_head = 0;"
129;node;;pp_main.c;reporting_task;377;12433;377;12484;0;0;0;;128,127;" tx_buf[tx_head] = 14; tx_head++; tx_head >= 255;"
130;node;;pp_main.c;reporting_task;377;12415;377;12426;0;0;0;;129;" tx_head = 0;"
131;node;;pp_main.c;reporting_task;377;12360;377;12413;0;0;0;;130,129;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
132;node;;pp_main.c;reporting_task;377;12274;377;12351;0;0;0;;131,91;" [B135.1] ? [B133.1] : [B134.1];"
133;node;;pp_main.c;reporting_task;377;12292;377;12324;0;0;0;;132;" 18 < (255 - (tx_head - tx_tail));"
134;node;;pp_main.c;reporting_task;377;12327;377;12351;0;0;0;;132;" 18 < (tx_tail - tx_head);"
135;node;;pp_main.c;reporting_task;377;12274;377;12290;0;0;0;;133,134;" tx_head >= tx_tail;"
136;node;;pp_main.c;reporting_task;377;12253;377;12265;0;0;0;;135,90;" i % 20 == 18;"
137;node;;pp_main.c;reporting_task;377;12229;377;12244;0;0;0;;136;" modem_nb_ovrn++;"
138;node;;pp_main.c;reporting_task;377;12022;377;12212;0;0;0;;136;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
139;node;;pp_main.c;reporting_task;377;12006;377;12017;0;0;0;;138;" tx_tail = 0;"
140;node;;pp_main.c;reporting_task;377;11930;377;12003;0;0;0;;139,138;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
141;node;;pp_main.c;reporting_task;377;11870;377;11924;0;0;0;;140,136;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
142;node;;pp_main.c;reporting_task;377;11848;377;11859;0;0;0;;141;" tx_head = 0;"
143;node;;pp_main.c;reporting_task;377;11793;377;11846;0;0;0;;142,141;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
144;node;;pp_main.c;reporting_task;377;11775;377;11786;0;0;0;;143;" tx_head = 0;"
145;node;;pp_main.c;reporting_task;377;11720;377;11773;0;0;0;;144,143;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
146;node;;pp_main.c;reporting_task;377;11697;377;11708;0;0;0;;145;" tx_head = 0;"
147;node;;pp_main.c;reporting_task;377;11566;377;11695;0;0;0;;146,145;" tx_buf[tx_head] = *((uint8_t *)(&stage_time) + 1); ck_a += *((uint8_t *)(&stage_time) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
148;node;;pp_main.c;reporting_task;377;11548;377;11559;0;0;0;;147;" tx_head = 0;"
149;node;;pp_main.c;reporting_task;377;11421;377;11546;0;0;0;;148,147;" tx_buf[tx_head] = *((uint8_t *)(&stage_time)); ck_a += *((uint8_t *)(&stage_time)); ck_b += ck_a; tx_head++; tx_head >= 255;"
150;node;;pp_main.c;reporting_task;377;11398;377;11409;0;0;0;;149;" tx_head = 0;"
151;node;;pp_main.c;reporting_task;377;11267;377;11396;0;0;0;;150,149;" tx_buf[tx_head] = *((uint8_t *)(&block_time) + 1); ck_a += *((uint8_t *)(&block_time) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
152;node;;pp_main.c;reporting_task;377;11249;377;11260;0;0;0;;151;" tx_head = 0;"
153;node;;pp_main.c;reporting_task;377;11122;377;11247;0;0;0;;152,151;" tx_buf[tx_head] = *((uint8_t *)(&block_time)); ck_a += *((uint8_t *)(&block_time)); ck_b += ck_a; tx_head++; tx_head >= 255;"
154;node;;pp_main.c;reporting_task;377;11102;377;11113;0;0;0;;153;" tx_head = 0;"
155;node;;pp_main.c;reporting_task;377;10973;377;11100;0;0;0;;154,153;" tx_buf[tx_head] = *((uint8_t *)(&low_battery)); ck_a += *((uint8_t *)(&low_battery)); ck_b += ck_a; tx_head++; tx_head >= 255;"
156;node;;pp_main.c;reporting_task;377;10952;377;10963;0;0;0;;155;" tx_head = 0;"
157;node;;pp_main.c;reporting_task;377;10799;377;10950;0;0;0;;156,155;" tx_buf[tx_head] = *((uint8_t *)(&estimator_flight_time) + 1); ck_a += *((uint8_t *)(&estimator_flight_time) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
158;node;;pp_main.c;reporting_task;377;10781;377;10792;0;0;0;;157;" tx_head = 0;"
159;node;;pp_main.c;reporting_task;377;10632;377;10779;0;0;0;;158,157;" tx_buf[tx_head] = *((uint8_t *)(&estimator_flight_time)); ck_a += *((uint8_t *)(&estimator_flight_time)); ck_b += ck_a; tx_head++; tx_head >= 255;"
160;node;;pp_main.c;reporting_task;377;10612;377;10623;0;0;0;;159;" tx_head = 0;"
161;node;;pp_main.c;reporting_task;377;10465;377;10610;0;0;0;;160,159;" ck_a = 12; ck_b = 12; tx_buf[tx_head] = *((uint8_t *)(&vsupply)); ck_a += *((uint8_t *)(&vsupply)); ck_b += ck_a; tx_head++; tx_head >= 255;"
162;node;;pp_main.c;reporting_task;377;10449;377;10460;0;0;0;;161;" tx_head = 0;"
163;node;;pp_main.c;reporting_task;377;10396;377;10447;0;0;0;;162,161;" tx_buf[tx_head] = 12; tx_head++; tx_head >= 255;"
164;node;;pp_main.c;reporting_task;377;10378;377;10389;0;0;0;;163;" tx_head = 0;"
165;node;;pp_main.c;reporting_task;377;10323;377;10376;0;0;0;;164,163;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
166;node;;pp_main.c;reporting_task;377;10237;377;10314;0;0;0;;165,137;" [B169.1] ? [B167.1] : [B168.1];"
167;node;;pp_main.c;reporting_task;377;10255;377;10287;0;0;0;;166;" 12 < (255 - (tx_head - tx_tail));"
168;node;;pp_main.c;reporting_task;377;10290;377;10314;0;0;0;;166;" 12 < (tx_tail - tx_head);"
169;node;;pp_main.c;reporting_task;377;10237;377;10253;0;0;0;;167,168;" tx_head >= tx_tail;"
170;node;;pp_main.c;reporting_task;377;10217;377;10228;0;0;0;;169,136;" i % 20 == 8;"
171;node;;pp_main.c;reporting_task;377;10192;377;10207;0;0;0;;170;" modem_nb_ovrn++;"
172;node;;pp_main.c;reporting_task;377;9985;377;10175;0;0;0;;170;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
173;node;;pp_main.c;reporting_task;377;9969;377;9980;0;0;0;;172;" tx_tail = 0;"
174;node;;pp_main.c;reporting_task;377;9893;377;9966;0;0;0;;173,172;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
175;node;;pp_main.c;reporting_task;377;9833;377;9887;0;0;0;;174,170;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
176;node;;pp_main.c;reporting_task;377;9811;377;9822;0;0;0;;175;" tx_head = 0;"
177;node;;pp_main.c;reporting_task;377;9756;377;9809;0;0;0;;176,175;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
178;node;;pp_main.c;reporting_task;377;9738;377;9749;0;0;0;;177;" tx_head = 0;"
179;node;;pp_main.c;reporting_task;377;9683;377;9736;0;0;0;;178,177;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
180;node;;pp_main.c;reporting_task;377;9660;377;9671;0;0;0;;179;" tx_head = 0;"
181;node;;pp_main.c;reporting_task;377;9517;377;9658;0;0;0;;180,179;" tx_buf[tx_head] = *((uint8_t *)(&desired_altitude) + 3); ck_a += *((uint8_t *)(&desired_altitude) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
182;node;;pp_main.c;reporting_task;377;9499;377;9510;0;0;0;;181;" tx_head = 0;"
183;node;;pp_main.c;reporting_task;377;9356;377;9497;0;0;0;;182,181;" tx_buf[tx_head] = *((uint8_t *)(&desired_altitude) + 2); ck_a += *((uint8_t *)(&desired_altitude) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
184;node;;pp_main.c;reporting_task;377;9338;377;9349;0;0;0;;183;" tx_head = 0;"
185;node;;pp_main.c;reporting_task;377;9195;377;9336;0;0;0;;184,183;" tx_buf[tx_head] = *((uint8_t *)(&desired_altitude) + 1); ck_a += *((uint8_t *)(&desired_altitude) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
186;node;;pp_main.c;reporting_task;377;9177;377;9188;0;0;0;;185;" tx_head = 0;"
187;node;;pp_main.c;reporting_task;377;9038;377;9175;0;0;0;;186,185;" tx_buf[tx_head] = *((uint8_t *)(&desired_altitude)); ck_a += *((uint8_t *)(&desired_altitude)); ck_b += ck_a; tx_head++; tx_head >= 255;"
188;node;;pp_main.c;reporting_task;377;9015;377;9026;0;0;0;;187;" tx_head = 0;"
189;node;;pp_main.c;reporting_task;377;8886;377;9013;0;0;0;;188,187;" tx_buf[tx_head] = *((uint8_t *)(&desired_y) + 3); ck_a += *((uint8_t *)(&desired_y) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
190;node;;pp_main.c;reporting_task;377;8868;377;8879;0;0;0;;189;" tx_head = 0;"
191;node;;pp_main.c;reporting_task;377;8739;377;8866;0;0;0;;190,189;" tx_buf[tx_head] = *((uint8_t *)(&desired_y) + 2); ck_a += *((uint8_t *)(&desired_y) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
192;node;;pp_main.c;reporting_task;377;8721;377;8732;0;0;0;;191;" tx_head = 0;"
193;node;;pp_main.c;reporting_task;377;8592;377;8719;0;0;0;;192,191;" tx_buf[tx_head] = *((uint8_t *)(&desired_y) + 1); ck_a += *((uint8_t *)(&desired_y) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
194;node;;pp_main.c;reporting_task;377;8574;377;8585;0;0;0;;193;" tx_head = 0;"
195;node;;pp_main.c;reporting_task;377;8449;377;8572;0;0;0;;194,193;" tx_buf[tx_head] = *((uint8_t *)(&desired_y)); ck_a += *((uint8_t *)(&desired_y)); ck_b += ck_a; tx_head++; tx_head >= 255;"
196;node;;pp_main.c;reporting_task;377;8426;377;8437;0;0;0;;195;" tx_head = 0;"
197;node;;pp_main.c;reporting_task;377;8297;377;8424;0;0;0;;196,195;" tx_buf[tx_head] = *((uint8_t *)(&desired_x) + 3); ck_a += *((uint8_t *)(&desired_x) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
198;node;;pp_main.c;reporting_task;377;8279;377;8290;0;0;0;;197;" tx_head = 0;"
199;node;;pp_main.c;reporting_task;377;8150;377;8277;0;0;0;;198,197;" tx_buf[tx_head] = *((uint8_t *)(&desired_x) + 2); ck_a += *((uint8_t *)(&desired_x) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
200;node;;pp_main.c;reporting_task;377;8132;377;8143;0;0;0;;199;" tx_head = 0;"
201;node;;pp_main.c;reporting_task;377;8003;377;8130;0;0;0;;200,199;" tx_buf[tx_head] = *((uint8_t *)(&desired_x) + 1); ck_a += *((uint8_t *)(&desired_x) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
202;node;;pp_main.c;reporting_task;377;7985;377;7996;0;0;0;;201;" tx_head = 0;"
203;node;;pp_main.c;reporting_task;377;7860;377;7983;0;0;0;;202,201;" tx_buf[tx_head] = *((uint8_t *)(&desired_x)); ck_a += *((uint8_t *)(&desired_x)); ck_b += ck_a; tx_head++; tx_head >= 255;"
204;node;;pp_main.c;reporting_task;377;7837;377;7848;0;0;0;;203;" tx_head = 0;"
205;node;;pp_main.c;reporting_task;377;7700;377;7835;0;0;0;;204,203;" tx_buf[tx_head] = *((uint8_t *)(&desired_pitch) + 3); ck_a += *((uint8_t *)(&desired_pitch) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
206;node;;pp_main.c;reporting_task;377;7682;377;7693;0;0;0;;205;" tx_head = 0;"
207;node;;pp_main.c;reporting_task;377;7545;377;7680;0;0;0;;206,205;" tx_buf[tx_head] = *((uint8_t *)(&desired_pitch) + 2); ck_a += *((uint8_t *)(&desired_pitch) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
208;node;;pp_main.c;reporting_task;377;7527;377;7538;0;0;0;;207;" tx_head = 0;"
209;node;;pp_main.c;reporting_task;377;7390;377;7525;0;0;0;;208,207;" tx_buf[tx_head] = *((uint8_t *)(&desired_pitch) + 1); ck_a += *((uint8_t *)(&desired_pitch) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
210;node;;pp_main.c;reporting_task;377;7372;377;7383;0;0;0;;209;" tx_head = 0;"
211;node;;pp_main.c;reporting_task;377;7239;377;7370;0;0;0;;210,209;" tx_buf[tx_head] = *((uint8_t *)(&desired_pitch)); ck_a += *((uint8_t *)(&desired_pitch)); ck_b += ck_a; tx_head++; tx_head >= 255;"
212;node;;pp_main.c;reporting_task;377;7216;377;7227;0;0;0;;211;" tx_head = 0;"
213;node;;pp_main.c;reporting_task;377;7081;377;7214;0;0;0;;212,211;" tx_buf[tx_head] = *((uint8_t *)(&desired_roll) + 3); ck_a += *((uint8_t *)(&desired_roll) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
214;node;;pp_main.c;reporting_task;377;7063;377;7074;0;0;0;;213;" tx_head = 0;"
215;node;;pp_main.c;reporting_task;377;6928;377;7061;0;0;0;;214,213;" tx_buf[tx_head] = *((uint8_t *)(&desired_roll) + 2); ck_a += *((uint8_t *)(&desired_roll) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
216;node;;pp_main.c;reporting_task;377;6910;377;6921;0;0;0;;215;" tx_head = 0;"
217;node;;pp_main.c;reporting_task;377;6775;377;6908;0;0;0;;216,215;" tx_buf[tx_head] = *((uint8_t *)(&desired_roll) + 1); ck_a += *((uint8_t *)(&desired_roll) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
218;node;;pp_main.c;reporting_task;377;6757;377;6768;0;0;0;;217;" tx_head = 0;"
219;node;;pp_main.c;reporting_task;377;6598;377;6755;0;0;0;;218,217;" ck_a = 18; ck_b = 18; tx_buf[tx_head] = *((uint8_t *)(&desired_roll)); ck_a += *((uint8_t *)(&desired_roll)); ck_b += ck_a; tx_head++; tx_head >= 255;"
220;node;;pp_main.c;reporting_task;377;6582;377;6593;0;0;0;;219;" tx_head = 0;"
221;node;;pp_main.c;reporting_task;377;6529;377;6580;0;0;0;;220,219;" tx_buf[tx_head] = 18; tx_head++; tx_head >= 255;"
222;node;;pp_main.c;reporting_task;377;6511;377;6522;0;0;0;;221;" tx_head = 0;"
223;node;;pp_main.c;reporting_task;377;6456;377;6509;0;0;0;;222,221;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
224;node;;pp_main.c;reporting_task;377;6370;377;6447;0;0;0;;223,171;" [B227.1] ? [B225.1] : [B226.1];"
225;node;;pp_main.c;reporting_task;377;6388;377;6420;0;0;0;;224;" 24 < (255 - (tx_head - tx_tail));"
226;node;;pp_main.c;reporting_task;377;6423;377;6447;0;0;0;;224;" 24 < (tx_tail - tx_head);"
227;node;;pp_main.c;reporting_task;377;6370;377;6386;0;0;0;;225,226;" tx_head >= tx_tail;"
228;node;;pp_main.c;reporting_task;377;6350;377;6361;0;0;0;;227,170;" i % 10 == 3;"
229;node;;pp_main.c;reporting_task;377;6325;377;6340;0;0;0;;228;" modem_nb_ovrn++;"
230;node;;pp_main.c;reporting_task;377;6118;377;6308;0;0;0;;228;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
231;node;;pp_main.c;reporting_task;377;6102;377;6113;0;0;0;;230;" tx_tail = 0;"
232;node;;pp_main.c;reporting_task;377;6026;377;6099;0;0;0;;231,230;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
233;node;;pp_main.c;reporting_task;377;5966;377;6020;0;0;0;;232,228;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
234;node;;pp_main.c;reporting_task;377;5944;377;5955;0;0;0;;233;" tx_head = 0;"
235;node;;pp_main.c;reporting_task;377;5889;377;5942;0;0;0;;234,233;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
236;node;;pp_main.c;reporting_task;377;5871;377;5882;0;0;0;;235;" tx_head = 0;"
237;node;;pp_main.c;reporting_task;377;5816;377;5869;0;0;0;;236,235;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
238;node;;pp_main.c;reporting_task;377;5793;377;5804;0;0;0;;237;" tx_head = 0;"
239;node;;pp_main.c;reporting_task;377;5658;377;5791;0;0;0;;238,237;" tx_buf[tx_head] = *((uint8_t *)(&slider_2_val) + 3); ck_a += *((uint8_t *)(&slider_2_val) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
240;node;;pp_main.c;reporting_task;377;5640;377;5651;0;0;0;;239;" tx_head = 0;"
241;node;;pp_main.c;reporting_task;377;5505;377;5638;0;0;0;;240,239;" tx_buf[tx_head] = *((uint8_t *)(&slider_2_val) + 2); ck_a += *((uint8_t *)(&slider_2_val) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
242;node;;pp_main.c;reporting_task;377;5487;377;5498;0;0;0;;241;" tx_head = 0;"
243;node;;pp_main.c;reporting_task;377;5352;377;5485;0;0;0;;242,241;" tx_buf[tx_head] = *((uint8_t *)(&slider_2_val) + 1); ck_a += *((uint8_t *)(&slider_2_val) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
244;node;;pp_main.c;reporting_task;377;5334;377;5345;0;0;0;;243;" tx_head = 0;"
245;node;;pp_main.c;reporting_task;377;5203;377;5332;0;0;0;;244,243;" tx_buf[tx_head] = *((uint8_t *)(&slider_2_val)); ck_a += *((uint8_t *)(&slider_2_val)); ck_b += ck_a; tx_head++; tx_head >= 255;"
246;node;;pp_main.c;reporting_task;377;5180;377;5191;0;0;0;;245;" tx_head = 0;"
247;node;;pp_main.c;reporting_task;377;5045;377;5178;0;0;0;;246,245;" tx_buf[tx_head] = *((uint8_t *)(&slider_1_val) + 3); ck_a += *((uint8_t *)(&slider_1_val) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
248;node;;pp_main.c;reporting_task;377;5027;377;5038;0;0;0;;247;" tx_head = 0;"
249;node;;pp_main.c;reporting_task;377;4892;377;5025;0;0;0;;248,247;" tx_buf[tx_head] = *((uint8_t *)(&slider_1_val) + 2); ck_a += *((uint8_t *)(&slider_1_val) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
250;node;;pp_main.c;reporting_task;377;4874;377;4885;0;0;0;;249;" tx_head = 0;"
251;node;;pp_main.c;reporting_task;377;4739;377;4872;0;0;0;;250,249;" tx_buf[tx_head] = *((uint8_t *)(&slider_1_val) + 1); ck_a += *((uint8_t *)(&slider_1_val) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
252;node;;pp_main.c;reporting_task;377;4721;377;4732;0;0;0;;251;" tx_head = 0;"
253;node;;pp_main.c;reporting_task;377;4590;377;4719;0;0;0;;252,251;" tx_buf[tx_head] = *((uint8_t *)(&slider_1_val)); ck_a += *((uint8_t *)(&slider_1_val)); ck_b += ck_a; tx_head++; tx_head >= 255;"
254;node;;pp_main.c;reporting_task;377;4570;377;4581;0;0;0;;253;" tx_head = 0;"
255;node;;pp_main.c;reporting_task;377;4399;377;4568;0;0;0;;254,253;" ck_a = 17; ck_b = 17; tx_buf[tx_head] = *((uint8_t *)(&inflight_calib_mode)); ck_a += *((uint8_t *)(&inflight_calib_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
256;node;;pp_main.c;reporting_task;377;4383;377;4394;0;0;0;;255;" tx_head = 0;"
257;node;;pp_main.c;reporting_task;377;4330;377;4381;0;0;0;;256,255;" tx_buf[tx_head] = 17; tx_head++; tx_head >= 255;"
258;node;;pp_main.c;reporting_task;377;4312;377;4323;0;0;0;;257;" tx_head = 0;"
259;node;;pp_main.c;reporting_task;377;4257;377;4310;0;0;0;;258,257;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
260;node;;pp_main.c;reporting_task;377;4171;377;4248;0;0;0;;259,229;" [B263.1] ? [B261.1] : [B262.1];"
261;node;;pp_main.c;reporting_task;377;4189;377;4221;0;0;0;;260;" 13 < (255 - (tx_head - tx_tail));"
262;node;;pp_main.c;reporting_task;377;4224;377;4248;0;0;0;;260;" 13 < (tx_tail - tx_head);"
263;node;;pp_main.c;reporting_task;377;4171;377;4187;0;0;0;;261,262;" tx_head >= tx_tail;"
264;node;;pp_main.c;reporting_task;377;4138;377;4162;0;0;0;;263,228;" inflight_calib_mode != 0;"
265;node;;pp_main.c;reporting_task;377;4122;377;4132;0;0;0;;264,228;" i % 5 == 2;"
266;node;;pp_main.c;reporting_task;377;4097;377;4112;0;0;0;;265;" modem_nb_ovrn++;"
267;node;;pp_main.c;reporting_task;377;3890;377;4080;0;0;0;;265;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
268;node;;pp_main.c;reporting_task;377;3874;377;3885;0;0;0;;267;" tx_tail = 0;"
269;node;;pp_main.c;reporting_task;377;3798;377;3871;0;0;0;;268,267;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
270;node;;pp_main.c;reporting_task;377;3738;377;3792;0;0;0;;269,265;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
271;node;;pp_main.c;reporting_task;377;3716;377;3727;0;0;0;;270;" tx_head = 0;"
272;node;;pp_main.c;reporting_task;377;3661;377;3714;0;0;0;;271,270;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
273;node;;pp_main.c;reporting_task;377;3643;377;3654;0;0;0;;272;" tx_head = 0;"
274;node;;pp_main.c;reporting_task;377;3588;377;3641;0;0;0;;273,272;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
275;node;;pp_main.c;reporting_task;377;3565;377;3576;0;0;0;;274;" tx_head = 0;"
276;node;;pp_main.c;reporting_task;377;3438;377;3563;0;0;0;;275,274;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch) + 1); ck_a += *((uint8_t *)(&ir_pitch) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
277;node;;pp_main.c;reporting_task;377;3420;377;3431;0;0;0;;276;" tx_head = 0;"
278;node;;pp_main.c;reporting_task;377;3297;377;3418;0;0;0;;277,276;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch)); ck_a += *((uint8_t *)(&ir_pitch)); ck_b += ck_a; tx_head++; tx_head >= 255;"
279;node;;pp_main.c;reporting_task;377;3274;377;3285;0;0;0;;278;" tx_head = 0;"
280;node;;pp_main.c;reporting_task;377;3149;377;3272;0;0;0;;279,278;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll) + 1); ck_a += *((uint8_t *)(&ir_roll) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
281;node;;pp_main.c;reporting_task;377;3131;377;3142;0;0;0;;280;" tx_head = 0;"
282;node;;pp_main.c;reporting_task;377;2984;377;3129;0;0;0;;281,280;" ck_a = 7; ck_b = 7; tx_buf[tx_head] = *((uint8_t *)(&ir_roll)); ck_a += *((uint8_t *)(&ir_roll)); ck_b += ck_a; tx_head++; tx_head >= 255;"
283;node;;pp_main.c;reporting_task;377;2968;377;2979;0;0;0;;282;" tx_head = 0;"
284;node;;pp_main.c;reporting_task;377;2916;377;2966;0;0;0;;283,282;" tx_buf[tx_head] = 7; tx_head++; tx_head >= 255;"
285;node;;pp_main.c;reporting_task;377;2898;377;2909;0;0;0;;284;" tx_head = 0;"
286;node;;pp_main.c;reporting_task;377;2843;377;2896;0;0;0;;285,284;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
287;node;;pp_main.c;reporting_task;377;2759;377;2834;0;0;0;;286,266;" [B290.1] ? [B288.1] : [B289.1];"
288;node;;pp_main.c;reporting_task;377;2777;377;2808;0;0;0;;287;" 8 < (255 - (tx_head - tx_tail));"
289;node;;pp_main.c;reporting_task;377;2811;377;2834;0;0;0;;287;" 8 < (tx_tail - tx_head);"
290;node;;pp_main.c;reporting_task;377;2759;377;2775;0;0;0;;288,289;" tx_head >= tx_tail;"
291;node;;pp_main.c;reporting_task;377;2740;377;2750;0;0;0;;290,265;" i % 5 == 1;"
292;node;;pp_main.c;reporting_task;377;2715;377;2730;0;0;0;;291;" modem_nb_ovrn++;"
293;node;;pp_main.c;reporting_task;377;2508;377;2698;0;0;0;;291;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
294;node;;pp_main.c;reporting_task;377;2492;377;2503;0;0;0;;293;" tx_tail = 0;"
295;node;;pp_main.c;reporting_task;377;2416;377;2489;0;0;0;;294,293;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
296;node;;pp_main.c;reporting_task;377;2356;377;2410;0;0;0;;295,291;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
297;node;;pp_main.c;reporting_task;377;2334;377;2345;0;0;0;;296;" tx_head = 0;"
298;node;;pp_main.c;reporting_task;377;2279;377;2332;0;0;0;;297,296;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
299;node;;pp_main.c;reporting_task;377;2261;377;2272;0;0;0;;298;" tx_head = 0;"
300;node;;pp_main.c;reporting_task;377;2206;377;2259;0;0;0;;299,298;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
301;node;;pp_main.c;reporting_task;377;2183;377;2194;0;0;0;;300;" tx_head = 0;"
302;node;;pp_main.c;reporting_task;377;2042;377;2181;0;0;0;;301,300;" tx_buf[tx_head] = *((uint8_t *)(&estimator_theta) + 3); ck_a += *((uint8_t *)(&estimator_theta) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
303;node;;pp_main.c;reporting_task;377;2024;377;2035;0;0;0;;302;" tx_head = 0;"
304;node;;pp_main.c;reporting_task;377;1883;377;2022;0;0;0;;303,302;" tx_buf[tx_head] = *((uint8_t *)(&estimator_theta) + 2); ck_a += *((uint8_t *)(&estimator_theta) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
305;node;;pp_main.c;reporting_task;377;1865;377;1876;0;0;0;;304;" tx_head = 0;"
306;node;;pp_main.c;reporting_task;377;1724;377;1863;0;0;0;;305,304;" tx_buf[tx_head] = *((uint8_t *)(&estimator_theta) + 1); ck_a += *((uint8_t *)(&estimator_theta) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
307;node;;pp_main.c;reporting_task;377;1706;377;1717;0;0;0;;306;" tx_head = 0;"
308;node;;pp_main.c;reporting_task;377;1569;377;1704;0;0;0;;307,306;" tx_buf[tx_head] = *((uint8_t *)(&estimator_theta)); ck_a += *((uint8_t *)(&estimator_theta)); ck_b += ck_a; tx_head++; tx_head >= 255;"
309;node;;pp_main.c;reporting_task;377;1546;377;1557;0;0;0;;308;" tx_head = 0;"
310;node;;pp_main.c;reporting_task;377;1409;377;1544;0;0;0;;309,308;" tx_buf[tx_head] = *((uint8_t *)(&estimator_psi) + 3); ck_a += *((uint8_t *)(&estimator_psi) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
311;node;;pp_main.c;reporting_task;377;1391;377;1402;0;0;0;;310;" tx_head = 0;"
312;node;;pp_main.c;reporting_task;377;1254;377;1389;0;0;0;;311,310;" tx_buf[tx_head] = *((uint8_t *)(&estimator_psi) + 2); ck_a += *((uint8_t *)(&estimator_psi) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
313;node;;pp_main.c;reporting_task;377;1236;377;1247;0;0;0;;312;" tx_head = 0;"
314;node;;pp_main.c;reporting_task;377;1099;377;1234;0;0;0;;313,312;" tx_buf[tx_head] = *((uint8_t *)(&estimator_psi) + 1); ck_a += *((uint8_t *)(&estimator_psi) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
315;node;;pp_main.c;reporting_task;377;1081;377;1092;0;0;0;;314;" tx_head = 0;"
316;node;;pp_main.c;reporting_task;377;948;377;1079;0;0;0;;315,314;" tx_buf[tx_head] = *((uint8_t *)(&estimator_psi)); ck_a += *((uint8_t *)(&estimator_psi)); ck_b += ck_a; tx_head++; tx_head >= 255;"
317;node;;pp_main.c;reporting_task;377;925;377;936;0;0;0;;316;" tx_head = 0;"
318;node;;pp_main.c;reporting_task;377;788;377;923;0;0;0;;317,316;" tx_buf[tx_head] = *((uint8_t *)(&estimator_phi) + 3); ck_a += *((uint8_t *)(&estimator_phi) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
319;node;;pp_main.c;reporting_task;377;770;377;781;0;0;0;;318;" tx_head = 0;"
320;node;;pp_main.c;reporting_task;377;633;377;768;0;0;0;;319,318;" tx_buf[tx_head] = *((uint8_t *)(&estimator_phi) + 2); ck_a += *((uint8_t *)(&estimator_phi) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
321;node;;pp_main.c;reporting_task;377;615;377;626;0;0;0;;320;" tx_head = 0;"
322;node;;pp_main.c;reporting_task;377;478;377;613;0;0;0;;321,320;" tx_buf[tx_head] = *((uint8_t *)(&estimator_phi) + 1); ck_a += *((uint8_t *)(&estimator_phi) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
323;node;;pp_main.c;reporting_task;377;460;377;471;0;0;0;;322;" tx_head = 0;"
324;node;;pp_main.c;reporting_task;377;301;377;458;0;0;0;;323,322;" ck_a = 6; ck_b = 6; tx_buf[tx_head] = *((uint8_t *)(&estimator_phi)); ck_a += *((uint8_t *)(&estimator_phi)); ck_b += ck_a; tx_head++; tx_head >= 255;"
325;node;;pp_main.c;reporting_task;377;285;377;296;0;0;0;;324;" tx_head = 0;"
326;node;;pp_main.c;reporting_task;377;233;377;283;0;0;0;;325,324;" tx_buf[tx_head] = 6; tx_head++; tx_head >= 255;"
327;node;;pp_main.c;reporting_task;377;215;377;226;0;0;0;;326;" tx_head = 0;"
328;node;;pp_main.c;reporting_task;377;160;377;213;0;0;0;;327,326;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
329;node;;pp_main.c;reporting_task;377;74;377;151;0;0;0;;328,292;" [B332.1] ? [B330.1] : [B331.1];"
330;node;;pp_main.c;reporting_task;377;92;377;124;0;0;0;;329;" 16 < (255 - (tx_head - tx_tail));"
331;node;;pp_main.c;reporting_task;377;127;377;151;0;0;0;;329;" 16 < (tx_tail - tx_head);"
332;node;;pp_main.c;reporting_task;377;74;377;90;0;0;0;;330,331;" tx_head >= tx_tail;"
333;node;;pp_main.c;reporting_task;377;55;377;65;0;0;0;;332,291;" i % 5 == 0;"
334;node;;pp_main.c;reporting_task;377;44;377;49;0;0;0;;333;" i = 0;"
335;node;;pp_main.c;reporting_task;377;7;377;42;0;0;0;;334,333;" static uint8_t i;; i++; i == 250;"
336;node;;pp_main.c;reporting_task;374;7;374;15;0;0;0;;0;" boot = 0;"
337;node;;pp_main.c;reporting_task;373;3321;373;3336;0;0;0;;336;" modem_nb_ovrn++;"
338;node;;pp_main.c;reporting_task;373;3114;373;3304;0;0;0;;336;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
339;node;;pp_main.c;reporting_task;373;3098;373;3109;0;0;0;;338;" tx_tail = 0;"
340;node;;pp_main.c;reporting_task;373;3022;373;3095;0;0;0;;339,338;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
341;node;;pp_main.c;reporting_task;373;2962;373;3016;0;0;0;;340,336;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
342;node;;pp_main.c;reporting_task;373;2940;373;2951;0;0;0;;341;" tx_head = 0;"
343;node;;pp_main.c;reporting_task;373;2885;373;2938;0;0;0;;342,341;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
344;node;;pp_main.c;reporting_task;373;2867;373;2878;0;0;0;;343;" tx_head = 0;"
345;node;;pp_main.c;reporting_task;373;2812;373;2865;0;0;0;;344,343;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
346;node;;pp_main.c;reporting_task;373;2789;373;2800;0;0;0;;345;" tx_head = 0;"
347;node;;pp_main.c;reporting_task;373;2646;373;2787;0;0;0;;346,345;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral) + 1); ck_a += *((uint8_t *)(&ir_pitch_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
348;node;;pp_main.c;reporting_task;373;2628;373;2639;0;0;0;;347;" tx_head = 0;"
349;node;;pp_main.c;reporting_task;373;2489;373;2626;0;0;0;;348,347;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral)); ck_a += *((uint8_t *)(&ir_pitch_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
350;node;;pp_main.c;reporting_task;373;2466;373;2477;0;0;0;;349;" tx_head = 0;"
351;node;;pp_main.c;reporting_task;373;2325;373;2464;0;0;0;;350,349;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral) + 1); ck_a += *((uint8_t *)(&ir_roll_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
352;node;;pp_main.c;reporting_task;373;2307;373;2318;0;0;0;;351;" tx_head = 0;"
353;node;;pp_main.c;reporting_task;373;2170;373;2305;0;0;0;;352,351;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral)); ck_a += *((uint8_t *)(&ir_roll_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
354;node;;pp_main.c;reporting_task;373;2147;373;2158;0;0;0;;353;" tx_head = 0;"
355;node;;pp_main.c;reporting_task;373;1998;373;2145;0;0;0;;354,353;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
356;node;;pp_main.c;reporting_task;373;1980;373;1991;0;0;0;;355;" tx_head = 0;"
357;node;;pp_main.c;reporting_task;373;1831;373;1978;0;0;0;;356,355;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
358;node;;pp_main.c;reporting_task;373;1813;373;1824;0;0;0;;357;" tx_head = 0;"
359;node;;pp_main.c;reporting_task;373;1664;373;1811;0;0;0;;358,357;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
360;node;;pp_main.c;reporting_task;373;1646;373;1657;0;0;0;;359;" tx_head = 0;"
361;node;;pp_main.c;reporting_task;373;1501;373;1644;0;0;0;;360,359;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir)); ck_a += *((uint8_t *)(&estimator_rad_of_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
362;node;;pp_main.c;reporting_task;373;1478;373;1489;0;0;0;;361;" tx_head = 0;"
363;node;;pp_main.c;reporting_task;373;1341;373;1476;0;0;0;;362,361;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 3); ck_a += *((uint8_t *)(&estimator_rad) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
364;node;;pp_main.c;reporting_task;373;1323;373;1334;0;0;0;;363;" tx_head = 0;"
365;node;;pp_main.c;reporting_task;373;1186;373;1321;0;0;0;;364,363;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 2); ck_a += *((uint8_t *)(&estimator_rad) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
366;node;;pp_main.c;reporting_task;373;1168;373;1179;0;0;0;;365;" tx_head = 0;"
367;node;;pp_main.c;reporting_task;373;1031;373;1166;0;0;0;;366,365;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 1); ck_a += *((uint8_t *)(&estimator_rad) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
368;node;;pp_main.c;reporting_task;373;1013;373;1024;0;0;0;;367;" tx_head = 0;"
369;node;;pp_main.c;reporting_task;373;880;373;1011;0;0;0;;368,367;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad)); ck_a += *((uint8_t *)(&estimator_rad)); ck_b += ck_a; tx_head++; tx_head >= 255;"
370;node;;pp_main.c;reporting_task;373;857;373;868;0;0;0;;369;" tx_head = 0;"
371;node;;pp_main.c;reporting_task;373;722;373;855;0;0;0;;370,369;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 3); ck_a += *((uint8_t *)(&estimator_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
372;node;;pp_main.c;reporting_task;373;704;373;715;0;0;0;;371;" tx_head = 0;"
373;node;;pp_main.c;reporting_task;373;569;373;702;0;0;0;;372,371;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 2); ck_a += *((uint8_t *)(&estimator_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
374;node;;pp_main.c;reporting_task;373;551;373;562;0;0;0;;373;" tx_head = 0;"
375;node;;pp_main.c;reporting_task;373;416;373;549;0;0;0;;374,373;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 1); ck_a += *((uint8_t *)(&estimator_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
376;node;;pp_main.c;reporting_task;373;398;373;409;0;0;0;;375;" tx_head = 0;"
377;node;;pp_main.c;reporting_task;373;241;373;396;0;0;0;;376,375;" ck_a = 5; ck_b = 5; tx_buf[tx_head] = *((uint8_t *)(&estimator_ir)); ck_a += *((uint8_t *)(&estimator_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
378;node;;pp_main.c;reporting_task;373;225;373;236;0;0;0;;377;" tx_head = 0;"
379;node;;pp_main.c;reporting_task;373;173;373;223;0;0;0;;378,377;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
380;node;;pp_main.c;reporting_task;373;155;373;166;0;0;0;;379;" tx_head = 0;"
381;node;;pp_main.c;reporting_task;373;100;373;153;0;0;0;;380,379;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
382;node;;pp_main.c;reporting_task;373;14;373;91;0;0;0;;381,337;" [B385.1] ? [B383.1] : [B384.1];"
383;node;;pp_main.c;reporting_task;373;32;373;64;0;0;0;;382;" 20 < (255 - (tx_head - tx_tail));"
384;node;;pp_main.c;reporting_task;373;67;373;91;0;0;0;;382;" 20 < (tx_tail - tx_head);"
385;node;;pp_main.c;reporting_task;373;14;373;30;0;0;0;;383,384;" tx_head >= tx_tail;"
386;node;;pp_main.c;reporting_task;372;1061;372;1076;0;0;0;;385;" modem_nb_ovrn++;"
387;node;;pp_main.c;reporting_task;372;854;372;1044;0;0;0;;385;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
388;node;;pp_main.c;reporting_task;372;838;372;849;0;0;0;;387;" tx_tail = 0;"
389;node;;pp_main.c;reporting_task;372;762;372;835;0;0;0;;388,387;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
390;node;;pp_main.c;reporting_task;372;702;372;756;0;0;0;;389,385;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
391;node;;pp_main.c;reporting_task;372;680;372;691;0;0;0;;390;" tx_head = 0;"
392;node;;pp_main.c;reporting_task;372;625;372;678;0;0;0;;391,390;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
393;node;;pp_main.c;reporting_task;372;607;372;618;0;0;0;;392;" tx_head = 0;"
394;node;;pp_main.c;reporting_task;372;552;372;605;0;0;0;;393,392;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
395;node;;pp_main.c;reporting_task;372;529;372;540;0;0;0;;394;" tx_head = 0;"
396;node;;pp_main.c;reporting_task;372;404;372;527;0;0;0;;395,394;" tx_buf[tx_head] = *((uint8_t *)(&version) + 1); ck_a += *((uint8_t *)(&version) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
397;node;;pp_main.c;reporting_task;372;386;372;397;0;0;0;;396;" tx_head = 0;"
398;node;;pp_main.c;reporting_task;372;239;372;384;0;0;0;;397,396;" ck_a = 1; ck_b = 1; tx_buf[tx_head] = *((uint8_t *)(&version)); ck_a += *((uint8_t *)(&version)); ck_b += ck_a; tx_head++; tx_head >= 255;"
399;node;;pp_main.c;reporting_task;372;223;372;234;0;0;0;;398;" tx_head = 0;"
400;node;;pp_main.c;reporting_task;372;171;372;221;0;0;0;;399,398;" tx_buf[tx_head] = 1; tx_head++; tx_head >= 255;"
401;node;;pp_main.c;reporting_task;372;153;372;164;0;0;0;;400;" tx_head = 0;"
402;node;;pp_main.c;reporting_task;372;98;372;151;0;0;0;;401,400;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
403;node;;pp_main.c;reporting_task;372;14;372;89;0;0;0;;402,386;" [B406.1] ? [B404.1] : [B405.1];"
404;node;;pp_main.c;reporting_task;372;32;372;63;0;0;0;;403;" 6 < (255 - (tx_head - tx_tail));"
405;node;;pp_main.c;reporting_task;372;66;372;89;0;0;0;;403;" 6 < (tx_tail - tx_head);"
406;node;;pp_main.c;reporting_task;372;14;372;30;0;0;0;;404,405;" tx_head >= tx_tail;"
407;node;;pp_main.c;reporting_task;370;3;371;11;0;0;0;;406,335;" static uint8_t boot = (!0);; boot (ImplicitCastExpr, LValueToRValue, uint8_t);"
408;entry;;pp_main.c;reporting_task;369;30;369;30;0;0;0;;407;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;stabilisation_task;516;1;516;1;0;0;0;;;""
1;node;;pp_main.c;stabilisation_task;515;5;515;186;0;0;0;;0;" [B7.7] ? [B2.1] : ([B3.1]); to_fbw.channels[5] = ([B1.1]);"
2;node;;pp_main.c;stabilisation_task;515;76;515;87;0;0;0;;1;" -(600 * 16) (ImplicitCastExpr, IntegralToFloating, double);"
#3;node;;pp_main.c;stabilisation_task;515;91;515;184;0;0;0;;1;" [B6.1] ? [B4.1] : [B5.1];" # LLVM inconvenience: virtual BB (there is no LHS, so this is not a BB)
4;node;;pp_main.c;stabilisation_task;515;139;515;149;0;0;0;;1;" (600 * 16) (ImplicitCastExpr, IntegralToFloating, double);"
5;node;;pp_main.c;stabilisation_task;515;152;515;184;0;0;0;;1;" (600 * 16) / 0.75 * (-estimator_phi);"
6;node;;pp_main.c;stabilisation_task;515;91;515;136;0;0;0;;4,5;" (600 * 16) / 0.75 * (-estimator_phi) > (600 * 16);"
7;node;;pp_main.c;stabilisation_task;509;5;515;73;0;0;1;ir_update,estimator_update_state_infrared,roll_pitch_pid_run;2,6;" ir_update(); estimator_update_state_infrared(); roll_pitch_pid_run(); to_fbw.channels[0] = desired_gaz; to_fbw.channels[1] = desired_aileron; to_fbw.channels[2] = desired_elevator; (600 * 16) / 0.75 * (-estimator_phi) < -(600 * 16);"
8;entry;;pp_main.c;stabilisation_task;508;2;508;2;0;0;0;;7;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;timer_init;156;1;156;1;0;0;0;;;""
1;node;;pp_main.c;timer_init;153;3;155;48;0;0;0;;0;" (*(volatile uint8_t *)((47) + 32)) = 0; (*(volatile uint8_t *)((46) + 32)) = 1; (*(volatile uint8_t *)((37) + 32)) = 5;"
2;entry;;pp_main.c;timer_init;152;40;152;40;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;timer_now;161;1;161;1;0;0;0;;;""
1;node;;pp_main.c;timer_now;160;3;160;49;0;0;0;;0;" return (*(volatile uint16_t *)((44) + 32));;"
2;entry;;pp_main.c;timer_now;159;2;159;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;timer_now_non_atomic;166;1;166;1;0;0;0;;;""
1;node;;pp_main.c;timer_now_non_atomic;165;3;165;48;0;0;0;;0;" return (*(volatile uint8_t *)((44) + 32));;"
2;entry;;pp_main.c;timer_now_non_atomic;164;2;164;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;timer_periodic;174;1;174;1;0;0;0;;;""
1;node;;pp_main.c;timer_periodic;172;3;173;14;0;0;0;;0;" (*(volatile uint8_t *)((54) + 32)) = 1 << 6; return (!0);;"
2;node;;pp_main.c;timer_periodic;171;5;171;13;0;0;0;;0;" return 0;;"
3;node;;pp_main.c;timer_periodic;170;7;170;102;0;0;0;;2,1;" !((*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((54) + 32)))))) & (1 << (6)));"
4;entry;;pp_main.c;timer_periodic;169;2;169;2;0;0;0;;3;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_main.c;use_gps_pos;536;1;536;1;0;0;0;;;""
1;node;;pp_main.c;use_gps_pos;534;1059;534;1074;0;0;0;;0;" modem_nb_ovrn++;"
2;node;;pp_main.c;use_gps_pos;534;852;534;1042;0;0;0;;0;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
3;node;;pp_main.c;use_gps_pos;534;836;534;847;0;0;0;;2;" tx_tail = 0;"
4;node;;pp_main.c;use_gps_pos;534;760;534;833;0;0;0;;3,2;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
5;node;;pp_main.c;use_gps_pos;534;700;534;754;0;0;0;;4,0;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
6;node;;pp_main.c;use_gps_pos;534;678;534;689;0;0;0;;5;" tx_head = 0;"
7;node;;pp_main.c;use_gps_pos;534;623;534;676;0;0;0;;6,5;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
8;node;;pp_main.c;use_gps_pos;534;605;534;616;0;0;0;;7;" tx_head = 0;"
9;node;;pp_main.c;use_gps_pos;534;550;534;603;0;0;0;;8,7;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
10;node;;pp_main.c;use_gps_pos;534;527;534;538;0;0;0;;9;" tx_head = 0;"
11;node;;pp_main.c;use_gps_pos;534;402;534;525;0;0;0;;10,9;" tx_buf[tx_head] = *((uint8_t *)(&cputime) + 1); ck_a += *((uint8_t *)(&cputime) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
12;node;;pp_main.c;use_gps_pos;534;384;534;395;0;0;0;;11;" tx_head = 0;"
13;node;;pp_main.c;use_gps_pos;534;237;534;382;0;0;0;;12,11;" ck_a = 4; ck_b = 4; tx_buf[tx_head] = *((uint8_t *)(&cputime)); ck_a += *((uint8_t *)(&cputime)); ck_b += ck_a; tx_head++; tx_head >= 255;"
14;node;;pp_main.c;use_gps_pos;534;221;534;232;0;0;0;;13;" tx_head = 0;"
15;node;;pp_main.c;use_gps_pos;534;169;534;219;0;0;0;;14,13;" tx_buf[tx_head] = 4; tx_head++; tx_head >= 255;"
16;node;;pp_main.c;use_gps_pos;534;151;534;162;0;0;0;;15;" tx_head = 0;"
17;node;;pp_main.c;use_gps_pos;534;96;534;149;0;0;0;;16,15;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
18;node;;pp_main.c;use_gps_pos;534;12;534;87;0;0;0;;17,1;" [B21.3] ? [B19.1] : [B20.1];"
19;node;;pp_main.c;use_gps_pos;534;30;534;61;0;0;0;;18;" 6 < (255 - (tx_head - tx_tail));"
20;node;;pp_main.c;use_gps_pos;534;64;534;87;0;0;0;;18;" 6 < (tx_tail - tx_head);"
21;node;;pp_main.c;use_gps_pos;532;5;534;28;0;0;0;;19,20;" estimator_flight_time = 1; launch = (!0); tx_head >= tx_tail;"
22;node;;pp_main.c;use_gps_pos;531;34;531;59;0;0;0;;21,0;" estimator_hspeed_mod > 5.;"
23;node;;pp_main.c;use_gps_pos;531;7;531;29;0;0;0;;22,0;" !estimator_flight_time;"
24;node;;pp_main.c;use_gps_pos;530;3317;530;3332;0;0;0;;23;" modem_nb_ovrn++;"
25;node;;pp_main.c;use_gps_pos;530;3110;530;3300;0;0;0;;23;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
26;node;;pp_main.c;use_gps_pos;530;3094;530;3105;0;0;0;;25;" tx_tail = 0;"
27;node;;pp_main.c;use_gps_pos;530;3018;530;3091;0;0;0;;26,25;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
28;node;;pp_main.c;use_gps_pos;530;2958;530;3012;0;0;0;;27,23;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
29;node;;pp_main.c;use_gps_pos;530;2936;530;2947;0;0;0;;28;" tx_head = 0;"
30;node;;pp_main.c;use_gps_pos;530;2881;530;2934;0;0;0;;29,28;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
31;node;;pp_main.c;use_gps_pos;530;2863;530;2874;0;0;0;;30;" tx_head = 0;"
32;node;;pp_main.c;use_gps_pos;530;2808;530;2861;0;0;0;;31,30;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
33;node;;pp_main.c;use_gps_pos;530;2785;530;2796;0;0;0;;32;" tx_head = 0;"
34;node;;pp_main.c;use_gps_pos;530;2642;530;2783;0;0;0;;33,32;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral) + 1); ck_a += *((uint8_t *)(&ir_pitch_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
35;node;;pp_main.c;use_gps_pos;530;2624;530;2635;0;0;0;;34;" tx_head = 0;"
36;node;;pp_main.c;use_gps_pos;530;2485;530;2622;0;0;0;;35,34;" tx_buf[tx_head] = *((uint8_t *)(&ir_pitch_neutral)); ck_a += *((uint8_t *)(&ir_pitch_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
37;node;;pp_main.c;use_gps_pos;530;2462;530;2473;0;0;0;;36;" tx_head = 0;"
38;node;;pp_main.c;use_gps_pos;530;2321;530;2460;0;0;0;;37,36;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral) + 1); ck_a += *((uint8_t *)(&ir_roll_neutral) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
39;node;;pp_main.c;use_gps_pos;530;2303;530;2314;0;0;0;;38;" tx_head = 0;"
40;node;;pp_main.c;use_gps_pos;530;2166;530;2301;0;0;0;;39,38;" tx_buf[tx_head] = *((uint8_t *)(&ir_roll_neutral)); ck_a += *((uint8_t *)(&ir_roll_neutral)); ck_b += ck_a; tx_head++; tx_head >= 255;"
41;node;;pp_main.c;use_gps_pos;530;2143;530;2154;0;0;0;;40;" tx_head = 0;"
42;node;;pp_main.c;use_gps_pos;530;1994;530;2141;0;0;0;;41,40;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
43;node;;pp_main.c;use_gps_pos;530;1976;530;1987;0;0;0;;42;" tx_head = 0;"
44;node;;pp_main.c;use_gps_pos;530;1827;530;1974;0;0;0;;43,42;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
45;node;;pp_main.c;use_gps_pos;530;1809;530;1820;0;0;0;;44;" tx_head = 0;"
46;node;;pp_main.c;use_gps_pos;530;1660;530;1807;0;0;0;;45,44;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_a += *((uint8_t *)(&estimator_rad_of_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
47;node;;pp_main.c;use_gps_pos;530;1642;530;1653;0;0;0;;46;" tx_head = 0;"
48;node;;pp_main.c;use_gps_pos;530;1497;530;1640;0;0;0;;47,46;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad_of_ir)); ck_a += *((uint8_t *)(&estimator_rad_of_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
49;node;;pp_main.c;use_gps_pos;530;1474;530;1485;0;0;0;;48;" tx_head = 0;"
50;node;;pp_main.c;use_gps_pos;530;1337;530;1472;0;0;0;;49,48;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 3); ck_a += *((uint8_t *)(&estimator_rad) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
51;node;;pp_main.c;use_gps_pos;530;1319;530;1330;0;0;0;;50;" tx_head = 0;"
52;node;;pp_main.c;use_gps_pos;530;1182;530;1317;0;0;0;;51,50;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 2); ck_a += *((uint8_t *)(&estimator_rad) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
53;node;;pp_main.c;use_gps_pos;530;1164;530;1175;0;0;0;;52;" tx_head = 0;"
54;node;;pp_main.c;use_gps_pos;530;1027;530;1162;0;0;0;;53,52;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad) + 1); ck_a += *((uint8_t *)(&estimator_rad) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
55;node;;pp_main.c;use_gps_pos;530;1009;530;1020;0;0;0;;54;" tx_head = 0;"
56;node;;pp_main.c;use_gps_pos;530;876;530;1007;0;0;0;;55,54;" tx_buf[tx_head] = *((uint8_t *)(&estimator_rad)); ck_a += *((uint8_t *)(&estimator_rad)); ck_b += ck_a; tx_head++; tx_head >= 255;"
57;node;;pp_main.c;use_gps_pos;530;853;530;864;0;0;0;;56;" tx_head = 0;"
58;node;;pp_main.c;use_gps_pos;530;718;530;851;0;0;0;;57,56;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 3); ck_a += *((uint8_t *)(&estimator_ir) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
59;node;;pp_main.c;use_gps_pos;530;700;530;711;0;0;0;;58;" tx_head = 0;"
60;node;;pp_main.c;use_gps_pos;530;565;530;698;0;0;0;;59,58;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 2); ck_a += *((uint8_t *)(&estimator_ir) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
61;node;;pp_main.c;use_gps_pos;530;547;530;558;0;0;0;;60;" tx_head = 0;"
62;node;;pp_main.c;use_gps_pos;530;412;530;545;0;0;0;;61,60;" tx_buf[tx_head] = *((uint8_t *)(&estimator_ir) + 1); ck_a += *((uint8_t *)(&estimator_ir) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
63;node;;pp_main.c;use_gps_pos;530;394;530;405;0;0;0;;62;" tx_head = 0;"
64;node;;pp_main.c;use_gps_pos;530;237;530;392;0;0;0;;63,62;" ck_a = 5; ck_b = 5; tx_buf[tx_head] = *((uint8_t *)(&estimator_ir)); ck_a += *((uint8_t *)(&estimator_ir)); ck_b += ck_a; tx_head++; tx_head >= 255;"
65;node;;pp_main.c;use_gps_pos;530;221;530;232;0;0;0;;64;" tx_head = 0;"
66;node;;pp_main.c;use_gps_pos;530;169;530;219;0;0;0;;65,64;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
67;node;;pp_main.c;use_gps_pos;530;151;530;162;0;0;0;;66;" tx_head = 0;"
68;node;;pp_main.c;use_gps_pos;530;96;530;149;0;0;0;;67,66;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
69;node;;pp_main.c;use_gps_pos;530;10;530;87;0;0;0;;68,24;" [B72.2] ? [B70.1] : [B71.1];"
70;node;;pp_main.c;use_gps_pos;530;28;530;60;0;0;0;;69;" 20 < (255 - (tx_head - tx_tail));"
71;node;;pp_main.c;use_gps_pos;530;63;530;87;0;0;0;;69;" 20 < (tx_tail - tx_head);"
72;node;;pp_main.c;use_gps_pos;529;3;530;26;0;0;1;estimator_update_state_gps;70,71;" estimator_update_state_gps(); tx_head >= tx_tail;"
73;node;;pp_main.c;use_gps_pos;528;5108;528;5123;0;0;0;;72;" modem_nb_ovrn++;"
74;node;;pp_main.c;use_gps_pos;528;4901;528;5091;0;0;0;;72;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((56) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) |= (1 << (4));"
75;node;;pp_main.c;use_gps_pos;528;4885;528;4896;0;0;0;;74;" tx_tail = 0;"
76;node;;pp_main.c;use_gps_pos;528;4809;528;4882;0;0;0;;75,74;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
77;node;;pp_main.c;use_gps_pos;528;4749;528;4803;0;0;0;;76,72;" !((*(volatile uint8_t *)((57) + 32)) & (1 << (4)));"
78;node;;pp_main.c;use_gps_pos;528;4727;528;4738;0;0;0;;77;" tx_head = 0;"
79;node;;pp_main.c;use_gps_pos;528;4672;528;4725;0;0;0;;78,77;" tx_buf[tx_head] = ck_b; tx_head++; tx_head >= 255;"
80;node;;pp_main.c;use_gps_pos;528;4654;528;4665;0;0;0;;79;" tx_head = 0;"
81;node;;pp_main.c;use_gps_pos;528;4599;528;4652;0;0;0;;80,79;" tx_buf[tx_head] = ck_a; tx_head++; tx_head >= 255;"
82;node;;pp_main.c;use_gps_pos;528;4576;528;4587;0;0;0;;81;" tx_head = 0;"
83;node;;pp_main.c;use_gps_pos;528;4449;528;4574;0;0;0;;82,81;" tx_buf[tx_head] = *((uint8_t *)(&gps_ftow) + 3); ck_a += *((uint8_t *)(&gps_ftow) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
84;node;;pp_main.c;use_gps_pos;528;4431;528;4442;0;0;0;;83;" tx_head = 0;"
85;node;;pp_main.c;use_gps_pos;528;4304;528;4429;0;0;0;;84,83;" tx_buf[tx_head] = *((uint8_t *)(&gps_ftow) + 2); ck_a += *((uint8_t *)(&gps_ftow) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
86;node;;pp_main.c;use_gps_pos;528;4286;528;4297;0;0;0;;85;" tx_head = 0;"
87;node;;pp_main.c;use_gps_pos;528;4159;528;4284;0;0;0;;86,85;" tx_buf[tx_head] = *((uint8_t *)(&gps_ftow) + 1); ck_a += *((uint8_t *)(&gps_ftow) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
88;node;;pp_main.c;use_gps_pos;528;4141;528;4152;0;0;0;;87;" tx_head = 0;"
89;node;;pp_main.c;use_gps_pos;528;4018;528;4139;0;0;0;;88,87;" tx_buf[tx_head] = *((uint8_t *)(&gps_ftow)); ck_a += *((uint8_t *)(&gps_ftow)); ck_b += ck_a; tx_head++; tx_head >= 255;"
90;node;;pp_main.c;use_gps_pos;528;3995;528;4006;0;0;0;;89;" tx_head = 0;"
91;node;;pp_main.c;use_gps_pos;528;3864;528;3993;0;0;0;;90,89;" tx_buf[tx_head] = *((uint8_t *)(&gps_fclimb) + 3); ck_a += *((uint8_t *)(&gps_fclimb) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
92;node;;pp_main.c;use_gps_pos;528;3846;528;3857;0;0;0;;91;" tx_head = 0;"
93;node;;pp_main.c;use_gps_pos;528;3715;528;3844;0;0;0;;92,91;" tx_buf[tx_head] = *((uint8_t *)(&gps_fclimb) + 2); ck_a += *((uint8_t *)(&gps_fclimb) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
94;node;;pp_main.c;use_gps_pos;528;3697;528;3708;0;0;0;;93;" tx_head = 0;"
95;node;;pp_main.c;use_gps_pos;528;3566;528;3695;0;0;0;;94,93;" tx_buf[tx_head] = *((uint8_t *)(&gps_fclimb) + 1); ck_a += *((uint8_t *)(&gps_fclimb) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
96;node;;pp_main.c;use_gps_pos;528;3548;528;3559;0;0;0;;95;" tx_head = 0;"
97;node;;pp_main.c;use_gps_pos;528;3421;528;3546;0;0;0;;96,95;" tx_buf[tx_head] = *((uint8_t *)(&gps_fclimb)); ck_a += *((uint8_t *)(&gps_fclimb)); ck_b += ck_a; tx_head++; tx_head >= 255;"
98;node;;pp_main.c;use_gps_pos;528;3398;528;3409;0;0;0;;97;" tx_head = 0;"
99;node;;pp_main.c;use_gps_pos;528;3267;528;3396;0;0;0;;98,97;" tx_buf[tx_head] = *((uint8_t *)(&gps_fspeed) + 3); ck_a += *((uint8_t *)(&gps_fspeed) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
100;node;;pp_main.c;use_gps_pos;528;3249;528;3260;0;0;0;;99;" tx_head = 0;"
101;node;;pp_main.c;use_gps_pos;528;3118;528;3247;0;0;0;;100,99;" tx_buf[tx_head] = *((uint8_t *)(&gps_fspeed) + 2); ck_a += *((uint8_t *)(&gps_fspeed) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
102;node;;pp_main.c;use_gps_pos;528;3100;528;3111;0;0;0;;101;" tx_head = 0;"
103;node;;pp_main.c;use_gps_pos;528;2969;528;3098;0;0;0;;102,101;" tx_buf[tx_head] = *((uint8_t *)(&gps_fspeed) + 1); ck_a += *((uint8_t *)(&gps_fspeed) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
104;node;;pp_main.c;use_gps_pos;528;2951;528;2962;0;0;0;;103;" tx_head = 0;"
105;node;;pp_main.c;use_gps_pos;528;2824;528;2949;0;0;0;;104,103;" tx_buf[tx_head] = *((uint8_t *)(&gps_fspeed)); ck_a += *((uint8_t *)(&gps_fspeed)); ck_b += ck_a; tx_head++; tx_head >= 255;"
106;node;;pp_main.c;use_gps_pos;528;2801;528;2812;0;0;0;;105;" tx_head = 0;"
107;node;;pp_main.c;use_gps_pos;528;2674;528;2799;0;0;0;;106,105;" tx_buf[tx_head] = *((uint8_t *)(&gps_falt) + 3); ck_a += *((uint8_t *)(&gps_falt) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
108;node;;pp_main.c;use_gps_pos;528;2656;528;2667;0;0;0;;107;" tx_head = 0;"
109;node;;pp_main.c;use_gps_pos;528;2529;528;2654;0;0;0;;108,107;" tx_buf[tx_head] = *((uint8_t *)(&gps_falt) + 2); ck_a += *((uint8_t *)(&gps_falt) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
110;node;;pp_main.c;use_gps_pos;528;2511;528;2522;0;0;0;;109;" tx_head = 0;"
111;node;;pp_main.c;use_gps_pos;528;2384;528;2509;0;0;0;;110,109;" tx_buf[tx_head] = *((uint8_t *)(&gps_falt) + 1); ck_a += *((uint8_t *)(&gps_falt) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
112;node;;pp_main.c;use_gps_pos;528;2366;528;2377;0;0;0;;111;" tx_head = 0;"
113;node;;pp_main.c;use_gps_pos;528;2243;528;2364;0;0;0;;112,111;" tx_buf[tx_head] = *((uint8_t *)(&gps_falt)); ck_a += *((uint8_t *)(&gps_falt)); ck_b += ck_a; tx_head++; tx_head >= 255;"
114;node;;pp_main.c;use_gps_pos;528;2220;528;2231;0;0;0;;113;" tx_head = 0;"
115;node;;pp_main.c;use_gps_pos;528;2087;528;2218;0;0;0;;114,113;" tx_buf[tx_head] = *((uint8_t *)(&gps_fcourse) + 3); ck_a += *((uint8_t *)(&gps_fcourse) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
116;node;;pp_main.c;use_gps_pos;528;2069;528;2080;0;0;0;;115;" tx_head = 0;"
117;node;;pp_main.c;use_gps_pos;528;1936;528;2067;0;0;0;;116,115;" tx_buf[tx_head] = *((uint8_t *)(&gps_fcourse) + 2); ck_a += *((uint8_t *)(&gps_fcourse) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
118;node;;pp_main.c;use_gps_pos;528;1918;528;1929;0;0;0;;117;" tx_head = 0;"
119;node;;pp_main.c;use_gps_pos;528;1785;528;1916;0;0;0;;118,117;" tx_buf[tx_head] = *((uint8_t *)(&gps_fcourse) + 1); ck_a += *((uint8_t *)(&gps_fcourse) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
120;node;;pp_main.c;use_gps_pos;528;1767;528;1778;0;0;0;;119;" tx_head = 0;"
121;node;;pp_main.c;use_gps_pos;528;1638;528;1765;0;0;0;;120,119;" tx_buf[tx_head] = *((uint8_t *)(&gps_fcourse)); ck_a += *((uint8_t *)(&gps_fcourse)); ck_b += ck_a; tx_head++; tx_head >= 255;"
122;node;;pp_main.c;use_gps_pos;528;1615;528;1626;0;0;0;;121;" tx_head = 0;"
123;node;;pp_main.c;use_gps_pos;528;1478;528;1613;0;0;0;;122,121;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_north) + 3); ck_a += *((uint8_t *)(&gps_utm_north) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
124;node;;pp_main.c;use_gps_pos;528;1460;528;1471;0;0;0;;123;" tx_head = 0;"
125;node;;pp_main.c;use_gps_pos;528;1323;528;1458;0;0;0;;124,123;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_north) + 2); ck_a += *((uint8_t *)(&gps_utm_north) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
126;node;;pp_main.c;use_gps_pos;528;1305;528;1316;0;0;0;;125;" tx_head = 0;"
127;node;;pp_main.c;use_gps_pos;528;1168;528;1303;0;0;0;;126,125;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_north) + 1); ck_a += *((uint8_t *)(&gps_utm_north) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
128;node;;pp_main.c;use_gps_pos;528;1150;528;1161;0;0;0;;127;" tx_head = 0;"
129;node;;pp_main.c;use_gps_pos;528;1017;528;1148;0;0;0;;128,127;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_north)); ck_a += *((uint8_t *)(&gps_utm_north)); ck_b += ck_a; tx_head++; tx_head >= 255;"
130;node;;pp_main.c;use_gps_pos;528;994;528;1005;0;0;0;;129;" tx_head = 0;"
131;node;;pp_main.c;use_gps_pos;528;859;528;992;0;0;0;;130,129;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_east) + 3); ck_a += *((uint8_t *)(&gps_utm_east) + 3); ck_b += ck_a; tx_head++; tx_head >= 255;"
132;node;;pp_main.c;use_gps_pos;528;841;528;852;0;0;0;;131;" tx_head = 0;"
133;node;;pp_main.c;use_gps_pos;528;706;528;839;0;0;0;;132,131;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_east) + 2); ck_a += *((uint8_t *)(&gps_utm_east) + 2); ck_b += ck_a; tx_head++; tx_head >= 255;"
134;node;;pp_main.c;use_gps_pos;528;688;528;699;0;0;0;;133;" tx_head = 0;"
135;node;;pp_main.c;use_gps_pos;528;553;528;686;0;0;0;;134,133;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_east) + 1); ck_a += *((uint8_t *)(&gps_utm_east) + 1); ck_b += ck_a; tx_head++; tx_head >= 255;"
136;node;;pp_main.c;use_gps_pos;528;535;528;546;0;0;0;;135;" tx_head = 0;"
137;node;;pp_main.c;use_gps_pos;528;404;528;533;0;0;0;;136,135;" tx_buf[tx_head] = *((uint8_t *)(&gps_utm_east)); ck_a += *((uint8_t *)(&gps_utm_east)); ck_b += ck_a; tx_head++; tx_head >= 255;"
138;node;;pp_main.c;use_gps_pos;528;384;528;395;0;0;0;;137;" tx_head = 0;"
139;node;;pp_main.c;use_gps_pos;528;237;528;382;0;0;0;;138,137;" ck_a = 8; ck_b = 8; tx_buf[tx_head] = *((uint8_t *)(&gps_mode)); ck_a += *((uint8_t *)(&gps_mode)); ck_b += ck_a; tx_head++; tx_head >= 255;"
140;node;;pp_main.c;use_gps_pos;528;221;528;232;0;0;0;;139;" tx_head = 0;"
141;node;;pp_main.c;use_gps_pos;528;169;528;219;0;0;0;;140,139;" tx_buf[tx_head] = 8; tx_head++; tx_head >= 255;"
142;node;;pp_main.c;use_gps_pos;528;151;528;162;0;0;0;;141;" tx_head = 0;"
143;node;;pp_main.c;use_gps_pos;528;96;528;149;0;0;0;;142,141;" tx_buf[tx_head] = 5; tx_head++; tx_head >= 255;"
144;node;;pp_main.c;use_gps_pos;528;10;528;87;0;0;0;;143,73;" [B147.1] ? [B145.1] : [B146.1];"
145;node;;pp_main.c;use_gps_pos;528;28;528;60;0;0;0;;144;" 33 < (255 - (tx_head - tx_tail));"
146;node;;pp_main.c;use_gps_pos;528;63;528;87;0;0;0;;144;" 33 < (tx_tail - tx_head);"
147;node;;pp_main.c;use_gps_pos;528;10;528;26;0;0;0;;145,146;" tx_head >= tx_tail;"
148;entry;;pp_main.c;use_gps_pos;527;27;527;27;0;0;0;;147;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_mainloop.c;main;259;1;259;1;0;0;0;;;""
1;node;;pp_mainloop.c;main;258;3;258;11;0;0;0;;0;" return 0;;"
2;virtual node;;;main;0;0;0;0;0;0;0;;9;""
3;node;;pp_mainloop.c;main;254;7;255;27;0;0;1;radio_control_task;2;" link_fbw_receive_complete = 0; radio_control_task();"
4;node;;pp_mainloop.c;main;253;9;253;34;0;0;0;;3,2;" link_fbw_receive_complete (ImplicitCastExpr, LValueToRValue, uint8_t);"
5;node;;pp_mainloop.c;main;251;2;251;25;0;0;1;receive_gps_data_task;4;" receive_gps_data_task();"
6;node;;pp_mainloop.c;main;249;9;249;25;0;0;0;;5,4;" gps_msg_received (ImplicitCastExpr, LValueToRValue, uint8_t);"
7;node;;pp_mainloop.c;main;248;7;248;22;0;0;1;periodic_task;6;" periodic_task();"
8;node;;pp_mainloop.c;main;247;8;247;24;0;0;1;timer_periodic;7,6;" timer_periodic();"
9;node;;pp_mainloop.c;main;246;10;246;11;0;0;0;;8,1;" 1;"
10;virtual node;;;main;0;0;0;0;0;0;0;;13;""
11;node;;pp_mainloop.c;main;244;7;244;17;0;0;0;;10;" init_cpt--;"
12;node;;pp_mainloop.c;main;243;9;243;25;0;0;1;timer_periodic;11,10;" timer_periodic();"
13;node;;pp_mainloop.c;main;242;10;242;18;0;0;0;;12,9;" init_cpt (ImplicitCastExpr, LValueToRValue, uint8_t);"
14;node;;pp_mainloop.c;main;231;3;241;16;0;0;1;timer_init,modem_init,adc_init,spi_init,link_fbw_init,gps_init,nav_init,ir_init,estimator_init;13;" uint8_t init_cpt;; timer_init(); modem_init(); adc_init(); spi_init(); link_fbw_init(); gps_init(); nav_init(); ir_init(); estimator_init(); init_cpt = 30;"
15;entry;;pp_mainloop.c;main;230;2;230;2;0;0;0;;14;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_mainloop.c;timer_init;86;1;86;1;0;0;0;;;""
1;node;;pp_mainloop.c;timer_init;83;3;85;48;0;0;0;;0;" (*(volatile uint8_t *)((47) + 32)) = 0; (*(volatile uint8_t *)((46) + 32)) = 1; (*(volatile uint8_t *)((37) + 32)) = 5;"
2;entry;;pp_mainloop.c;timer_init;82;40;82;40;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_mainloop.c;timer_now;91;1;91;1;0;0;0;;;""
1;node;;pp_mainloop.c;timer_now;90;3;90;49;0;0;0;;0;" return (*(volatile uint16_t *)((44) + 32));;"
2;entry;;pp_mainloop.c;timer_now;89;2;89;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_mainloop.c;timer_now_non_atomic;96;1;96;1;0;0;0;;;""
1;node;;pp_mainloop.c;timer_now_non_atomic;95;3;95;48;0;0;0;;0;" return (*(volatile uint8_t *)((44) + 32));;"
2;entry;;pp_mainloop.c;timer_now_non_atomic;94;2;94;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_mainloop.c;timer_periodic;104;1;104;1;0;0;0;;;""
1;node;;pp_mainloop.c;timer_periodic;102;3;103;14;0;0;0;;0;" (*(volatile uint8_t *)((54) + 32)) = 1 << 6; return (!0);;"
2;node;;pp_mainloop.c;timer_periodic;101;5;101;13;0;0;0;;0;" return 0;;"
3;node;;pp_mainloop.c;timer_periodic;100;7;100;102;0;0;0;;2,1;" !((*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((54) + 32)))))) & (1 << (6)));"
4;entry;;pp_mainloop.c;timer_periodic;99;2;99;2;0;0;0;;3;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_modem.c;__vector_5;227;1;227;1;0;0;0;;;""
1;node;;pp_modem.c;__vector_5;224;85;224;96;0;0;0;;0;" tx_tail = 0;"
2;node;;pp_modem.c;__vector_5;224;9;224;82;0;0;0;;1,0;" tx_byte = tx_buf[tx_tail]; tx_byte_idx = 0; tx_tail++; tx_tail >= 255;"
3;node;;pp_modem.c;__vector_5;222;8;222;102;0;0;0;;0;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((57) + 32)))))) &= ~(1 << (4));"
4;node;;pp_modem.c;__vector_5;221;9;221;27;0;0;0;;3,2;" tx_head == tx_tail;"
5;node;;pp_modem.c;__vector_5;219;3;220;24;0;0;0;;4,0;" tx_byte_idx++; tx_byte_idx >= 10;"
6;node;;pp_modem.c;__vector_5;217;6;217;99;0;0;0;;5;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((18) + 32)))))) |= (1 << (6));"
7;node;;pp_modem.c;__vector_5;214;5;214;18;0;0;0;;5;" tx_byte >>= 1;"
8;node;;pp_modem.c;__vector_5;213;8;213;102;0;0;0;;7;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((18) + 32)))))) &= ~(1 << (6));"
9;node;;pp_modem.c;__vector_5;211;8;211;101;0;0;0;;7;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((18) + 32)))))) |= (1 << (6));"
10;node;;pp_modem.c;__vector_5;210;9;210;23;0;0;0;;9,8;" tx_byte & 1;"
11;node;;pp_modem.c;__vector_5;209;12;209;27;0;0;0;;10,6;" tx_byte_idx < 9;"
12;node;;pp_modem.c;__vector_5;208;6;208;100;0;0;0;;5;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((18) + 32)))))) &= ~(1 << (6));"
13;node;;pp_modem.c;__vector_5;207;7;207;23;0;0;0;;12,11;" tx_byte_idx == 0;"
14;entry;;pp_modem.c;__vector_5;206;100;206;100;0;0;0;;13;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_modem.c;itoa;131;1;131;1;0;0;0;;;""
1;node;;pp_modem.c;itoa;129;2;129;44;0;0;1;__itoa_ncheck;0;" __itoa_ncheck(__val, __s, __radix); return [B1.1];;"
2;node;;pp_modem.c;itoa;125;2;126;12;0;0;0;;0;" *__s = 0; return __s;;"
3;node;;pp_modem.c;itoa;124;31;124;43;0;0;0;;2,1;" __radix > 36;"
4;node;;pp_modem.c;itoa;124;16;124;27;0;0;0;;2,3;" __radix < 2;"
5;node;;pp_modem.c;itoa;123;2;123;37;0;0;1;__itoa;0;" __itoa(__val, __s, __radix); return [B5.1];;"
6;node;;pp_modem.c;itoa;121;9;121;40;0;0;1;__builtin_constant_p;5,4;" __builtin_constant_p(__radix); ![B6.1];"
7;entry;;pp_modem.c;itoa;120;2;120;2;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_modem.c;ltoa;145;1;145;1;0;0;0;;;""
1;node;;pp_modem.c;ltoa;143;2;143;44;0;0;1;__ltoa_ncheck;0;" __ltoa_ncheck(__val, __s, __radix); return [B1.1];;"
2;node;;pp_modem.c;ltoa;139;2;140;12;0;0;0;;0;" *__s = 0; return __s;;"
3;node;;pp_modem.c;ltoa;138;31;138;43;0;0;0;;2,1;" __radix > 36;"
4;node;;pp_modem.c;ltoa;138;16;138;27;0;0;0;;2,3;" __radix < 2;"
5;node;;pp_modem.c;ltoa;137;2;137;37;0;0;1;__ltoa;0;" __ltoa(__val, __s, __radix); return [B5.1];;"
6;node;;pp_modem.c;ltoa;135;9;135;40;0;0;1;__builtin_constant_p;5,4;" __builtin_constant_p(__radix); ![B6.1];"
7;entry;;pp_modem.c;ltoa;134;2;134;2;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_modem.c;modem_init;205;1;205;1;0;0;0;;;""
1;node;;pp_modem.c;modem_init;198;3;204;55;0;0;0;;0;" (*(volatile uint8_t *)((23) + 32)) |= (1 << (4)); (*(volatile uint8_t *)((49) + 32)) = 1; (*(volatile uint8_t *)((51) + 32)) = (1 << (3)) | (1 << (4)) | (1 << (0)); (*(volatile uint8_t *)((17) + 32)) |= (1 << (7)) | (1 << (6)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((18) + 32)))))) |= (1 << (6)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((18) + 32)))))) &= ~(1 << (7)); (*(volatile uint8_t *)((58) + 32)) |= (1 << (1));"
2;entry;;pp_modem.c;modem_init;197;26;197;26;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_modem.c;ultoa;173;1;173;1;0;0;0;;;""
1;node;;pp_modem.c;ultoa;171;2;171;45;0;0;1;__ultoa_ncheck;0;" __ultoa_ncheck(__val, __s, __radix); return [B1.1];;"
2;node;;pp_modem.c;ultoa;167;2;168;12;0;0;0;;0;" *__s = 0; return __s;;"
3;node;;pp_modem.c;ultoa;166;31;166;43;0;0;0;;2,1;" __radix > 36;"
4;node;;pp_modem.c;ultoa;166;16;166;27;0;0;0;;2,3;" __radix < 2;"
5;node;;pp_modem.c;ultoa;165;2;165;38;0;0;1;__ultoa;0;" __ultoa(__val, __s, __radix); return [B5.1];;"
6;node;;pp_modem.c;ultoa;163;9;163;40;0;0;1;__builtin_constant_p;5,4;" __builtin_constant_p(__radix); ![B6.1];"
7;entry;;pp_modem.c;ultoa;162;2;162;2;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_modem.c;utoa;159;1;159;1;0;0;0;;;""
1;node;;pp_modem.c;utoa;157;2;157;44;0;0;1;__utoa_ncheck;0;" __utoa_ncheck(__val, __s, __radix); return [B1.1];;"
2;node;;pp_modem.c;utoa;153;2;154;12;0;0;0;;0;" *__s = 0; return __s;;"
3;node;;pp_modem.c;utoa;152;31;152;43;0;0;0;;2,1;" __radix > 36;"
4;node;;pp_modem.c;utoa;152;16;152;27;0;0;0;;2,3;" __radix < 2;"
5;node;;pp_modem.c;utoa;151;2;151;37;0;0;1;__utoa;0;" __utoa(__val, __s, __radix); return [B5.1];;"
6;node;;pp_modem.c;utoa;149;9;149;40;0;0;1;__builtin_constant_p;5,4;" __builtin_constant_p(__radix); ![B6.1];"
7;entry;;pp_modem.c;utoa;148;2;148;2;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;approaching;456;1;456;1;0;0;0;;;""
1;node;;pp_nav.c;approaching;454;3;455;25;0;0;0;;0;" scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y; return (scal_prod < 0);;"
2;node;;pp_nav.c;approaching;453;5;453;16;0;0;0;;0;" return (!0);;"
3;node;;pp_nav.c;approaching;451;3;452;34;0;0;0;;2,1;" [B6.6] ? [B4.1] : [B5.1]; carrot = ([B3.1]); dist2_to_wp < carrot * carrot;"
4;node;;pp_nav.c;approaching;451;27;451;29;0;0;0;;3;" 40 (ImplicitCastExpr, IntegralToFloating, float);"
5;node;;pp_nav.c;approaching;451;32;451;38;0;0;0;;3;" carrot (ImplicitCastExpr, LValueToRValue, float);"
6;node;;pp_nav.c;approaching;446;3;451;24;0;0;0;;4,5;" float pw_x = waypoints[wp].x - estimator_x;; float pw_y = waypoints[wp].y - estimator_y;; float scal_prod;; dist2_to_wp = pw_x * pw_x + pw_y * pw_y; carrot = 5. * estimator_hspeed_mod; carrot < 40;"
7;entry;;pp_nav.c;approaching;445;40;445;40;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;auto_nav;432;1;432;1;0;0;0;;;""
1;node;;pp_nav.c;auto_nav;204;11;204;20;0;0;0;;42,57,100,137,158,159,0;" nav_block (ImplicitCastExpr, IntegralCast, int);"
2;node;;pp_nav.c;auto_nav;400;12;400;21;0;0;0;;3,5,19,33,36,0;" nav_stage (ImplicitCastExpr, IntegralCast, int);"
3;node;case 4;pp_nav.c;auto_nav;428;15;429;144;0;0;0;;0;" nav_stage = 4; nav_block++; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
4;virtual node;label_endwhile_8;;auto_nav;0;0;0;0;0;0;0;;3;""
5;node;case 3;pp_nav.c;auto_nav;425;17;425;28;0;0;0;;37;" nav_stage = 3;"
6;node;;pp_nav.c;auto_nav;424;11;424;17;0;0;0;;0;" return;;"
7;node;;pp_nav.c;auto_nav;423;67;423;167;0;0;0;;0;" nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
8;node;;pp_nav.c;auto_nav;423;49;423;62;0;0;0;;7,6;" qdr < 180 + 10;"
9;node;;pp_nav.c;auto_nav;423;16;423;45;0;0;0;;8,6;" [B12.1] ? [B10.1] : [B11.1]; ([B9.1]) < qdr;"
10;node;;pp_nav.c;auto_nav;423;29;423;32;0;0;0;;9;" 180;"
11;node;;pp_nav.c;auto_nav;423;35;423;38;0;0;0;;9;" 350;"
12;node;;pp_nav.c;auto_nav;423;17;423;26;0;0;0;;10,11;" 180 < 350;"
13;virtual node;;;auto_nav;0;0;0;0;0;0;0;;15;""
14;node;;pp_nav.c;auto_nav;422;387;422;397;0;0;0;;13;" qdr -= 360;"
15;node;;pp_nav.c;auto_nav;422;375;422;385;0;0;0;;14,12;" qdr >= 360;"
16;virtual node;;;auto_nav;0;0;0;0;0;0;0;;18;""
17;node;;pp_nav.c;auto_nav;422;356;422;366;0;0;0;;16;" qdr += 360;"
18;node;;pp_nav.c;auto_nav;422;347;422;354;0;0;0;;17,15;" qdr < 0;"
19;node;case 2;pp_nav.c;auto_nav;416;17;422;336;0;0;1;atan2,fly_to_xy,cos,fabs,sin,fabs;18;" nav_stage = 2; auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[4].a; pre_climb = 0.; atan2(estimator_y - waypoints[4].y, estimator_x - waypoints[4].x); float alpha = atan2(estimator_y - waypoints[4].y, estimator_x - waypoints[4].x);; float alpha_carrot = alpha + 5. / -100 * estimator_hspeed_mod;; cos(alpha_carrot); fabs(100); sin(alpha_carrot); fabs(100); fly_to_xy(waypoints[4].x + [B19.10] * [B19.11], waypoints[4].y + [B19.12] * [B19.13]); qdr = ((3.1415926535897931 / 2 - alpha_carrot) / 3.1415926535897931 * 180.);"
20;node;;pp_nav.c;auto_nav;415;11;415;17;0;0;0;;0;" return;;"
21;node;;pp_nav.c;auto_nav;414;61;414;161;0;0;0;;0;" nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
22;node;;pp_nav.c;auto_nav;414;45;414;56;0;0;0;;21,20;" qdr < 0 + 10;"
23;node;;pp_nav.c;auto_nav;414;16;414;41;0;0;0;;22,20;" [B26.1] ? [B24.1] : [B25.1]; ([B23.1]) < qdr;"
24;node;;pp_nav.c;auto_nav;414;27;414;28;0;0;0;;23;" 0;"
25;node;;pp_nav.c;auto_nav;414;31;414;34;0;0;0;;23;" 350;"
26;node;;pp_nav.c;auto_nav;414;17;414;24;0;0;0;;24,25;" 0 < 350;"
27;virtual node;;;auto_nav;0;0;0;0;0;0;0;;29;""
28;node;;pp_nav.c;auto_nav;413;387;413;397;0;0;0;;27;" qdr -= 360;"
29;node;;pp_nav.c;auto_nav;413;375;413;385;0;0;0;;28,26;" qdr >= 360;"
30;virtual node;;;auto_nav;0;0;0;0;0;0;0;;32;""
31;node;;pp_nav.c;auto_nav;413;356;413;366;0;0;0;;30;" qdr += 360;"
32;node;;pp_nav.c;auto_nav;413;347;413;354;0;0;0;;31,29;" qdr < 0;"
33;node;case 1;pp_nav.c;auto_nav;407;17;413;336;0;0;1;atan2,fly_to_xy,cos,fabs,sin,fabs;32;" nav_stage = 1; auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[1].a; pre_climb = 0.; atan2(estimator_y - waypoints[1].y, estimator_x - waypoints[1].x); float alpha = atan2(estimator_y - waypoints[1].y, estimator_x - waypoints[1].x);; float alpha_carrot = alpha + 5. / -100 * estimator_hspeed_mod;; cos(alpha_carrot); fabs(100); sin(alpha_carrot); fabs(100); fly_to_xy(waypoints[1].x + [B33.10] * [B33.11], waypoints[1].y + [B33.12] * [B33.13]); qdr = ((3.1415926535897931 / 2 - alpha_carrot) / 3.1415926535897931 * 180.);"
34;node;;pp_nav.c;auto_nav;406;13;406;113;0;0;0;;0;" nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
35;virtual node;;pp_nav.c;auto_nav;404;13;404;34;0;0;0;;4;""
36;node;case 0;pp_nav.c;auto_nav;402;15;403;21;0;0;0;;35,34;" nav_stage = 0; !((!0));"
37;virtual node;label_while_7;;auto_nav;0;0;0;0;0;0;0;;36;""
38;node;;pp_nav.c;auto_nav;399;52;399;185;0;0;0;;0;" nav_block = 1; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
39;node;;pp_nav.c;auto_nav;399;9;399;46;0;0;0;;38,2;" [B42.2] ? [B40.3] : [B41.1];"
40;node;;pp_nav.c;auto_nav;399;22;399;42;0;0;0;;39;" rc_event_1 = 0; !0; ... , ;"
41;node;;pp_nav.c;auto_nav;399;45;399;46;0;0;0;;39;" 0;"
42;node;case 5;pp_nav.c;auto_nav;398;13;399;19;0;0;0;;40,41;" nav_block = 5; rc_event_1 (ImplicitCastExpr, IntegralCast, int);"
43;node;;pp_nav.c;auto_nav;386;12;386;21;0;0;0;;44,52,42;" nav_stage (ImplicitCastExpr, IntegralCast, int);"
44;node;case 1;pp_nav.c;auto_nav;395;15;396;144;0;0;0;;0;" nav_stage = 1; nav_block++; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
45;node;;pp_nav.c;auto_nav;394;9;394;15;0;0;0;;0;" return;;"
46;virtual node;;;auto_nav;0;0;0;0;0;0;0;;48;""
47;node;;pp_nav.c;auto_nav;393;385;393;395;0;0;0;;46;" qdr -= 360;"
48;node;;pp_nav.c;auto_nav;393;373;393;383;0;0;0;;47,45;" qdr >= 360;"
49;virtual node;;;auto_nav;0;0;0;0;0;0;0;;51;""
50;node;;pp_nav.c;auto_nav;393;354;393;364;0;0;0;;49;" qdr += 360;"
51;node;;pp_nav.c;auto_nav;393;345;393;352;0;0;0;;50,48;" qdr < 0;"
52;node;case 0;pp_nav.c;auto_nav;387;15;393;334;0;0;1;atan2,fly_to_xy,cos,fabs,sin,fabs;51;" nav_stage = 0; auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[0].a; pre_climb = 0.; atan2(estimator_y - waypoints[0].y, estimator_x - waypoints[0].x); float alpha = atan2(estimator_y - waypoints[0].y, estimator_x - waypoints[0].x);; float alpha_carrot = alpha + 5. / -150 * estimator_hspeed_mod;; cos(alpha_carrot); fabs(150); sin(alpha_carrot); fabs(150); fly_to_xy(waypoints[0].x + [B52.10] * [B52.11], waypoints[0].y + [B52.12] * [B52.13]); qdr = ((3.1415926535897931 / 2 - alpha_carrot) / 3.1415926535897931 * 180.);"
53;node;;pp_nav.c;auto_nav;384;9;384;142;0;0;0;;0;" nav_block = 5; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
54;node;;pp_nav.c;auto_nav;383;9;383;46;0;0;0;;53,43;" [B57.2] ? [B55.3] : [B56.1];"
55;node;;pp_nav.c;auto_nav;383;22;383;42;0;0;0;;54;" rc_event_1 = 0; !0; ... , ;"
56;node;;pp_nav.c;auto_nav;383;45;383;46;0;0;0;;54;" 0;"
57;node;case 4;pp_nav.c;auto_nav;382;13;383;19;0;0;0;;55,56;" nav_block = 4; rc_event_1 (ImplicitCastExpr, IntegralCast, int);"
58;node;;pp_nav.c;auto_nav;375;12;375;21;0;0;0;;59,95,57;" nav_stage (ImplicitCastExpr, IntegralCast, int);"
59;node;case 1;pp_nav.c;auto_nav;379;15;380;144;0;0;0;;0;" nav_stage = 1; nav_block++; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
60;node;;pp_nav.c;auto_nav;378;9;378;15;0;0;0;;0;" return;;"
61;virtual node;;;auto_nav;0;0;0;0;0;0;0;;63;""
62;node;;pp_nav.c;auto_nav;377;1371;377;1381;0;0;0;;61;" qdr -= 360;"
63;node;;pp_nav.c;auto_nav;377;1359;377;1369;0;0;0;;62,60;" qdr >= 360;"
64;virtual node;;;auto_nav;0;0;0;0;0;0;0;;66;""
65;node;;pp_nav.c;auto_nav;377;1340;377;1350;0;0;0;;64;" qdr += 360;"
66;node;;pp_nav.c;auto_nav;377;1331;377;1338;0;0;0;;65,63;" qdr < 0;"
67;node;;pp_nav.c;auto_nav;377;1024;377;1320;0;0;1;atan2,fly_to_xy,cos,fabs,sin,fabs;66;" atan2(estimator_y - carrot_y, estimator_x - carrot_x); float alpha = atan2(estimator_y - carrot_y, estimator_x - carrot_x);; float alpha_carrot = alpha + 5. / -50 * estimator_hspeed_mod;; cos(alpha_carrot); fabs(50); sin(alpha_carrot); fabs(50); fly_to_xy(carrot_x + [B67.4] * [B67.5], carrot_y + [B67.6] * [B67.7]); qdr = ((3.1415926535897931 / 2 - alpha_carrot) / 3.1415926535897931 * 180.);"
68;node;;pp_nav.c;auto_nav;377;934;377;1016;0;0;0;;67;" [B71.3] ? [B69.1] : [B70.1]; desired_altitude = ([B68.1]);"
69;node;;pp_nav.c;auto_nav;377;986;377;1002;0;0;0;;68;" desired_altitude (ImplicitCastExpr, FloatingCast, double);"
70;node;;pp_nav.c;auto_nav;377;1005;377;1015;0;0;0;;68;" 150. + 125.;"
71;node;;pp_nav.c;auto_nav;377;852;377;983;0;0;0;;69,70;" [B74.2] ? [B72.1] : [B73.1]; desired_altitude = ([B71.1]); desired_altitude < 150. + 125.;"
72;node;;pp_nav.c;auto_nav;377;903;377;919;0;0;0;;71;" desired_altitude (ImplicitCastExpr, FloatingCast, double);"
73;node;;pp_nav.c;auto_nav;377;922;377;931;0;0;0;;71;" 50. + 125.;"
74;node;;pp_nav.c;auto_nav;377;786;377;900;0;0;0;;72,73;" desired_altitude += ((float)roll / (float)(600 * 16) * -1. + 0); desired_altitude > 50. + 125.;"
75;node;;pp_nav.c;auto_nav;377;744;377;782;0;0;0;;74,67;" roll < -((int16_t)((600 * 16) * 0.050000000000000003));"
76;node;;pp_nav.c;auto_nav;377;651;377;740;0;0;0;;74,75;" vertical_mode = 3; roll = from_fbw.channels[1]; roll > ((int16_t)((600 * 16) * 0.050000000000000003));"
77;node;;pp_nav.c;auto_nav;377;599;377;647;0;0;0;;76;" [B80.3] ? [B78.1] : [B79.1]; carrot_y = ([B77.1]);"
78;node;;pp_nav.c;auto_nav;377;630;377;638;0;0;0;;77;" carrot_y (ImplicitCastExpr, FloatingCast, double);"
79;node;;pp_nav.c;auto_nav;377;641;377;646;0;0;0;;77;" -250.;"
80;node;;pp_nav.c;auto_nav;377;551;377;627;0;0;0;;78,79;" [B83.2] ? [B81.1] : [B82.1]; carrot_y = ([B80.1]); carrot_y > -250.;"
81;node;;pp_nav.c;auto_nav;377;581;377;589;0;0;0;;80;" carrot_y (ImplicitCastExpr, FloatingCast, double);"
82;node;;pp_nav.c;auto_nav;377;592;377;596;0;0;0;;80;" 250.;"
83;node;;pp_nav.c;auto_nav;377;492;377;578;0;0;0;;81,82;" carrot_y += ((float)pitch / (float)(600 * 16) * -20. + 0); carrot_y < 250.;"
84;node;;pp_nav.c;auto_nav;377;449;377;488;0;0;0;;83,76;" pitch < -((int16_t)((600 * 16) * 0.050000000000000003));"
85;node;;pp_nav.c;auto_nav;377;373;377;445;0;0;0;;83,84;" pitch = from_fbw.channels[2]; pitch > ((int16_t)((600 * 16) * 0.050000000000000003));"
86;node;;pp_nav.c;auto_nav;377;321;377;369;0;0;0;;85;" [B89.3] ? [B87.1] : [B88.1]; carrot_x = ([B86.1]);"
87;node;;pp_nav.c;auto_nav;377;352;377;360;0;0;0;;86;" carrot_x (ImplicitCastExpr, FloatingCast, double);"
88;node;;pp_nav.c;auto_nav;377;363;377;368;0;0;0;;86;" -250.;"
89;node;;pp_nav.c;auto_nav;377;273;377;349;0;0;0;;87,88;" [B92.2] ? [B90.1] : [B91.1]; carrot_x = ([B89.1]); carrot_x > -250.;"
90;node;;pp_nav.c;auto_nav;377;303;377;311;0;0;0;;89;" carrot_x (ImplicitCastExpr, FloatingCast, double);"
91;node;;pp_nav.c;auto_nav;377;314;377;318;0;0;0;;89;" 250.;"
92;node;;pp_nav.c;auto_nav;377;216;377;300;0;0;0;;90,91;" carrot_x += ((float)yaw / (float)(600 * 16) * -20. + 0); carrot_x < 250.;"
93;node;;pp_nav.c;auto_nav;377;175;377;212;0;0;0;;92,85;" yaw < -((int16_t)((600 * 16) * 0.050000000000000003));"
94;node;;pp_nav.c;auto_nav;377;95;377;171;0;0;0;;92,93;" int16_t yaw = from_fbw.channels[3];; yaw > ((int16_t)((600 * 16) * 0.050000000000000003));"
95;node;case 0;pp_nav.c;auto_nav;376;15;377;91;0;0;0;;94,67;" nav_stage = 0; static float carrot_x;; static float carrot_y;; int16_t pitch;; int16_t roll;; pprz_mode == 2;"
96;node;;pp_nav.c;auto_nav;373;9;373;142;0;0;0;;0;" nav_block = 4; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
97;node;;pp_nav.c;auto_nav;372;9;372;46;0;0;0;;96,58;" [B100.2] ? [B98.3] : [B99.1];"
98;node;;pp_nav.c;auto_nav;372;22;372;42;0;0;0;;97;" rc_event_1 = 0; !0; ... , ;"
99;node;;pp_nav.c;auto_nav;372;45;372;46;0;0;0;;97;" 0;"
100;node;case 3;pp_nav.c;auto_nav;371;13;372;19;0;0;0;;98,99;" nav_block = 3; rc_event_1 (ImplicitCastExpr, IntegralCast, int);"
101;node;;pp_nav.c;auto_nav;286;12;286;21;0;0;0;;102,104,108,112,116,120,124,128,131,100;" nav_stage (ImplicitCastExpr, IntegralCast, int);"
102;node;case 8;pp_nav.c;auto_nav;368;15;369;144;0;0;0;;0;" nav_stage = 8; nav_block++; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
103;virtual node;label_endwhile_6;;auto_nav;0;0;0;0;0;0;0;;102;""
104;node;case 7;pp_nav.c;auto_nav;365;17;365;28;0;0;0;;132;" nav_stage = 7;"
105;node;;pp_nav.c;auto_nav;364;11;364;17;0;0;0;;0;" return;;"
106;node;;pp_nav.c;auto_nav;357;13;362;27;0;0;1;route_to;105;" route_to(last_wp, 5); auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[5].a; pre_climb = 0.;"
107;node;;pp_nav.c;auto_nav;355;15;355;130;0;0;0;;0;" last_wp = 5; nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
108;node;case 6;pp_nav.c;auto_nav;353;17;354;29;0;0;1;approaching;107,106;" nav_stage = 6; approaching(5);"
109;node;;pp_nav.c;auto_nav;352;11;352;17;0;0;0;;0;" return;;"
110;node;;pp_nav.c;auto_nav;345;13;350;27;0;0;1;fly_to;109;" fly_to(4); auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[4].a; pre_climb = 0.;"
111;node;;pp_nav.c;auto_nav;343;15;343;130;0;0;0;;0;" last_wp = 4; nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
112;node;case 5;pp_nav.c;auto_nav;341;17;342;29;0;0;1;approaching;111,110;" nav_stage = 5; approaching(4);"
113;node;;pp_nav.c;auto_nav;340;11;340;17;0;0;0;;0;" return;;"
114;node;;pp_nav.c;auto_nav;333;13;338;27;0;0;1;fly_to;113;" fly_to(3); auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[3].a; pre_climb = 0.;"
115;node;;pp_nav.c;auto_nav;331;15;331;130;0;0;0;;0;" last_wp = 3; nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
116;node;case 4;pp_nav.c;auto_nav;329;17;330;29;0;0;1;approaching;115,114;" nav_stage = 4; approaching(3);"
117;node;;pp_nav.c;auto_nav;328;11;328;17;0;0;0;;0;" return;;"
118;node;;pp_nav.c;auto_nav;321;13;326;27;0;0;1;route_to;117;" route_to(last_wp, 2); auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[2].a; pre_climb = 0.;"
119;node;;pp_nav.c;auto_nav;319;15;319;130;0;0;0;;0;" last_wp = 2; nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
120;node;case 3;pp_nav.c;auto_nav;317;17;318;29;0;0;1;approaching;119,118;" nav_stage = 3; approaching(2);"
121;node;;pp_nav.c;auto_nav;316;11;316;17;0;0;0;;0;" return;;"
122;node;;pp_nav.c;auto_nav;309;13;314;27;0;0;1;fly_to;121;" fly_to(1); auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[1].a; pre_climb = 0.;"
123;node;;pp_nav.c;auto_nav;307;15;307;130;0;0;0;;0;" last_wp = 1; nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
124;node;case 2;pp_nav.c;auto_nav;305;17;306;29;0;0;1;approaching;123,122;" nav_stage = 2; approaching(1);"
125;node;;pp_nav.c;auto_nav;304;11;304;17;0;0;0;;0;" return;;"
126;node;;pp_nav.c;auto_nav;297;13;302;27;0;0;1;fly_to;125;" fly_to(6); auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[6].a; pre_climb = 0.;"
127;node;;pp_nav.c;auto_nav;295;15;295;130;0;0;0;;0;" last_wp = 6; nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
128;node;case 1;pp_nav.c;auto_nav;293;17;294;29;0;0;1;approaching;127,126;" nav_stage = 1; approaching(6);"
129;node;;pp_nav.c;auto_nav;292;13;292;113;0;0;0;;0;" nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
130;virtual node;;pp_nav.c;auto_nav;290;13;290;34;0;0;0;;103;""
131;node;case 0;pp_nav.c;auto_nav;288;15;289;21;0;0;0;;130,129;" nav_stage = 0; !((!0));"
132;virtual node;label_while_5;;auto_nav;0;0;0;0;0;0;0;;131;""
133;node;;pp_nav.c;auto_nav;284;11;284;144;0;0;0;;0;" nav_block = 3; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
134;node;;pp_nav.c;auto_nav;283;9;283;46;0;0;0;;133,101;" [B137.2] ? [B135.3] : [B136.1];"
135;node;;pp_nav.c;auto_nav;283;22;283;42;0;0;0;;134;" rc_event_1 = 0; !0; ... , ;"
136;node;;pp_nav.c;auto_nav;283;45;283;46;0;0;0;;134;" 0;"
137;node;case 2;pp_nav.c;auto_nav;282;13;283;19;0;0;0;;135,136;" nav_block = 2; rc_event_1 (ImplicitCastExpr, IntegralCast, int);"
138;node;;pp_nav.c;auto_nav;245;12;245;21;0;0;0;;139,141,145,149,152,137;" nav_stage (ImplicitCastExpr, IntegralCast, int);"
139;node;case 4;pp_nav.c;auto_nav;279;15;280;144;0;0;0;;0;" nav_stage = 4; nav_block++; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
140;virtual node;label_endwhile_4;;auto_nav;0;0;0;0;0;0;0;;139;""
141;node;case 3;pp_nav.c;auto_nav;276;17;276;28;0;0;0;;153;" nav_stage = 3;"
142;node;;pp_nav.c;auto_nav;275;11;275;17;0;0;0;;0;" return;;"
143;node;;pp_nav.c;auto_nav;268;13;273;27;0;0;1;fly_to;142;" fly_to(4); auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[4].a; pre_climb = 0.;"
144;node;;pp_nav.c;auto_nav;266;15;266;130;0;0;0;;0;" last_wp = 4; nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
145;node;case 2;pp_nav.c;auto_nav;264;17;265;29;0;0;1;approaching;144,143;" nav_stage = 2; approaching(4);"
146;node;;pp_nav.c;auto_nav;263;11;263;17;0;0;0;;0;" return;;"
147;node;;pp_nav.c;auto_nav;256;13;261;27;0;0;1;fly_to;146;" fly_to(1); auto_pitch = 0; nav_pitch = 0.; vertical_mode = 3; desired_altitude = waypoints[1].a; pre_climb = 0.;"
148;node;;pp_nav.c;auto_nav;254;15;254;130;0;0;0;;0;" last_wp = 1; nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
149;node;case 1;pp_nav.c;auto_nav;252;17;253;29;0;0;1;approaching;148,147;" nav_stage = 1; approaching(1);"
150;node;;pp_nav.c;auto_nav;251;13;251;113;0;0;0;;0;" nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
151;virtual node;;pp_nav.c;auto_nav;249;13;249;34;0;0;0;;140;""
152;node;case 0;pp_nav.c;auto_nav;247;15;248;21;0;0;0;;151,150;" nav_stage = 0; !((!0));"
153;virtual node;label_while_3;;auto_nav;0;0;0;0;0;0;0;;152;""
154;node;;pp_nav.c;auto_nav;243;9;243;142;0;0;0;;0;" nav_block = 2; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
155;node;;pp_nav.c;auto_nav;242;9;242;46;0;0;0;;154,138;" [B158.2] ? [B156.3] : [B157.1];"
156;node;;pp_nav.c;auto_nav;242;22;242;42;0;0;0;;155;" rc_event_1 = 0; !0; ... , ;"
157;node;;pp_nav.c;auto_nav;242;45;242;46;0;0;0;;155;" 0;"
158;node;case 1;pp_nav.c;auto_nav;241;13;242;19;0;0;0;;156,157;" nav_block = 1; rc_event_1 (ImplicitCastExpr, IntegralCast, int);"
159;node;case 0;pp_nav.c;auto_nav;205;13;206;21;0;0;0;;160,164,174,176,179,158;" nav_block = 0; nav_stage (ImplicitCastExpr, IntegralCast, int);"
160;node;case 4;pp_nav.c;auto_nav;238;15;239;144;0;0;0;;0;" nav_stage = 4; nav_block++; nav_stage = 0; block_time = 0; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
161;node;;pp_nav.c;auto_nav;237;9;237;15;0;0;0;;0;" return;;"
162;node;;pp_nav.c;auto_nav;231;11;235;35;0;0;0;;161;" desired_course = ((270.) / 180. * 3.1415926535897931); auto_pitch = 0; nav_pitch = 0.; vertical_mode = 2; desired_climb = 8.;"
163;node;;pp_nav.c;auto_nav;229;13;229;113;0;0;0;;0;" nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
164;node;case 3;pp_nav.c;auto_nav;227;15;228;30;0;0;0;;163,162;" nav_stage = 3; estimator_z > 150.;"
165;node;;pp_nav.c;auto_nav;226;9;226;15;0;0;0;;0;" return;;"
166;node;;pp_nav.c;auto_nav;224;11;224;130;0;0;0;;165;" [B172.5] ? [B167.1] : ([B168.1]); nav_desired_gaz = ([B166.1]);"
167;node;;pp_nav.c;auto_nav;224;56;224;57;0;0;0;;166;" 0 (ImplicitCastExpr, IntegralToFloating, double);"
168;node;;pp_nav.c;auto_nav;224;61;224;128;0;0;0;;166;" [B171.1] ? [B169.1] : [B170.1];"
169;node;;pp_nav.c;auto_nav;224;96;224;106;0;0;0;;168;" (600 * 16) (ImplicitCastExpr, IntegralToFloating, double);"
170;node;;pp_nav.c;auto_nav;224;109;224;128;0;0;0;;168;" 0.80000000000000004 * (600 * 16);"
171;node;;pp_nav.c;auto_nav;224;61;224;93;0;0;0;;169,170;" 0.80000000000000004 * (600 * 16) > (600 * 16);"
172;node;;pp_nav.c;auto_nav;220;11;224;53;0;0;0;;167,171;" desired_course = ((270.) / 180. * 3.1415926535897931); auto_pitch = 0; nav_pitch = 0.14999999999999999; vertical_mode = 1; 0.80000000000000004 * (600 * 16) < 0;"
173;node;;pp_nav.c;auto_nav;218;13;218;113;0;0;0;;0;" nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
174;node;case 2;pp_nav.c;auto_nav;216;15;217;37;0;0;0;;173,172;" nav_stage = 2; estimator_flight_time > 8;"
175;virtual node;label_endwhile_2;;auto_nav;0;0;0;0;0;0;0;;174;""
176;node;case 1;pp_nav.c;auto_nav;213;17;213;28;0;0;0;;180;" nav_stage = 1;"
177;node;;pp_nav.c;auto_nav;212;13;212;113;0;0;0;;0;" nav_stage++; last_x = estimator_x; last_y = estimator_y; stage_time = 0; stage_time_ds = 0; return;;"
178;virtual node;;pp_nav.c;auto_nav;210;13;210;34;0;0;0;;175;""
179;node;case 0;pp_nav.c;auto_nav;208;15;209;41;0;0;0;;178,177;" nav_stage = 0; !(!(estimator_flight_time));"
180;virtual node;label_while_1;;auto_nav;0;0;0;0;0;0;0;;179;""
181;entry;;pp_nav.c;auto_nav;203;36;203;36;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;compute_dist2_to_home;491;1;491;1;0;0;0;;;""
1;node;;pp_nav.c;compute_dist2_to_home;487;3;490;50;0;0;0;;0;" float ph_x = waypoints[0].x - estimator_x;; float ph_y = waypoints[0].y - estimator_y;; dist2_to_home = ph_x * ph_x + ph_y * ph_y; too_far_from_home = dist2_to_home > (500. * 500.);"
2;entry;;pp_nav.c;compute_dist2_to_home;486;49;486;49;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;copysign;49;1;49;1;0;0;0;;;""
1;node;;pp_nav.c;copysign;43;5;48;15;0;0;0;;0;" asm (\"bst\t%D2, 7\t\n\tbld\t%D0, 7\t\" : \"=r\" (__x) : \"0\" (__x), \"r\" (__y));; return __x;;"
2;entry;;pp_nav.c;copysign;42;2;42;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;fly_to;465;1;465;1;0;0;0;;;""
1;node;;pp_nav.c;fly_to;464;3;464;46;0;0;1;fly_to_xy;0;" fly_to_xy(waypoints[wp].x, waypoints[wp].y);"
2;entry;;pp_nav.c;fly_to;463;33;463;33;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;fly_to_xy;462;1;462;1;0;0;0;;;""
1;node;;pp_nav.c;fly_to_xy;459;3;461;85;0;0;1;atan2;0;" desired_x = x; desired_y = y; atan2(y - estimator_y, x - estimator_x); desired_course = 3.1415926535897931 / 2. - [B1.3];"
2;entry;;pp_nav.c;fly_to_xy;458;2;458;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;glide_to;485;1;485;1;0;0;0;;;""
1;node;;pp_nav.c;glide_to;482;3;484;55;0;0;0;;0;" float last_alt = waypoints[_last_wp].a;; desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt); pre_climb = 10. * (waypoints[wp].a - last_alt) / leg;"
2;entry;;pp_nav.c;glide_to;481;53;481;53;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;isfinite;40;1;40;1;0;0;0;;;""
1;node;;pp_nav.c;isfinite;31;5;39;25;0;0;0;;0;" unsigned char __exp;; asm (\"mov\t%0, %C1\t\t\n\tlsl\t%0\t\t\n\tmov\t%0, %D1\t\t\n\trol\t%0\t\t\" : \"=r\" (__exp) : \"r\" (__x));; return __exp != 255;;"
2;entry;;pp_nav.c;isfinite;30;2;30;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;nav_home;499;1;499;1;0;0;0;;;""
1;node;;pp_nav.c;nav_home;494;3;498;30;0;0;1;compute_dist2_to_home;0;" nav_pitch = 0.; vertical_mode = 3; desired_altitude = 125. + 50; compute_dist2_to_home(); dist2_to_wp = dist2_to_home;"
2;virtual node;;;nav_home;0;0;0;0;0;0;0;;4;""
3;node;;pp_nav.c;nav_home;493;376;493;386;0;0;0;;2;" qdr -= 360;"
4;node;;pp_nav.c;nav_home;493;364;493;374;0;0;0;;3,1;" qdr >= 360;"
5;virtual node;;;nav_home;0;0;0;0;0;0;0;;7;""
6;node;;pp_nav.c;nav_home;493;345;493;355;0;0;0;;5;" qdr += 360;"
7;node;;pp_nav.c;nav_home;493;336;493;343;0;0;0;;6,4;" qdr < 0;"
8;node;;pp_nav.c;nav_home;493;5;493;325;0;0;1;atan2,fly_to_xy,cos,fabs,sin,fabs;7;" atan2(estimator_y - waypoints[0].y, estimator_x - waypoints[0].x); float alpha = atan2(estimator_y - waypoints[0].y, estimator_x - waypoints[0].x);; float alpha_carrot = alpha + 5. / -50 * estimator_hspeed_mod;; cos(alpha_carrot); fabs(50); sin(alpha_carrot); fabs(50); fly_to_xy(waypoints[0].x + [B8.4] * [B8.5], waypoints[0].y + [B8.6] * [B8.7]); qdr = ((3.1415926535897931 / 2 - alpha_carrot) / 3.1415926535897931 * 180.);"
9;entry;;pp_nav.c;nav_home;492;22;492;22;0;0;0;;8;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;nav_init;507;1;507;1;0;0;0;;;""
1;node;;pp_nav.c;nav_init;505;3;506;16;0;0;0;;0;" nav_block = 0; nav_stage = 0;"
2;entry;;pp_nav.c;nav_init;504;22;504;22;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;nav_update;503;1;503;1;0;0;0;;;""
1;node;;pp_nav.c;nav_update;501;3;502;13;0;0;1;compute_dist2_to_home,auto_nav;0;" compute_dist2_to_home(); auto_nav();"
2;entry;;pp_nav.c;nav_update;500;24;500;24;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_nav.c;route_to;480;1;480;1;0;0;0;;;""
1;node;;pp_nav.c;route_to;478;3;479;62;0;0;1;fly_to_xy;0;" [B4.3] ? [B2.1] : [B3.1]; alpha = ([B1.1]); fly_to_xy(last_wp_x + alpha * leg_x, last_wp_y + alpha * leg_y);"
2;node;;pp_nav.c;route_to;478;25;478;27;0;0;0;;1;" 1.;"
3;node;;pp_nav.c;route_to;478;30;478;35;0;0;0;;1;" alpha (ImplicitCastExpr, FloatingCast, double);"
4;node;;pp_nav.c;route_to;477;3;478;22;0;0;0;;2,3;" [B7.5] ? [B5.1] : [B6.1]; alpha += ([B4.1]); 1. < alpha;"
5;node;;pp_nav.c;route_to;477;33;477;45;0;0;0;;4;" carrot / leg (ImplicitCastExpr, FloatingCast, double);"
6;node;;pp_nav.c;route_to;477;48;477;50;0;0;0;;4;" 0.;"
7;node;;pp_nav.c;route_to;475;3;477;30;0;0;1;sqrt;5,6;" [B10.7] ? [B8.1] : [B9.1]; alpha = ([B7.1]); sqrt(leg2); leg = [B7.3]; carrot / leg > 0.;"
8;node;;pp_nav.c;route_to;475;25;475;30;0;0;0;;7;" alpha (ImplicitCastExpr, FloatingCast, double);"
9;node;;pp_nav.c;route_to;475;33;475;35;0;0;0;;7;" 0.;"
10;node;;pp_nav.c;route_to;469;3;475;22;0;0;0;;8,9;" float last_wp_x = waypoints[_last_wp].x;; float last_wp_y = waypoints[_last_wp].y;; float leg_x = waypoints[wp].x - last_wp_x;; float leg_y = waypoints[wp].y - last_wp_y;; float leg2 = leg_x * leg_x + leg_y * leg_y;; alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2; alpha > 0.;"
11;entry;;pp_nav.c;route_to;468;2;468;2;0;0;0;;10;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_pid.c;altitude_pid_run;359;1;359;1;0;0;0;;;""
1;node;;pp_pid.c;altitude_pid_run;358;27;358;45;0;0;0;;0;" desired_climb = 1.;"
2;node;;pp_pid.c;altitude_pid_run;358;7;358;25;0;0;0;;1,0;" desired_climb > 1.;"
3;node;;pp_pid.c;altitude_pid_run;357;28;357;47;0;0;0;;2;" desired_climb = -1.;"
4;node;;pp_pid.c;altitude_pid_run;355;3;357;26;0;0;0;;3,2;" float err = estimator_z - desired_altitude;; desired_climb = pre_climb + altitude_pgain * err; desired_climb < -1.;"
5;entry;;pp_pid.c;altitude_pid_run;354;30;354;30;0;0;0;;4;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_pid.c;climb_pid_run;352;1;352;1;0;0;0;;;""
1;node;;pp_pid.c;climb_pid_run;349;5;350;44;0;0;0;;0;" [B7.1] ? [B2.1] : ([B3.1]); desired_gaz = ([B1.1]); desired_pitch = nav_pitch + pitch_of_vz;"
2;node;;pp_pid.c;climb_pid_run;349;44;349;45;0;0;0;;1;" 0 (ImplicitCastExpr, IntegralToFloating, float);"
#3;node;;pp_pid.c;climb_pid_run;349;49;349;112;0;0;0;;1;" [B6.1] ? [B4.1] : [B5.1];" # LLVM inconvenience: virtual BB (there is no LHS, so this is not a BB)
4;node;;pp_pid.c;climb_pid_run;349;82;349;92;0;0;0;;1;" (600 * 16) (ImplicitCastExpr, IntegralToFloating, float);"
5;node;;pp_pid.c;climb_pid_run;349;95;349;112;0;0;0;;1;" fgaz * (600 * 16);"
6;node;;pp_pid.c;climb_pid_run;349;49;349;79;0;0;0;;4,5;" fgaz * (600 * 16) > (600 * 16);"
7;node;;pp_pid.c;climb_pid_run;349;20;349;41;0;0;0;;2,6;" fgaz * (600 * 16) < 0;"
8;node;;pp_pid.c;climb_pid_run;348;32;348;53;0;0;0;;7;" climb_sum_err = -100;"
9;node;;pp_pid.c;climb_pid_run;348;9;348;30;0;0;0;;8,7;" climb_sum_err < -100;"
10;node;;pp_pid.c;climb_pid_run;347;30;347;49;0;0;0;;9;" climb_sum_err = 100;"
11;node;;pp_pid.c;climb_pid_run;344;5;347;28;0;0;0;;10,9;" ([B14.1]) ? [B12.1] : [B13.1]; pitch_of_vz = [B11.1]; fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + 0.31 + 0.20000000000000001 * desired_climb; climb_sum_err += err; climb_sum_err > 100;"
12;node;;pp_pid.c;climb_pid_run;344;41;344;74;0;0;0;;11;" desired_climb * pitch_of_vz_pgain (ImplicitCastExpr, FloatingCast, double);"
13;node;;pp_pid.c;climb_pid_run;344;77;344;79;0;0;0;;11;" 0.;"
14;node;;pp_pid.c;climb_pid_run;344;20;344;37;0;0;0;;12,13;" desired_climb > 0;"
15;node;;pp_pid.c;climb_pid_run;342;7;342;34;0;0;0;;0;" climb_pitch_sum_err = -100;"
16;node;;pp_pid.c;climb_pid_run;341;9;341;36;0;0;0;;15,0;" climb_pitch_sum_err < -100;"
17;node;;pp_pid.c;climb_pid_run;340;7;340;32;0;0;0;;16;" climb_pitch_sum_err = 100;"
18;node;;pp_pid.c;climb_pid_run;338;5;339;34;0;0;0;;17,16;" climb_pitch_sum_err += err; climb_pitch_sum_err > 100;"
19;node;;pp_pid.c;climb_pid_run;337;7;337;32;0;0;0;;18;" desired_pitch = min_pitch;"
20;node;;pp_pid.c;climb_pid_run;336;9;336;34;0;0;0;;19,18;" desired_pitch < min_pitch;"
21;node;;pp_pid.c;climb_pid_run;335;7;335;32;0;0;0;;20;" desired_pitch = max_pitch;"
22;node;;pp_pid.c;climb_pid_run;332;5;334;34;0;0;0;;21,20;" desired_gaz = nav_desired_gaz; desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err); desired_pitch > max_pitch;"
23;node;;pp_pid.c;climb_pid_run;329;3;331;17;0;0;0;;22,14;" float err = estimator_z_dot - desired_climb;; float fgaz;; auto_pitch (ImplicitCastExpr, LValueToRValue, bool_t);"
24;entry;;pp_pid.c;climb_pid_run;328;30;328;30;0;0;0;;23;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_pid.c;copysign;149;1;149;1;0;0;0;;;""
1;node;;pp_pid.c;copysign;143;5;148;15;0;0;0;;0;" asm (\"bst\t%D2, 7\t\n\tbld\t%D0, 7\t\" : \"=r\" (__x) : \"0\" (__x), \"r\" (__y));; return __x;;"
2;entry;;pp_pid.c;copysign;142;2;142;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_pid.c;course_pid_run;317;1;317;1;0;0;0;;;""
1;node;;pp_pid.c;course_pid_run;316;5;316;33;0;0;0;;0;" nav_desired_roll = -max_roll;"
2;node;;pp_pid.c;course_pid_run;315;12;315;40;0;0;0;;1,0;" nav_desired_roll < -max_roll;"
3;node;;pp_pid.c;course_pid_run;314;5;314;32;0;0;0;;0;" nav_desired_roll = max_roll;"
4;node;;pp_pid.c;course_pid_run;312;3;313;34;0;0;0;;3,2;" nav_desired_roll = course_pgain * err; nav_desired_roll > max_roll;"
5;virtual node;;;course_pid_run;0;0;0;0;0;0;0;;7;""
6;node;;pp_pid.c;course_pid_run;311;115;311;148;0;0;0;;5;" err += 2 * 3.1415926535897931;"
7;node;;pp_pid.c;course_pid_run;311;84;311;113;0;0;0;;6,4;" err < -3.1415926535897931;"
8;virtual node;;;course_pid_run;0;0;0;0;0;0;0;;10;""
9;node;;pp_pid.c;course_pid_run;311;42;311;75;0;0;0;;8;" err -= 2 * 3.1415926535897931;"
10;node;;pp_pid.c;course_pid_run;311;12;311;40;0;0;0;;9,7;" err > 3.1415926535897931;"
11;node;;pp_pid.c;course_pid_run;310;3;310;53;0;0;0;;10;" float err = estimator_hspeed_dir - desired_course;;"
12;entry;;pp_pid.c;course_pid_run;309;30;309;30;0;0;0;;11;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_pid.c;isfinite;140;1;140;1;0;0;0;;;""
1;node;;pp_pid.c;isfinite;131;5;139;25;0;0;0;;0;" unsigned char __exp;; asm (\"mov\t%0, %C1\t\t\n\tlsl\t%0\t\t\n\tmov\t%0, %D1\t\t\n\trol\t%0\t\t\" : \"=r\" (__exp) : \"r\" (__x));; return __exp != 255;;"
2;entry;;pp_pid.c;isfinite;130;2;130;2;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_pid.c;itoa;51;1;51;1;0;0;0;;;""
1;node;;pp_pid.c;itoa;49;2;49;44;0;0;1;__itoa_ncheck;0;" __itoa_ncheck(__val, __s, __radix); return [B1.1];;"
2;node;;pp_pid.c;itoa;45;2;46;12;0;0;0;;0;" *__s = 0; return __s;;"
3;node;;pp_pid.c;itoa;44;31;44;43;0;0;0;;2,1;" __radix > 36;"
4;node;;pp_pid.c;itoa;44;16;44;27;0;0;0;;2,3;" __radix < 2;"
5;node;;pp_pid.c;itoa;43;2;43;37;0;0;1;__itoa;0;" __itoa(__val, __s, __radix); return [B5.1];;"
6;node;;pp_pid.c;itoa;41;9;41;40;0;0;1;__builtin_constant_p;5,4;" __builtin_constant_p(__radix); ![B6.1];"
7;entry;;pp_pid.c;itoa;40;2;40;2;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_pid.c;ltoa;65;1;65;1;0;0;0;;;""
1;node;;pp_pid.c;ltoa;63;2;63;44;0;0;1;__ltoa_ncheck;0;" __ltoa_ncheck(__val, __s, __radix); return [B1.1];;"
2;node;;pp_pid.c;ltoa;59;2;60;12;0;0;0;;0;" *__s = 0; return __s;;"
3;node;;pp_pid.c;ltoa;58;31;58;43;0;0;0;;2,1;" __radix > 36;"
4;node;;pp_pid.c;ltoa;58;16;58;27;0;0;0;;2,3;" __radix < 2;"
5;node;;pp_pid.c;ltoa;57;2;57;37;0;0;1;__ltoa;0;" __ltoa(__val, __s, __radix); return [B5.1];;"
6;node;;pp_pid.c;ltoa;55;9;55;40;0;0;1;__builtin_constant_p;5,4;" __builtin_constant_p(__radix); ![B6.1];"
7;entry;;pp_pid.c;ltoa;54;2;54;2;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_pid.c;roll_pitch_pid_run;305;1;305;1;0;0;0;;;""
1;node;;pp_pid.c;roll_pitch_pid_run;304;3;304;137;0;0;0;;0;" [B7.3] ? [B2.1] : ([B3.1]); desired_elevator = ([B1.1]);"
2;node;;pp_pid.c;roll_pitch_pid_run;304;57;304;68;0;0;0;;1;" -(600 * 16) (ImplicitCastExpr, IntegralToFloating, float);"
#3;node;;pp_pid.c;roll_pitch_pid_run;304;72;304;135;0;0;0;;1;" [B6.1] ? [B4.1] : [B5.1];" # LLVM inconvenience
4;node;;pp_pid.c;roll_pitch_pid_run;304;105;304;115;0;0;0;;1;" (600 * 16) (ImplicitCastExpr, IntegralToFloating, float);"
5;node;;pp_pid.c;roll_pitch_pid_run;304;118;304;135;0;0;0;;1;" pitch_pgain * err;"
6;node;;pp_pid.c;roll_pitch_pid_run;304;72;304;102;0;0;0;;4,5;" pitch_pgain * err > (600 * 16);"
7;node;;pp_pid.c;roll_pitch_pid_run;303;3;304;54;0;0;1;fabs;2,6;" fabs(estimator_phi); err = -(estimator_theta - desired_pitch - pitch_of_roll * [B7.1]); pitch_pgain * err < -(600 * 16);"
8;node;;pp_pid.c;roll_pitch_pid_run;302;5;302;23;0;0;0;;7;" pitch_of_roll = 0.;"
9;node;;pp_pid.c;roll_pitch_pid_run;300;3;301;24;0;0;0;;8,7;" [B15.2] ? [B10.1] : ([B11.1]); desired_aileron = ([B9.1]); pitch_of_roll < 0.;"
10;node;;pp_pid.c;roll_pitch_pid_run;300;55;300;66;0;0;0;;9;" -(600 * 16) (ImplicitCastExpr, IntegralToFloating, float);"
#11;node;;pp_pid.c;roll_pitch_pid_run;300;70;300;131;0;0;0;;9;" [B14.1] ? [B12.1] : [B13.1];" ## LLVM inconvenience
12;node;;pp_pid.c;roll_pitch_pid_run;300;102;300;112;0;0;0;;9;" (600 * 16) (ImplicitCastExpr, IntegralToFloating, float);"
13;node;;pp_pid.c;roll_pitch_pid_run;300;115;300;131;0;0;0;;9;" roll_pgain * err;"
14;node;;pp_pid.c;roll_pitch_pid_run;300;70;300;99;0;0;0;;12,13;" roll_pgain * err > (600 * 16);"
15;node;;pp_pid.c;roll_pitch_pid_run;299;3;300;52;0;0;0;;10,14;" float err = estimator_phi - desired_roll;; roll_pgain * err < -(600 * 16);"
16;entry;;pp_pid.c;roll_pitch_pid_run;298;34;298;34;0;0;0;;15;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_pid.c;ultoa;93;1;93;1;0;0;0;;;""
1;node;;pp_pid.c;ultoa;91;2;91;45;0;0;1;__ultoa_ncheck;0;" __ultoa_ncheck(__val, __s, __radix); return [B1.1];;"
2;node;;pp_pid.c;ultoa;87;2;88;12;0;0;0;;0;" *__s = 0; return __s;;"
3;node;;pp_pid.c;ultoa;86;31;86;43;0;0;0;;2,1;" __radix > 36;"
4;node;;pp_pid.c;ultoa;86;16;86;27;0;0;0;;2,3;" __radix < 2;"
5;node;;pp_pid.c;ultoa;85;2;85;38;0;0;1;__ultoa;0;" __ultoa(__val, __s, __radix); return [B5.1];;"
6;node;;pp_pid.c;ultoa;83;9;83;40;0;0;1;__builtin_constant_p;5,4;" __builtin_constant_p(__radix); ![B6.1];"
7;entry;;pp_pid.c;ultoa;82;2;82;2;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_pid.c;utoa;79;1;79;1;0;0;0;;;""
1;node;;pp_pid.c;utoa;77;2;77;44;0;0;1;__utoa_ncheck;0;" __utoa_ncheck(__val, __s, __radix); return [B1.1];;"
2;node;;pp_pid.c;utoa;73;2;74;12;0;0;0;;0;" *__s = 0; return __s;;"
3;node;;pp_pid.c;utoa;72;31;72;43;0;0;0;;2,1;" __radix > 36;"
4;node;;pp_pid.c;utoa;72;16;72;27;0;0;0;;2,3;" __radix < 2;"
5;node;;pp_pid.c;utoa;71;2;71;37;0;0;1;__utoa;0;" __utoa(__val, __s, __radix); return [B5.1];;"
6;node;;pp_pid.c;utoa;69;9;69;40;0;0;1;__builtin_constant_p;5,4;" __builtin_constant_p(__radix); ![B6.1];"
7;entry;;pp_pid.c;utoa;68;2;68;2;0;0;0;;6;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_spi.c;__vector_17;143;1;143;1;0;0;0;;;""
1;node;;pp_spi.c;__vector_17;142;5;142;21;0;0;0;;0;" fatal_error_nb++;"
2;node;;pp_spi.c;__vector_17;140;5;140;25;0;0;1;link_fbw_on_spi_it;0;" link_fbw_on_spi_it();"
3;node;;pp_spi.c;__vector_17;139;7;139;25;0;0;0;;2,1;" spi_cur_slave == 1;"
4;entry;;pp_spi.c;__vector_17;138;2;138;2;0;0;0;;3;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_spi.c;spi_init;136;1;136;1;0;0;0;;;""
1;node;;pp_spi.c;spi_init;130;3;135;20;0;0;0;;0;" (*(volatile uint8_t *)((23) + 32)) |= (1 << (2)) | (1 << (1)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((23) + 32)))))) |= (1 << (0)); spi_cur_slave = 0; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((24) + 32)))))) |= (1 << (0)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((2) + 32)))))) |= (1 << (7)); spi_cur_slave = 0; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((3) + 32)))))) |= (1 << (7)); spi_cur_slave = 0;"
2;entry;;pp_spi.c;spi_init;129;23;129;23;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_uart.c;__vector_20;141;1;141;1;0;0;0;;;""
1;node;;pp_uart.c;__vector_20;138;5;139;15;0;0;0;;0;" (*(volatile uint8_t *)((12) + 32)) = tx_buf0[tx_tail0]; tx_tail0++;"
2;node;;pp_uart.c;__vector_20;136;6;136;100;0;0;0;;0;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((10) + 32)))))) &= ~(1 << (6));"
3;node;;pp_uart.c;__vector_20;135;7;135;27;0;0;0;;2,1;" tx_head0 == tx_tail0;"
4;entry;;pp_uart.c;__vector_20;134;2;134;2;0;0;0;;3;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_uart.c;__vector_32;150;1;150;1;0;0;0;;;""
1;node;;pp_uart.c;__vector_32;147;5;148;15;0;0;0;;0;" (*(volatile uint8_t *)(156)) = tx_buf1[tx_tail1]; tx_tail1++;"
2;node;;pp_uart.c;__vector_32;145;6;145;91;0;0;0;;0;" (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)(154)))))) &= ~(1 << (6));"
3;node;;pp_uart.c;__vector_32;144;7;144;27;0;0;0;;2,1;" tx_head1 == tx_tail1;"
4;entry;;pp_uart.c;__vector_32;143;2;143;2;0;0;0;;3;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_uart.c;uart0_init;158;1;158;1;0;0;0;;;""
1;node;;pp_uart.c;uart0_init;152;3;157;97;0;0;0;;0;" (*(volatile uint8_t *)(144)) = 0; (*(volatile uint8_t *)((9) + 32)) = 25; (*(volatile uint8_t *)((11) + 32)) = 0; (*(volatile uint8_t *)((10) + 32)) = (1 << (4)) | (1 << (3)); (*(volatile uint8_t *)(149)) = (1 << (2)) | (1 << (1)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((10) + 32)))))) |= (1 << (7));"
2;entry;;pp_uart.c;uart0_init;151;26;151;26;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_uart.c;uart0_print_hex;132;1;132;1;0;0;0;;;""
1;node;;pp_uart.c;uart0_print_hex;126;3;131;27;0;0;1;uart0_transmit,uart0_transmit;0;" const uint8_t hex[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};; uint8_t high = (c & 240) >> 4;; uint8_t low = c & 15;; uart0_transmit(hex[high]); uart0_transmit(hex[low]);"
2;entry;;pp_uart.c;uart0_print_hex;125;40;125;40;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_uart.c;uart0_print_string;124;1;124;1;0;0;0;;;""
1;virtual node;;;uart0_print_string;0;0;0;0;0;0;0;;3;""
2;node;;pp_uart.c;uart0_print_string;121;5;122;8;0;0;1;uart0_transmit;1;" uart0_transmit(s[i]); i++;"
3;node;;pp_uart.c;uart0_print_string;120;10;120;14;0;0;0;;2,0;" s[i] (ImplicitCastExpr, LValueToRValue, uint8_t);"
4;node;;pp_uart.c;uart0_print_string;119;3;119;17;0;0;0;;3;" uint8_t i = 0;;"
5;entry;;pp_uart.c;uart0_print_string;118;44;118;44;0;0;0;;4;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_uart.c;uart0_transmit;105;1;105;1;0;0;0;;;""
1;node;;pp_uart.c;uart0_transmit;102;5;103;99;0;0;0;;0;" (*(volatile uint8_t *)((12) + 32)) = data; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)((10) + 32)))))) |= (1 << (6));"
2;node;;pp_uart.c;uart0_transmit;99;5;100;15;0;0;0;;0;" tx_buf0[tx_head0] = data; tx_head0++;"
3;node;;pp_uart.c;uart0_transmit;97;7;97;13;0;0;0;;0;" return;;"
4;node;;pp_uart.c;uart0_transmit;96;9;96;33;0;0;0;;3,2;" tx_tail0 == tx_head0 + 1;"
5;node;;pp_uart.c;uart0_transmit;95;7;95;58;0;0;0;;4,1;" (*(volatile uint8_t *)((10) + 32)) & (1 << (6));"
6;entry;;pp_uart.c;uart0_transmit;94;44;94;44;0;0;0;;5;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_uart.c;uart1_init;166;1;166;1;0;0;0;;;""
1;node;;pp_uart.c;uart1_init;160;3;165;88;0;0;0;;0;" (*(volatile uint8_t *)(152)) = 0; (*(volatile uint8_t *)(153)) = 25; (*(volatile uint8_t *)(155)) = 0; (*(volatile uint8_t *)(154)) = (1 << (4)) | (1 << (3)); (*(volatile uint8_t *)(157)) = (1 << (2)) | (1 << (1)); (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)(154)))))) |= (1 << (7));"
2;entry;;pp_uart.c;uart1_init;159;26;159;26;0;0;0;;1;""

#BB.index;BB.type;BB.label;File;Subprogram;Line.Begin;Col.Begin;Line.End;Col.End;Exec.Count;Exec.Time.Per;function.call.type;function.call.callees;Successors;Code
0;exit;;pp_uart.c;uart1_transmit;117;1;117;1;0;0;0;;;""
1;node;;pp_uart.c;uart1_transmit;114;5;115;90;0;0;0;;0;" (*(volatile uint8_t *)(156)) = data; (*(volatile uint8_t *)(((uint16_t)&((*(volatile uint8_t *)(154)))))) |= (1 << (6));"
2;node;;pp_uart.c;uart1_transmit;111;5;112;15;0;0;0;;0;" tx_buf1[tx_head1] = data; tx_head1++;"
3;node;;pp_uart.c;uart1_transmit;109;7;109;13;0;0;0;;0;" return;;"
4;node;;pp_uart.c;uart1_transmit;108;9;108;33;0;0;0;;3,2;" tx_tail1 == tx_head1 + 1;"
5;node;;pp_uart.c;uart1_transmit;107;7;107;49;0;0;0;;4,1;" (*(volatile uint8_t *)(154)) & (1 << (6));"
6;entry;;pp_uart.c;uart1_transmit;106;44;106;44;0;0;0;;5;""

