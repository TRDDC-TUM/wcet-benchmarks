# Hey Emacs, this is a -*- makefile -*-
########################## Makefile Options ##############################

# Target file name (without extension).
TARGET = main


# Define programs and commands.
#CMD_PREFIX = ./color.sh
SHELL = sh
CC = avr-gcc
OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size
NM = avr-nm
AVRDUDE = avrdude
REMOVE = rm -f
COPY = cp
WCET_FUN=decode
WCET_TOOL=boundt_avr
WCET_TOOL_OPTS=-device=ATmega128 -form=elf -elf_sym -v -sourceinfo $(SOURCEINFOFILE) -anatime -no_stack -assert loopinfo.txt
SOURCEINFOFILE=sourceinfo.csv

############# PLEASE DO NOT CHANGE ANYTHING BELOW THIS LINE ##############


# MCU name
MCU = atmega128

# Main Oscillator Frequency
# This is only used to define F_OSC in all assembler and c-sources.
F_OSC = 16000000

# Output format. (can be srec, ihex, binary)
FORMAT = ihex

SRC_DIR   	= ./src/
INCLUDE_GLOBAL = /usr/lib/avr/include/

# search for c files here
FCODE_FOLDER = .
SRC_ALL=adpcm.c

# Debugging format.
# Native formats for AVR-GCC's -g are stabs [default], or dwarf-2.
# AVR (extended) COFF requires stabs, plus an avr-objcopy run.
#DEBUG = stabs
DEBUG = dwarf-2

# List any extra directories to look for include files here.
#     Each directory must be seperated by a space.
EXTRAINCDIRS = $(INCLUDE_GLOBAL) $(INCLUDE_LOCAL) $(SRC_DIR)
CSTANDARD = -std=gnu99

# Compiler flags.
#  -g*:          generate debugging information
#  -O*:          optimization level
#  -f...:        tuning, see GCC manual and avr-libc documentation
#  -Wall...:     warning level
#  -Wa,...:      tell GCC to pass this to the assembler.
#    -adhlns...: create assembler listing
CFLAGS = -g$(DEBUG)
CFLAGS += $(CDEFS) $(CINCS)
CFLAGS += -O0 -g
CFLAGS += -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
CFLAGS += -Wall #-Wstrict-prototypes
CFLAGS += -Wa,-adhlns=$(<:.c=.lst)
CFLAGS += $(patsubst %,-I%,$(EXTRAINCDIRS))
CFLAGS += $(CSTANDARD)
CFLAGS += -DF_OSC=$(F_OSC) -D__AVR__

# Assembler flags.
#  -Wa,...:   tell GCC to pass this to the assembler.
#  -ahlms:    create listing
#  -gstabs:   have the assembler create line number information; note that
#             for use in COFF files, additional information about filenames
#             and function names needs to be present in the assembler source
#             files -- see avr-libc docs [FIXME: not yet described there]
ASFLAGS = -Wa,-adhlns=$(<:.S=.lst),-gstabs 
ASFLAGS += -DF_OSC=$(F_OSC)

# Minimalistic printf version
PRINTF_LIB_MIN = -Wl,-u,vfprintf -lprintf_min

# Floating point printf version (requires MATH_LIB = -lm below)
PRINTF_LIB_FLOAT = -Wl,-u,vfprintf -lprintf_flt
# Minimalistic scanf version
SCANF_LIB_MIN = -Wl,-u,vfscanf -lscanf_min

# Floating point + %[ scanf version (requires MATH_LIB = -lm below)
SCANF_LIB_FLOAT = -Wl,-u,vfscanf -lscanf_flt
MATH_LIB = -lm

# Linker flags.
#  -Wl,...:     tell GCC to pass this to linker.
#    -Map:      create map file
#    --cref:    add cross reference to  map file
LDFLAGS = -Wl,-Map=$(TARGET).map,--cref
LDFLAGS += $(EXTMEMOPTS)
#LDFLAGS += $(PRINTF_LIB) $(SCANF_LIB) $(MATH_LIB)
LDFLAGS += -gc-sections -lm


# Define all object files.
OBJ_ALL = $(SRC_ALL:.c=.o) $(ASRC:.S=.o)


# Compiler flags to generate dependency files.
### GENDEPFLAGS = -Wp,-M,-MP,-MT,$(*F).o,-MF,.dep/$(@F).d
#GENDEPFLAGS = -MD -MP -MF .dep/$(@F).d

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS = -mmcu=$(MCU) -I. $(CFLAGS) $(GENDEPFLAGS)
ALL_ASFLAGS = -mmcu=$(MCU) -I. -x assembler-with-cpp $(ASFLAGS)





# Default target.
all: build sizeafter 

build: elf hex

elf: $(TARGET).elf	
hex: $(TARGET).hex

# Eye candy.
# AVR Studio 3.x does not check make's exit code but relies on
# the following magic strings to be generated by the compile job.

# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) $(TARGET).hex
ELFSIZE = $(SIZE) --mcu=$(MCU) -A $(TARGET).elf --format=avr
sizeafter:
	@if [ -f $(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); echo; fi

# Create final output files (.hex, .eep) from ELF output file.
%.hex: %.elf
	@$(CMD_PREFIX) echo
	@$(CMD_PREFIX) echo $(MSG_FLASH) $@
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@


# Link: create ELF output file from object files.
.SECONDARY : /$(TARGET).elf
.PRECIOUS : $(OBJ_ALL)
%.elf: $(OBJ_ALL)
	@echo "generic elf-compile"
	@echo
	@echo $(MSG_LINKING) $@
	$(CC) $(ALL_CFLAGS) $(OBJ_ALL) --output $@ $(LDFLAGS)
	avr-objdump -Dl $@ > main.asm


# Compile: create object files from C source files.
%.o : %.c
	@$(CMD_PREFIX) echo
	@$(CMD_PREFIX) echo $(MSG_COMPILING) $<
	$(CMD_PREFIX) $(CC) -c $(ALL_CFLAGS) $< -o $@ 


wcet: $(TARGET).elf
	@echo "WCET analysis..."
#	$(TIME) $(WCET_TOOL) $(WCET_TOOL_OPTS) $(TARGET).elf `./get_fcn_addr.sh $(TARGET).elf $(WCET_FUN)`
	rm -f lp_out_* lp_in_*
	$(TIME) $(WCET_TOOL) $(WCET_TOOL_OPTS) $(TARGET).elf $(WCET_FUN) > wcet.log 2> stderr.log
	./../../scripts/complete_sourceinfo.py -i $(SOURCEINFOFILE)
#	./../../scripts/opcodes/get_opcode_timings.py -c -s ../../scripts/opcodes/avr-spec.csv -i $(SOURCEINFOFILE) -e $(TARGET).elf > timing_opcode.csv

# Target: clean project.
clean: 
	rm -f $(OBJ_ALL) $(TARGET).elf $(TARGET).hex *.lst

TIME=timeout -s INT 60m /usr/bin/time -v

WCET_TOOL_OPTS+=-loop joint

