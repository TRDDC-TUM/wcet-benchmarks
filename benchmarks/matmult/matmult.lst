   1               		.file	"matmult.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.comm	Seed,2,1
  12               		.comm	ArrayA,800,1
  13               		.comm	ArrayB,800,1
  14               		.comm	ResultArray,800,1
  15               	.global	main
  17               	main:
  18               	.LFB0:
  19               		.file 1 "matmult.c"
   1:matmult.c     **** /* $Id: matmult.c,v 1.2 2005/04/04 11:34:58 csg Exp $ */
   2:matmult.c     **** 
   3:matmult.c     **** /* matmult.c */
   4:matmult.c     **** /* was mm.c! */
   5:matmult.c     **** 
   6:matmult.c     **** 
   7:matmult.c     **** /*----------------------------------------------------------------------*
   8:matmult.c     ****  * To make this program compile under our assumed embedded environment,
   9:matmult.c     ****  * we had to make several changes:
  10:matmult.c     ****  * - Declare all functions in ANSI style, not K&R.
  11:matmult.c     ****  *   this includes adding return types in all cases!
  12:matmult.c     ****  * - Declare function prototypes
  13:matmult.c     ****  * - Disable all output
  14:matmult.c     ****  * - Disable all UNIX-style includes
  15:matmult.c     ****  *
  16:matmult.c     ****  * This is a program that was developed from mm.c to matmult.c by
  17:matmult.c     ****  * Thomas Lundqvist at Chalmers.
  18:matmult.c     ****  *----------------------------------------------------------------------*/
  19:matmult.c     **** #define UPPSALAWCET 1
  20:matmult.c     **** 
  21:matmult.c     **** 
  22:matmult.c     **** /* ***UPPSALA WCET***:
  23:matmult.c     ****    disable stupid UNIX includes */
  24:matmult.c     **** #ifndef UPPSALAWCET
  25:matmult.c     **** #include <sys/types.h>
  26:matmult.c     **** #include <sys/times.h>
  27:matmult.c     **** #endif
  28:matmult.c     **** 
  29:matmult.c     **** /*
  30:matmult.c     ****  * MATRIX MULTIPLICATION BENCHMARK PROGRAM:
  31:matmult.c     ****  * This program multiplies 2 square matrices resulting in a 3rd
  32:matmult.c     ****  * matrix. It tests a compiler's speed in handling multidimensional
  33:matmult.c     ****  * arrays and simple arithmetic.
  34:matmult.c     ****  */
  35:matmult.c     **** 
  36:matmult.c     **** #define UPPERLIMIT 20
  37:matmult.c     **** 
  38:matmult.c     **** typedef int matrix [UPPERLIMIT][UPPERLIMIT];
  39:matmult.c     **** 
  40:matmult.c     **** int Seed;
  41:matmult.c     **** matrix ArrayA, ArrayB, ResultArray;
  42:matmult.c     **** 
  43:matmult.c     **** #ifdef UPPSALAWCET
  44:matmult.c     **** /* Our picky compiler wants prototypes! */
  45:matmult.c     **** void Multiply(matrix A, matrix B, matrix Res);
  46:matmult.c     **** void InitSeed(void);
  47:matmult.c     **** void Test(matrix A, matrix B, matrix Res);
  48:matmult.c     **** void Initialize(matrix Array);
  49:matmult.c     **** int RandomInteger(void);
  50:matmult.c     **** #endif
  51:matmult.c     **** void main();
  52:matmult.c     **** void main()
  53:matmult.c     **** {
  20               		.loc 1 53 0
  21               		.cfi_startproc
  22 0000 CF93      		push r28
  23               	.LCFI0:
  24               		.cfi_def_cfa_offset 3
  25               		.cfi_offset 28, -2
  26 0002 DF93      		push r29
  27               	.LCFI1:
  28               		.cfi_def_cfa_offset 4
  29               		.cfi_offset 29, -3
  30 0004 CDB7      		in r28,__SP_L__
  31 0006 DEB7      		in r29,__SP_H__
  32               	.LCFI2:
  33               		.cfi_def_cfa_register 28
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 2 */
  37               	.L__stack_usage = 2
  54:matmult.c     ****    InitSeed();
  38               		.loc 1 54 0
  39 0008 0E94 0000 		call InitSeed
  55:matmult.c     **** /* ***UPPSALA WCET***:
  56:matmult.c     ****    no printing please! */
  57:matmult.c     **** #ifndef UPPSALAWCET
  58:matmult.c     ****    printf("\n   *** MATRIX MULTIPLICATION BENCHMARK TEST ***\n\n");
  59:matmult.c     ****    printf("RESULTS OF THE TEST:\n");
  60:matmult.c     **** #endif
  61:matmult.c     ****    Test(ArrayA, ArrayB, ResultArray);
  40               		.loc 1 61 0
  41 000c 40E0      		ldi r20,lo8(ResultArray)
  42 000e 50E0      		ldi r21,hi8(ResultArray)
  43 0010 60E0      		ldi r22,lo8(ArrayB)
  44 0012 70E0      		ldi r23,hi8(ArrayB)
  45 0014 80E0      		ldi r24,lo8(ArrayA)
  46 0016 90E0      		ldi r25,hi8(ArrayA)
  47 0018 0E94 0000 		call Test
  48               	/* epilogue start */
  62:matmult.c     **** }
  49               		.loc 1 62 0
  50 001c DF91      		pop r29
  51 001e CF91      		pop r28
  52 0020 0895      		ret
  53               		.cfi_endproc
  54               	.LFE0:
  56               	.global	InitSeed
  58               	InitSeed:
  59               	.LFB1:
  63:matmult.c     **** 
  64:matmult.c     **** 
  65:matmult.c     **** void InitSeed(void)
  66:matmult.c     **** /*
  67:matmult.c     ****  * Initializes the seed used in the random number generator.
  68:matmult.c     ****  */
  69:matmult.c     **** {
  60               		.loc 1 69 0
  61               		.cfi_startproc
  62 0022 CF93      		push r28
  63               	.LCFI3:
  64               		.cfi_def_cfa_offset 3
  65               		.cfi_offset 28, -2
  66 0024 DF93      		push r29
  67               	.LCFI4:
  68               		.cfi_def_cfa_offset 4
  69               		.cfi_offset 29, -3
  70 0026 CDB7      		in r28,__SP_L__
  71 0028 DEB7      		in r29,__SP_H__
  72               	.LCFI5:
  73               		.cfi_def_cfa_register 28
  74               	/* prologue: function */
  75               	/* frame size = 0 */
  76               	/* stack size = 2 */
  77               	.L__stack_usage = 2
  70:matmult.c     ****   /* ***UPPSALA WCET***:
  71:matmult.c     ****      changed Thomas Ls code to something simpler.
  72:matmult.c     ****    Seed = KNOWN_VALUE - 1; */
  73:matmult.c     ****   Seed = 0;
  78               		.loc 1 73 0
  79 002a 1092 0000 		sts Seed+1,__zero_reg__
  80 002e 1092 0000 		sts Seed,__zero_reg__
  81               	/* epilogue start */
  74:matmult.c     **** }
  82               		.loc 1 74 0
  83 0032 DF91      		pop r29
  84 0034 CF91      		pop r28
  85 0036 0895      		ret
  86               		.cfi_endproc
  87               	.LFE1:
  89               	.global	Test
  91               	Test:
  92               	.LFB2:
  75:matmult.c     **** 
  76:matmult.c     **** 
  77:matmult.c     **** void Test(matrix A, matrix B, matrix Res)
  78:matmult.c     **** /*
  79:matmult.c     ****  * Runs a multiplication test on an array.  Calculates and prints the
  80:matmult.c     ****  * time it takes to multiply the matrices.
  81:matmult.c     ****  */
  82:matmult.c     **** {
  93               		.loc 1 82 0
  94               		.cfi_startproc
  95 0038 CF93      		push r28
  96               	.LCFI6:
  97               		.cfi_def_cfa_offset 3
  98               		.cfi_offset 28, -2
  99 003a DF93      		push r29
 100               	.LCFI7:
 101               		.cfi_def_cfa_offset 4
 102               		.cfi_offset 29, -3
 103 003c 00D0      		rcall .
 104 003e 00D0      		rcall .
 105 0040 00D0      		rcall .
 106               	.LCFI8:
 107               		.cfi_def_cfa_offset 10
 108 0042 CDB7      		in r28,__SP_L__
 109 0044 DEB7      		in r29,__SP_H__
 110               	.LCFI9:
 111               		.cfi_def_cfa_register 28
 112               	/* prologue: function */
 113               	/* frame size = 6 */
 114               	/* stack size = 8 */
 115               	.L__stack_usage = 8
 116 0046 9A83      		std Y+2,r25
 117 0048 8983      		std Y+1,r24
 118 004a 7C83      		std Y+4,r23
 119 004c 6B83      		std Y+3,r22
 120 004e 5E83      		std Y+6,r21
 121 0050 4D83      		std Y+5,r20
  83:matmult.c     **** #ifndef UPPSALAWCET
  84:matmult.c     ****    long StartTime, StopTime;
  85:matmult.c     ****    float TotalTime;
  86:matmult.c     **** #endif
  87:matmult.c     **** 
  88:matmult.c     ****    Initialize(A);
 122               		.loc 1 88 0
 123 0052 8981      		ldd r24,Y+1
 124 0054 9A81      		ldd r25,Y+2
 125 0056 0E94 0000 		call Initialize
  89:matmult.c     ****    Initialize(B);
 126               		.loc 1 89 0
 127 005a 8B81      		ldd r24,Y+3
 128 005c 9C81      		ldd r25,Y+4
 129 005e 0E94 0000 		call Initialize
  90:matmult.c     **** 
  91:matmult.c     ****    /* ***UPPSALA WCET***: don't print or time */
  92:matmult.c     **** #ifndef UPPSALAWCET
  93:matmult.c     ****    StartTime = ttime ();
  94:matmult.c     **** #endif
  95:matmult.c     **** 
  96:matmult.c     ****    Multiply(A, B, Res);
 130               		.loc 1 96 0
 131 0062 4D81      		ldd r20,Y+5
 132 0064 5E81      		ldd r21,Y+6
 133 0066 2B81      		ldd r18,Y+3
 134 0068 3C81      		ldd r19,Y+4
 135 006a 8981      		ldd r24,Y+1
 136 006c 9A81      		ldd r25,Y+2
 137 006e B901      		movw r22,r18
 138 0070 0E94 0000 		call Multiply
 139               	/* epilogue start */
  97:matmult.c     **** 
  98:matmult.c     ****    /* ***UPPSALA WCET***: don't print or time */
  99:matmult.c     **** #ifndef UPPSALAWCET
 100:matmult.c     ****    StopTime = ttime();
 101:matmult.c     ****    TotalTime = (StopTime - StartTime) / 1000.0;
 102:matmult.c     ****    printf("    - Size of array is %d\n", UPPERLIMIT);
 103:matmult.c     ****    printf("    - Total multiplication time is %3.3f seconds\n\n", TotalTime);
 104:matmult.c     **** #endif
 105:matmult.c     **** }
 140               		.loc 1 105 0
 141 0074 2696      		adiw r28,6
 142 0076 0FB6      		in __tmp_reg__,__SREG__
 143 0078 F894      		cli
 144 007a DEBF      		out __SP_H__,r29
 145 007c 0FBE      		out __SREG__,__tmp_reg__
 146 007e CDBF      		out __SP_L__,r28
 147 0080 DF91      		pop r29
 148 0082 CF91      		pop r28
 149 0084 0895      		ret
 150               		.cfi_endproc
 151               	.LFE2:
 153               	.global	Initialize
 155               	Initialize:
 156               	.LFB3:
 106:matmult.c     **** 
 107:matmult.c     **** 
 108:matmult.c     **** void Initialize(matrix Array)
 109:matmult.c     **** /*
 110:matmult.c     ****  * Intializes the given array with random integers.
 111:matmult.c     ****  */
 112:matmult.c     **** {
 157               		.loc 1 112 0
 158               		.cfi_startproc
 159 0086 0F93      		push r16
 160               	.LCFI10:
 161               		.cfi_def_cfa_offset 3
 162               		.cfi_offset 16, -2
 163 0088 1F93      		push r17
 164               	.LCFI11:
 165               		.cfi_def_cfa_offset 4
 166               		.cfi_offset 17, -3
 167 008a CF93      		push r28
 168               	.LCFI12:
 169               		.cfi_def_cfa_offset 5
 170               		.cfi_offset 28, -4
 171 008c DF93      		push r29
 172               	.LCFI13:
 173               		.cfi_def_cfa_offset 6
 174               		.cfi_offset 29, -5
 175 008e 00D0      		rcall .
 176 0090 00D0      		rcall .
 177 0092 00D0      		rcall .
 178               	.LCFI14:
 179               		.cfi_def_cfa_offset 12
 180 0094 CDB7      		in r28,__SP_L__
 181 0096 DEB7      		in r29,__SP_H__
 182               	.LCFI15:
 183               		.cfi_def_cfa_register 28
 184               	/* prologue: function */
 185               	/* frame size = 6 */
 186               	/* stack size = 10 */
 187               	.L__stack_usage = 10
 188 0098 9E83      		std Y+6,r25
 189 009a 8D83      		std Y+5,r24
 113:matmult.c     ****    int OuterIndex, InnerIndex;
 114:matmult.c     **** 
 115:matmult.c     ****    for (OuterIndex = 0; OuterIndex < UPPERLIMIT; OuterIndex++)
 190               		.loc 1 115 0
 191 009c 1A82      		std Y+2,__zero_reg__
 192 009e 1982      		std Y+1,__zero_reg__
 193 00a0 00C0      		rjmp .L5
 194               	.L8:
 116:matmult.c     ****       for (InnerIndex = 0; InnerIndex < UPPERLIMIT; InnerIndex++)
 195               		.loc 1 116 0
 196 00a2 1C82      		std Y+4,__zero_reg__
 197 00a4 1B82      		std Y+3,__zero_reg__
 198 00a6 00C0      		rjmp .L6
 199               	.L7:
 117:matmult.c     ****          Array[OuterIndex][InnerIndex] = RandomInteger();
 200               		.loc 1 117 0 discriminator 2
 201 00a8 2981      		ldd r18,Y+1
 202 00aa 3A81      		ldd r19,Y+2
 203 00ac 48E2      		ldi r20,lo8(40)
 204 00ae 429F      		mul r20,r18
 205 00b0 C001      		movw r24,r0
 206 00b2 439F      		mul r20,r19
 207 00b4 900D      		add r25,r0
 208 00b6 1124      		clr __zero_reg__
 209 00b8 2D81      		ldd r18,Y+5
 210 00ba 3E81      		ldd r19,Y+6
 211 00bc 8901      		movw r16,r18
 212 00be 080F      		add r16,r24
 213 00c0 191F      		adc r17,r25
 214 00c2 0E94 0000 		call RandomInteger
 215 00c6 9C01      		movw r18,r24
 216 00c8 8B81      		ldd r24,Y+3
 217 00ca 9C81      		ldd r25,Y+4
 218 00cc 880F      		lsl r24
 219 00ce 991F      		rol r25
 220 00d0 800F      		add r24,r16
 221 00d2 911F      		adc r25,r17
 222 00d4 FC01      		movw r30,r24
 223 00d6 3183      		std Z+1,r19
 224 00d8 2083      		st Z,r18
 116:matmult.c     ****       for (InnerIndex = 0; InnerIndex < UPPERLIMIT; InnerIndex++)
 225               		.loc 1 116 0 discriminator 2
 226 00da 8B81      		ldd r24,Y+3
 227 00dc 9C81      		ldd r25,Y+4
 228 00de 0196      		adiw r24,1
 229 00e0 9C83      		std Y+4,r25
 230 00e2 8B83      		std Y+3,r24
 231               	.L6:
 116:matmult.c     ****       for (InnerIndex = 0; InnerIndex < UPPERLIMIT; InnerIndex++)
 232               		.loc 1 116 0 is_stmt 0 discriminator 1
 233 00e4 8B81      		ldd r24,Y+3
 234 00e6 9C81      		ldd r25,Y+4
 235 00e8 8431      		cpi r24,20
 236 00ea 9105      		cpc r25,__zero_reg__
 237 00ec 04F0      		brlt .L7
 115:matmult.c     ****       for (InnerIndex = 0; InnerIndex < UPPERLIMIT; InnerIndex++)
 238               		.loc 1 115 0 is_stmt 1
 239 00ee 8981      		ldd r24,Y+1
 240 00f0 9A81      		ldd r25,Y+2
 241 00f2 0196      		adiw r24,1
 242 00f4 9A83      		std Y+2,r25
 243 00f6 8983      		std Y+1,r24
 244               	.L5:
 115:matmult.c     ****       for (InnerIndex = 0; InnerIndex < UPPERLIMIT; InnerIndex++)
 245               		.loc 1 115 0 is_stmt 0 discriminator 1
 246 00f8 8981      		ldd r24,Y+1
 247 00fa 9A81      		ldd r25,Y+2
 248 00fc 8431      		cpi r24,20
 249 00fe 9105      		cpc r25,__zero_reg__
 250 0100 04F0      		brlt .L8
 251               	/* epilogue start */
 118:matmult.c     **** }
 252               		.loc 1 118 0 is_stmt 1
 253 0102 2696      		adiw r28,6
 254 0104 0FB6      		in __tmp_reg__,__SREG__
 255 0106 F894      		cli
 256 0108 DEBF      		out __SP_H__,r29
 257 010a 0FBE      		out __SREG__,__tmp_reg__
 258 010c CDBF      		out __SP_L__,r28
 259 010e DF91      		pop r29
 260 0110 CF91      		pop r28
 261 0112 1F91      		pop r17
 262 0114 0F91      		pop r16
 263 0116 0895      		ret
 264               		.cfi_endproc
 265               	.LFE3:
 267               	.global	RandomInteger
 269               	RandomInteger:
 270               	.LFB4:
 119:matmult.c     **** 
 120:matmult.c     **** 
 121:matmult.c     **** int RandomInteger(void)
 122:matmult.c     **** /*
 123:matmult.c     ****  * Generates random integers between 0 and 8095
 124:matmult.c     ****  */
 125:matmult.c     **** {
 271               		.loc 1 125 0
 272               		.cfi_startproc
 273 0118 CF93      		push r28
 274               	.LCFI16:
 275               		.cfi_def_cfa_offset 3
 276               		.cfi_offset 28, -2
 277 011a DF93      		push r29
 278               	.LCFI17:
 279               		.cfi_def_cfa_offset 4
 280               		.cfi_offset 29, -3
 281 011c 00D0      		rcall .
 282               	.LCFI18:
 283               		.cfi_def_cfa_offset 6
 284 011e CDB7      		in r28,__SP_L__
 285 0120 DEB7      		in r29,__SP_H__
 286               	.LCFI19:
 287               		.cfi_def_cfa_register 28
 288               	/* prologue: function */
 289               	/* frame size = 2 */
 290               	/* stack size = 4 */
 291               	.L__stack_usage = 4
 126:matmult.c     ****    Seed = ((Seed * 133) + 81) % 8095;
 292               		.loc 1 126 0
 293 0122 2091 0000 		lds r18,Seed
 294 0126 3091 0000 		lds r19,Seed+1
 295 012a 45E8      		ldi r20,lo8(-123)
 296 012c 429F      		mul r20,r18
 297 012e C001      		movw r24,r0
 298 0130 439F      		mul r20,r19
 299 0132 900D      		add r25,r0
 300 0134 1124      		clr __zero_reg__
 301 0136 8F5A      		subi r24,-81
 302 0138 9F4F      		sbci r25,-1
 303 013a 2FE9      		ldi r18,lo8(-97)
 304 013c 3FE1      		ldi r19,lo8(31)
 305 013e B901      		movw r22,r18
 306 0140 0E94 0000 		call __divmodhi4
 307 0144 9093 0000 		sts Seed+1,r25
 308 0148 8093 0000 		sts Seed,r24
 127:matmult.c     ****    return (Seed);
 309               		.loc 1 127 0
 310 014c 8091 0000 		lds r24,Seed
 311 0150 9091 0000 		lds r25,Seed+1
 312               	/* epilogue start */
 128:matmult.c     **** }
 313               		.loc 1 128 0
 314 0154 0F90      		pop __tmp_reg__
 315 0156 0F90      		pop __tmp_reg__
 316 0158 DF91      		pop r29
 317 015a CF91      		pop r28
 318 015c 0895      		ret
 319               		.cfi_endproc
 320               	.LFE4:
 322               	.global	Multiply
 324               	Multiply:
 325               	.LFB5:
 129:matmult.c     **** 
 130:matmult.c     **** 
 131:matmult.c     **** #ifndef UPPSALAWCET
 132:matmult.c     **** int ttime()
 133:matmult.c     **** /*
 134:matmult.c     ****  * This function returns in milliseconds the amount of compiler time
 135:matmult.c     ****  * used prior to it being called.
 136:matmult.c     ****  */
 137:matmult.c     **** {
 138:matmult.c     ****    struct tms buffer;
 139:matmult.c     ****    int utime;
 140:matmult.c     **** 
 141:matmult.c     ****    /*   times(&buffer);   times not implemented */
 142:matmult.c     ****    utime = (buffer.tms_utime / 60.0) * 1000.0;
 143:matmult.c     ****    return (utime);
 144:matmult.c     **** }
 145:matmult.c     **** #endif
 146:matmult.c     **** 
 147:matmult.c     **** void Multiply(matrix A, matrix B, matrix Res)
 148:matmult.c     **** /*
 149:matmult.c     ****  * Multiplies arrays A and B and stores the result in ResultArray.
 150:matmult.c     ****  */
 151:matmult.c     **** {
 326               		.loc 1 151 0
 327               		.cfi_startproc
 328 015e CF92      		push r12
 329               	.LCFI20:
 330               		.cfi_def_cfa_offset 3
 331               		.cfi_offset 12, -2
 332 0160 DF92      		push r13
 333               	.LCFI21:
 334               		.cfi_def_cfa_offset 4
 335               		.cfi_offset 13, -3
 336 0162 EF92      		push r14
 337               	.LCFI22:
 338               		.cfi_def_cfa_offset 5
 339               		.cfi_offset 14, -4
 340 0164 FF92      		push r15
 341               	.LCFI23:
 342               		.cfi_def_cfa_offset 6
 343               		.cfi_offset 15, -5
 344 0166 0F93      		push r16
 345               	.LCFI24:
 346               		.cfi_def_cfa_offset 7
 347               		.cfi_offset 16, -6
 348 0168 1F93      		push r17
 349               	.LCFI25:
 350               		.cfi_def_cfa_offset 8
 351               		.cfi_offset 17, -7
 352 016a CF93      		push r28
 353               	.LCFI26:
 354               		.cfi_def_cfa_offset 9
 355               		.cfi_offset 28, -8
 356 016c DF93      		push r29
 357               	.LCFI27:
 358               		.cfi_def_cfa_offset 10
 359               		.cfi_offset 29, -9
 360 016e 00D0      		rcall .
 361 0170 00D0      		rcall .
 362 0172 00D0      		rcall .
 363               	.LCFI28:
 364               		.cfi_def_cfa_offset 16
 365 0174 CDB7      		in r28,__SP_L__
 366 0176 DEB7      		in r29,__SP_H__
 367               	.LCFI29:
 368               		.cfi_def_cfa_register 28
 369               	/* prologue: function */
 370               	/* frame size = 6 */
 371               	/* stack size = 14 */
 372               	.L__stack_usage = 14
 373 0178 9A83      		std Y+2,r25
 374 017a 8983      		std Y+1,r24
 375 017c 7C83      		std Y+4,r23
 376 017e 6B83      		std Y+3,r22
 377 0180 5E83      		std Y+6,r21
 378 0182 4D83      		std Y+5,r20
 152:matmult.c     ****    register int Outer, Inner, Index;
 153:matmult.c     **** 
 154:matmult.c     ****    for (Outer = 0; Outer < UPPERLIMIT; Outer++)
 379               		.loc 1 154 0
 380 0184 00E0      		ldi r16,0
 381 0186 10E0      		ldi r17,0
 382 0188 00C0      		rjmp .L12
 383               	.L17:
 155:matmult.c     ****       for (Inner = 0; Inner < UPPERLIMIT; Inner++)
 384               		.loc 1 155 0
 385 018a E12C      		mov r14,__zero_reg__
 386 018c F12C      		mov r15,__zero_reg__
 387 018e 00C0      		rjmp .L13
 388               	.L16:
 156:matmult.c     ****       {
 157:matmult.c     ****          Res [Outer][Inner] = 0;
 389               		.loc 1 157 0
 390 0190 9801      		movw r18,r16
 391 0192 48E2      		ldi r20,lo8(40)
 392 0194 429F      		mul r20,r18
 393 0196 C001      		movw r24,r0
 394 0198 439F      		mul r20,r19
 395 019a 900D      		add r25,r0
 396 019c 1124      		clr __zero_reg__
 397 019e 2D81      		ldd r18,Y+5
 398 01a0 3E81      		ldd r19,Y+6
 399 01a2 280F      		add r18,r24
 400 01a4 391F      		adc r19,r25
 401 01a6 C701      		movw r24,r14
 402 01a8 880F      		lsl r24
 403 01aa 991F      		rol r25
 404 01ac 820F      		add r24,r18
 405 01ae 931F      		adc r25,r19
 406 01b0 DC01      		movw r26,r24
 407 01b2 1196      		adiw r26,1
 408 01b4 1C92      		st X,__zero_reg__
 409 01b6 1E92      		st -X,__zero_reg__
 158:matmult.c     ****          for (Index = 0; Index < UPPERLIMIT; Index++)
 410               		.loc 1 158 0
 411 01b8 C12C      		mov r12,__zero_reg__
 412 01ba D12C      		mov r13,__zero_reg__
 413 01bc 00C0      		rjmp .L14
 414               	.L15:
 159:matmult.c     ****             Res[Outer][Inner]  +=
 415               		.loc 1 159 0 discriminator 2
 416 01be 9801      		movw r18,r16
 417 01c0 48E2      		ldi r20,lo8(40)
 418 01c2 429F      		mul r20,r18
 419 01c4 C001      		movw r24,r0
 420 01c6 439F      		mul r20,r19
 421 01c8 900D      		add r25,r0
 422 01ca 1124      		clr __zero_reg__
 423 01cc 2D81      		ldd r18,Y+5
 424 01ce 3E81      		ldd r19,Y+6
 425 01d0 A901      		movw r20,r18
 426 01d2 480F      		add r20,r24
 427 01d4 591F      		adc r21,r25
 428 01d6 9801      		movw r18,r16
 429 01d8 68E2      		ldi r22,lo8(40)
 430 01da 629F      		mul r22,r18
 431 01dc C001      		movw r24,r0
 432 01de 639F      		mul r22,r19
 433 01e0 900D      		add r25,r0
 434 01e2 1124      		clr __zero_reg__
 435 01e4 2D81      		ldd r18,Y+5
 436 01e6 3E81      		ldd r19,Y+6
 437 01e8 280F      		add r18,r24
 438 01ea 391F      		adc r19,r25
 439 01ec C701      		movw r24,r14
 440 01ee 880F      		lsl r24
 441 01f0 991F      		rol r25
 442 01f2 820F      		add r24,r18
 443 01f4 931F      		adc r25,r19
 444 01f6 FC01      		movw r30,r24
 445 01f8 2081      		ld r18,Z
 446 01fa 3181      		ldd r19,Z+1
 160:matmult.c     ****                A[Outer][Index] * B[Index][Inner];
 447               		.loc 1 160 0 discriminator 2
 448 01fc B801      		movw r22,r16
 449 01fe E8E2      		ldi r30,lo8(40)
 450 0200 E69F      		mul r30,r22
 451 0202 C001      		movw r24,r0
 452 0204 E79F      		mul r30,r23
 453 0206 900D      		add r25,r0
 454 0208 1124      		clr __zero_reg__
 455 020a 6981      		ldd r22,Y+1
 456 020c 7A81      		ldd r23,Y+2
 457 020e 680F      		add r22,r24
 458 0210 791F      		adc r23,r25
 459 0212 C601      		movw r24,r12
 460 0214 880F      		lsl r24
 461 0216 991F      		rol r25
 462 0218 860F      		add r24,r22
 463 021a 971F      		adc r25,r23
 464 021c DC01      		movw r26,r24
 465 021e ED91      		ld r30,X+
 466 0220 FC91      		ld r31,X
 467 0222 B601      		movw r22,r12
 468 0224 A8E2      		ldi r26,lo8(40)
 469 0226 A69F      		mul r26,r22
 470 0228 C001      		movw r24,r0
 471 022a A79F      		mul r26,r23
 472 022c 900D      		add r25,r0
 473 022e 1124      		clr __zero_reg__
 474 0230 6B81      		ldd r22,Y+3
 475 0232 7C81      		ldd r23,Y+4
 476 0234 680F      		add r22,r24
 477 0236 791F      		adc r23,r25
 478 0238 C701      		movw r24,r14
 479 023a 880F      		lsl r24
 480 023c 991F      		rol r25
 481 023e 860F      		add r24,r22
 482 0240 971F      		adc r25,r23
 483 0242 DC01      		movw r26,r24
 484 0244 6D91      		ld r22,X+
 485 0246 7C91      		ld r23,X
 486 0248 1197      		sbiw r26,1
 487 024a E69F      		mul r30,r22
 488 024c C001      		movw r24,r0
 489 024e E79F      		mul r30,r23
 490 0250 900D      		add r25,r0
 491 0252 F69F      		mul r31,r22
 492 0254 900D      		add r25,r0
 493 0256 1124      		clr r1
 159:matmult.c     ****             Res[Outer][Inner]  +=
 494               		.loc 1 159 0 discriminator 2
 495 0258 280F      		add r18,r24
 496 025a 391F      		adc r19,r25
 497 025c C701      		movw r24,r14
 498 025e 880F      		lsl r24
 499 0260 991F      		rol r25
 500 0262 840F      		add r24,r20
 501 0264 951F      		adc r25,r21
 502 0266 FC01      		movw r30,r24
 503 0268 3183      		std Z+1,r19
 504 026a 2083      		st Z,r18
 158:matmult.c     ****          for (Index = 0; Index < UPPERLIMIT; Index++)
 505               		.loc 1 158 0 discriminator 2
 506 026c FFEF      		ldi r31,-1
 507 026e CF1A      		sub r12,r31
 508 0270 DF0A      		sbc r13,r31
 509               	.L14:
 158:matmult.c     ****          for (Index = 0; Index < UPPERLIMIT; Index++)
 510               		.loc 1 158 0 is_stmt 0 discriminator 1
 511 0272 84E1      		ldi r24,20
 512 0274 C816      		cp r12,r24
 513 0276 D104      		cpc r13,__zero_reg__
 514 0278 04F4      		brge .+2
 515 027a 00C0      		rjmp .L15
 155:matmult.c     ****       {
 516               		.loc 1 155 0 is_stmt 1
 517 027c AFEF      		ldi r26,-1
 518 027e EA1A      		sub r14,r26
 519 0280 FA0A      		sbc r15,r26
 520               	.L13:
 155:matmult.c     ****       {
 521               		.loc 1 155 0 is_stmt 0 discriminator 1
 522 0282 B4E1      		ldi r27,20
 523 0284 EB16      		cp r14,r27
 524 0286 F104      		cpc r15,__zero_reg__
 525 0288 04F4      		brge .+2
 526 028a 00C0      		rjmp .L16
 154:matmult.c     ****       for (Inner = 0; Inner < UPPERLIMIT; Inner++)
 527               		.loc 1 154 0 is_stmt 1
 528 028c 0F5F      		subi r16,-1
 529 028e 1F4F      		sbci r17,-1
 530               	.L12:
 154:matmult.c     ****       for (Inner = 0; Inner < UPPERLIMIT; Inner++)
 531               		.loc 1 154 0 is_stmt 0 discriminator 1
 532 0290 0431      		cpi r16,20
 533 0292 1105      		cpc r17,__zero_reg__
 534 0294 04F4      		brge .+2
 535 0296 00C0      		rjmp .L17
 536               	/* epilogue start */
 161:matmult.c     ****        }
 162:matmult.c     **** }
 537               		.loc 1 162 0 is_stmt 1
 538 0298 2696      		adiw r28,6
 539 029a 0FB6      		in __tmp_reg__,__SREG__
 540 029c F894      		cli
 541 029e DEBF      		out __SP_H__,r29
 542 02a0 0FBE      		out __SREG__,__tmp_reg__
 543 02a2 CDBF      		out __SP_L__,r28
 544 02a4 DF91      		pop r29
 545 02a6 CF91      		pop r28
 546 02a8 1F91      		pop r17
 547 02aa 0F91      		pop r16
 548 02ac FF90      		pop r15
 549 02ae EF90      		pop r14
 550 02b0 DF90      		pop r13
 551 02b2 CF90      		pop r12
 552 02b4 0895      		ret
 553               		.cfi_endproc
 554               	.LFE5:
 556               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matmult.c
     /tmp/ccbTjnSO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccbTjnSO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccbTjnSO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccbTjnSO.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccbTjnSO.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccbTjnSO.s:7      *ABS*:0000000000000001 __zero_reg__
                            *COM*:0000000000000002 Seed
                            *COM*:0000000000000320 ArrayA
                            *COM*:0000000000000320 ArrayB
                            *COM*:0000000000000320 ResultArray
     /tmp/ccbTjnSO.s:17     .text:0000000000000000 main
     /tmp/ccbTjnSO.s:58     .text:0000000000000022 InitSeed
     /tmp/ccbTjnSO.s:91     .text:0000000000000038 Test
     /tmp/ccbTjnSO.s:155    .text:0000000000000086 Initialize
     /tmp/ccbTjnSO.s:324    .text:000000000000015e Multiply
     /tmp/ccbTjnSO.s:269    .text:0000000000000118 RandomInteger

UNDEFINED SYMBOLS
__divmodhi4
__do_clear_bss
